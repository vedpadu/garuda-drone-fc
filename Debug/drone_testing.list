
drone_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001089c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d0  08010a40  08010a40  00011a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f10  08012f10  00014380  2**0
                  CONTENTS
  4 .ARM          00000008  08012f10  08012f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f18  08012f18  00014380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f18  08012f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012f1c  08012f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000380  20000000  08012f20  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002438  20000380  080132a0  00014380  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027b8  080132a0  000147b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3f8  00000000  00000000  000143b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537b  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  00035b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  000374a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c816  00000000  00000000  000387d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b52  00000000  00000000  00054fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009608b  00000000  00000000  00076b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cbc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b18  00000000  00000000  0010cc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00114724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000380 	.word	0x20000380
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010a24 	.word	0x08010a24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000384 	.word	0x20000384
 80001dc:	08010a24 	.word	0x08010a24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <cs_low>:

// buffer to use for internal read spi calls. save memory
uint8_t bmi270_init_spi_buf[2] = {0x00, 0x00};
uint8_t bmi270_data_spi_buf[13] = {0x00};

void cs_low(){ HAL_GPIO_WritePin(CS_GPIO_Port_BMI270, CS_Pin_BMI270, GPIO_PIN_RESET); }
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <cs_low+0x14>)
 8000f52:	f004 f869 	bl	8005028 <HAL_GPIO_WritePin>
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000

08000f60 <cs_high>:
void cs_high(){ HAL_GPIO_WritePin(CS_GPIO_Port_BMI270, CS_Pin_BMI270, GPIO_PIN_SET); }
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <cs_high+0x14>)
 8000f6a:	f004 f85d 	bl	8005028 <HAL_GPIO_WritePin>
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020000 	.word	0x40020000

08000f78 <BMI270ReadData>:

void BMI270ReadData(float* accelBuf, float* gyroBuf)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	//accelX = 1,2; accelY = 3,4; accelZ = 5,6
	burst_read(BMI270_REG_ACC_DATA_X_LSB, bmi270_data_spi_buf, 12, 10);
 8000f82:	230a      	movs	r3, #10
 8000f84:	220c      	movs	r2, #12
 8000f86:	4958      	ldr	r1, [pc, #352]	@ (80010e8 <BMI270ReadData+0x170>)
 8000f88:	200c      	movs	r0, #12
 8000f8a:	f000 f9bf 	bl	800130c <burst_read>
	uint16_t accelXBin = ((uint16_t)bmi270_data_spi_buf[2]) << 8 | bmi270_data_spi_buf[1];
 8000f8e:	4b56      	ldr	r3, [pc, #344]	@ (80010e8 <BMI270ReadData+0x170>)
 8000f90:	789b      	ldrb	r3, [r3, #2]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <BMI270ReadData+0x170>)
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	83fb      	strh	r3, [r7, #30]
	uint16_t accelYBin = ((uint16_t)bmi270_data_spi_buf[4]) << 8 | bmi270_data_spi_buf[3];
 8000fa2:	4b51      	ldr	r3, [pc, #324]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b4f      	ldr	r3, [pc, #316]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	83bb      	strh	r3, [r7, #28]
	uint16_t accelZBin = ((uint16_t)bmi270_data_spi_buf[6]) << 8 | bmi270_data_spi_buf[5];
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fb8:	799b      	ldrb	r3, [r3, #6]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	837b      	strh	r3, [r7, #26]
	uint16_t gyroXBin = ((uint16_t)bmi270_data_spi_buf[8]) << 8 | bmi270_data_spi_buf[7];
 8000fca:	4b47      	ldr	r3, [pc, #284]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fcc:	7a1b      	ldrb	r3, [r3, #8]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fd4:	79db      	ldrb	r3, [r3, #7]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	833b      	strh	r3, [r7, #24]
	uint16_t gyroYBin = ((uint16_t)bmi270_data_spi_buf[10]) << 8 | bmi270_data_spi_buf[9];
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fe0:	7a9b      	ldrb	r3, [r3, #10]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <BMI270ReadData+0x170>)
 8000fe8:	7a5b      	ldrb	r3, [r3, #9]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	82fb      	strh	r3, [r7, #22]
	uint16_t gyroZBin = ((uint16_t)bmi270_data_spi_buf[12]) << 8 | bmi270_data_spi_buf[11];
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80010e8 <BMI270ReadData+0x170>)
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <BMI270ReadData+0x170>)
 8000ffc:	7adb      	ldrb	r3, [r3, #11]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	82bb      	strh	r3, [r7, #20]
	int16_t gyro_cas = getCAS();
 8001006:	f000 f873 	bl	80010f0 <getCAS>
 800100a:	4603      	mov	r3, r0
 800100c:	827b      	strh	r3, [r7, #18]
	int16_t gyroXSigned = (int16_t)gyroXBin;
 800100e:	8b3b      	ldrh	r3, [r7, #24]
 8001010:	823b      	strh	r3, [r7, #16]
	int16_t gyroZSigned = (int16_t)gyroZBin;
 8001012:	8abb      	ldrh	r3, [r7, #20]
 8001014:	81fb      	strh	r3, [r7, #14]
	gyroXSigned = gyroXSigned - (int16_t)(((int32_t) gyro_cas * (int32_t) gyroZSigned) / 512);
 8001016:	8a3a      	ldrh	r2, [r7, #16]
 8001018:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800101c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001020:	fb01 f303 	mul.w	r3, r1, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	da01      	bge.n	800102c <BMI270ReadData+0xb4>
 8001028:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800102c:	125b      	asrs	r3, r3, #9
 800102e:	b29b      	uxth	r3, r3
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	823b      	strh	r3, [r7, #16]

	accelBuf[0] = lsb_to_mps2((int16_t)accelXBin, (float)2.0, 16);
 8001036:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800103a:	2110      	movs	r1, #16
 800103c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f9a5 	bl	8001390 <lsb_to_mps2>
 8001046:	eef0 7a40 	vmov.f32	s15, s0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a00 	vstr	s15, [r3]
	accelBuf[1] = lsb_to_mps2((int16_t)accelYBin, (float)2.0, 16);
 8001050:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1d1c      	adds	r4, r3, #4
 8001058:	2110      	movs	r1, #16
 800105a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800105e:	4610      	mov	r0, r2
 8001060:	f000 f996 	bl	8001390 <lsb_to_mps2>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	edc4 7a00 	vstr	s15, [r4]
	accelBuf[2] = lsb_to_mps2((int16_t)accelZBin, (float)2.0, 16);
 800106c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f103 0408 	add.w	r4, r3, #8
 8001076:	2110      	movs	r1, #16
 8001078:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800107c:	4610      	mov	r0, r2
 800107e:	f000 f987 	bl	8001390 <lsb_to_mps2>
 8001082:	eef0 7a40 	vmov.f32	s15, s0
 8001086:	edc4 7a00 	vstr	s15, [r4]

	gyroBuf[0] = lsb_to_dps(gyroXSigned, (float)2000.0, 16);
 800108a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800108e:	2110      	movs	r1, #16
 8001090:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80010ec <BMI270ReadData+0x174>
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f9df 	bl	8001458 <lsb_to_dps>
 800109a:	eef0 7a40 	vmov.f32	s15, s0
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	edc3 7a00 	vstr	s15, [r3]
	gyroBuf[1] = lsb_to_dps((int16_t)gyroYBin, (float)2000.0, 16);
 80010a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	1d1c      	adds	r4, r3, #4
 80010ac:	2110      	movs	r1, #16
 80010ae:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80010ec <BMI270ReadData+0x174>
 80010b2:	4610      	mov	r0, r2
 80010b4:	f000 f9d0 	bl	8001458 <lsb_to_dps>
 80010b8:	eef0 7a40 	vmov.f32	s15, s0
 80010bc:	edc4 7a00 	vstr	s15, [r4]
	gyroBuf[2] = lsb_to_dps(gyroZSigned, (float)2000.0, 16);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f103 0408 	add.w	r4, r3, #8
 80010c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ca:	2110      	movs	r1, #16
 80010cc:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80010ec <BMI270ReadData+0x174>
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f9c1 	bl	8001458 <lsb_to_dps>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	edc4 7a00 	vstr	s15, [r4]
}
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200003a4 	.word	0x200003a4
 80010ec:	44fa0000 	.word	0x44fa0000

080010f0 <getCAS>:

int16_t getCAS(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	//TODO: get constant register from enum
	uint8_t gyro_cas = read_register(0x3c, bmi270_init_spi_buf);
 80010f6:	490e      	ldr	r1, [pc, #56]	@ (8001130 <getCAS+0x40>)
 80010f8:	203c      	movs	r0, #60	@ 0x3c
 80010fa:	f000 f8c5 	bl	8001288 <read_register>
 80010fe:	4603      	mov	r3, r0
 8001100:	717b      	strb	r3, [r7, #5]
	int16_t gyro_cas_ret;
	gyro_cas = gyro_cas & 0x7F;
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001108:	717b      	strb	r3, [r7, #5]
	if(gyro_cas & 0x40)
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <getCAS+0x30>
	{
		gyro_cas_ret = (int16_t)(((int16_t)gyro_cas) - 128);
 8001114:	797b      	ldrb	r3, [r7, #5]
 8001116:	b29b      	uxth	r3, r3
 8001118:	3b80      	subs	r3, #128	@ 0x80
 800111a:	b29b      	uxth	r3, r3
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	e001      	b.n	8001124 <getCAS+0x34>
	}else{
		gyro_cas_ret = (int16_t)(gyro_cas);
 8001120:	797b      	ldrb	r3, [r7, #5]
 8001122:	80fb      	strh	r3, [r7, #6]
	}
	return gyro_cas_ret;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200003a0 	.word	0x200003a0

08001134 <BMI270Init>:

void BMI270Init()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	bmi270EnableSPI();
 8001138:	f000 f898 	bl	800126c <bmi270EnableSPI>
	HAL_TIM_Base_Start_IT(exti_tim);
 800113c:	4824      	ldr	r0, [pc, #144]	@ (80011d0 <BMI270Init+0x9c>)
 800113e:	f006 fca5 	bl	8007a8c <HAL_TIM_Base_Start_IT>
	spiWorking = read_register(BMI270_REG_CHIP_ID, bmi270_init_spi_buf) == 0x24;
 8001142:	4924      	ldr	r1, [pc, #144]	@ (80011d4 <BMI270Init+0xa0>)
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f89f 	bl	8001288 <read_register>
 800114a:	4603      	mov	r3, r0
 800114c:	2b24      	cmp	r3, #36	@ 0x24
 800114e:	bf0c      	ite	eq
 8001150:	2301      	moveq	r3, #1
 8001152:	2300      	movne	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <BMI270Init+0xa4>)
 800115a:	701a      	strb	r2, [r3, #0]

	if(spiWorking){
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <BMI270Init+0xa4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d032      	beq.n	80011ca <BMI270Init+0x96>
		// Details for this init sequence in the datasheet.
		write_register(BMI270_REG_PWR_CONF, 0x00);
 8001164:	2100      	movs	r1, #0
 8001166:	207c      	movs	r0, #124	@ 0x7c
 8001168:	f000 f8b2 	bl	80012d0 <write_register>
		HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f002 ff23 	bl	8003fb8 <HAL_Delay>
		write_register(BMI270_REG_INIT_CTRL, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2059      	movs	r0, #89	@ 0x59
 8001176:	f000 f8ab 	bl	80012d0 <write_register>
		HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f002 ff1c 	bl	8003fb8 <HAL_Delay>
		// config file has target register included
		burst_transmit((uint8_t*)bmi270_config_file, 100, sizeof(bmi270_config_file));
 8001180:	f242 0201 	movw	r2, #8193	@ 0x2001
 8001184:	2164      	movs	r1, #100	@ 0x64
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BMI270Init+0xa8>)
 8001188:	f000 f8e8 	bl	800135c <burst_transmit>
		HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f002 ff13 	bl	8003fb8 <HAL_Delay>
		write_register(BMI270_REG_INIT_CTRL, 0x01);
 8001192:	2101      	movs	r1, #1
 8001194:	2059      	movs	r0, #89	@ 0x59
 8001196:	f000 f89b 	bl	80012d0 <write_register>
		HAL_Delay(40);
 800119a:	2028      	movs	r0, #40	@ 0x28
 800119c:	f002 ff0c 	bl	8003fb8 <HAL_Delay>
		initWorking = read_register(BMI270_REG_INTERNAL_STATUS, bmi270_init_spi_buf) == 0x01;
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <BMI270Init+0xa0>)
 80011a2:	2021      	movs	r0, #33	@ 0x21
 80011a4:	f000 f870 	bl	8001288 <read_register>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <BMI270Init+0xac>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if(initWorking)
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <BMI270Init+0xac>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <BMI270Init+0x96>
		{
			configureBMI270();
 80011c2:	f000 f80f 	bl	80011e4 <configureBMI270>
			configureBMI270EXTI();
 80011c6:	f000 f83b 	bl	8001240 <configureBMI270EXTI>
		}
	}
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000080c 	.word	0x2000080c
 80011d4:	200003a0 	.word	0x200003a0
 80011d8:	2000039c 	.word	0x2000039c
 80011dc:	08010b50 	.word	0x08010b50
 80011e0:	2000039d 	.word	0x2000039d

080011e4 <configureBMI270>:

void configureBMI270()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	write_register(BMI270_REG_PWR_CTRL, 0x0E);
 80011e8:	210e      	movs	r1, #14
 80011ea:	207d      	movs	r0, #125	@ 0x7d
 80011ec:	f000 f870 	bl	80012d0 <write_register>
	HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 fee1 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_ACC_CONF, 0xA8);
 80011f6:	21a8      	movs	r1, #168	@ 0xa8
 80011f8:	2040      	movs	r0, #64	@ 0x40
 80011fa:	f000 f869 	bl	80012d0 <write_register>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f002 feda 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_GYRO_CONF, 0xA9);
 8001204:	21a9      	movs	r1, #169	@ 0xa9
 8001206:	2042      	movs	r0, #66	@ 0x42
 8001208:	f000 f862 	bl	80012d0 <write_register>
	HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f002 fed3 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_PWR_CONF, 0x02);
 8001212:	2102      	movs	r1, #2
 8001214:	207c      	movs	r0, #124	@ 0x7c
 8001216:	f000 f85b 	bl	80012d0 <write_register>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f002 fecc 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_ACC_RANGE, 0x00);
 8001220:	2100      	movs	r1, #0
 8001222:	2041      	movs	r0, #65	@ 0x41
 8001224:	f000 f854 	bl	80012d0 <write_register>
	HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f002 fec5 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_GYRO_RANGE, 0b00001000);
 800122e:	2108      	movs	r1, #8
 8001230:	2043      	movs	r0, #67	@ 0x43
 8001232:	f000 f84d 	bl	80012d0 <write_register>
	HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f002 febe 	bl	8003fb8 <HAL_Delay>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <configureBMI270EXTI>:

void configureBMI270EXTI()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	write_register(BMI270_REG_INT_MAP_DATA, 0b01000100);
 8001244:	2144      	movs	r1, #68	@ 0x44
 8001246:	2058      	movs	r0, #88	@ 0x58
 8001248:	f000 f842 	bl	80012d0 <write_register>
	HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f002 feb3 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_INT1_IO_CTRL, 0b00001010);
 8001252:	210a      	movs	r1, #10
 8001254:	2053      	movs	r0, #83	@ 0x53
 8001256:	f000 f83b 	bl	80012d0 <write_register>
	HAL_Delay(10);
 800125a:	200a      	movs	r0, #10
 800125c:	f002 feac 	bl	8003fb8 <HAL_Delay>
	write_register(BMI270_REG_INT2_IO_CTRL, 0b00001010);
 8001260:	210a      	movs	r1, #10
 8001262:	2054      	movs	r0, #84	@ 0x54
 8001264:	f000 f834 	bl	80012d0 <write_register>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmi270EnableSPI>:

void bmi270EnableSPI()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	cs_low();
 8001270:	f7ff fe6a 	bl	8000f48 <cs_low>
    HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f002 fe9f 	bl	8003fb8 <HAL_Delay>
    cs_high();
 800127a:	f7ff fe71 	bl	8000f60 <cs_high>
    HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f002 fe9a 	bl	8003fb8 <HAL_Delay>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <read_register>:

//TODO: CHECK HAL_OK
uint8_t read_register(uint8_t rgstr, uint8_t* out_buf)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
	rgstr = rgstr | 0x80;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800129a:	b2db      	uxtb	r3, r3
 800129c:	71fb      	strb	r3, [r7, #7]
	cs_low();
 800129e:	f7ff fe53 	bl	8000f48 <cs_low>
	//TODO: remove dummy delay values
    HAL_SPI_Transmit(hspi_bmi270, &rgstr, 1, 10);
 80012a2:	1df9      	adds	r1, r7, #7
 80012a4:	230a      	movs	r3, #10
 80012a6:	2201      	movs	r2, #1
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <read_register+0x44>)
 80012aa:	f005 fe52 	bl	8006f52 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi_bmi270, out_buf, 2, 10);
 80012ae:	230a      	movs	r3, #10
 80012b0:	2202      	movs	r2, #2
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <read_register+0x44>)
 80012b6:	f005 ff8f 	bl	80071d8 <HAL_SPI_Receive>
    cs_high();
 80012ba:	f7ff fe51 	bl	8000f60 <cs_high>
    return out_buf[1];
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	785b      	ldrb	r3, [r3, #1]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000680 	.word	0x20000680

080012d0 <write_register>:

void write_register(uint8_t rgstr, uint8_t data)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
	cs_low();
 80012e0:	f7ff fe32 	bl	8000f48 <cs_low>
	uint8_t buf[2] = {rgstr, data};
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	733b      	strb	r3, [r7, #12]
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(hspi_bmi270, buf, 2, 10);
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	230a      	movs	r3, #10
 80012f2:	2202      	movs	r2, #2
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <write_register+0x38>)
 80012f6:	f005 fe2c 	bl	8006f52 <HAL_SPI_Transmit>
	cs_high();
 80012fa:	f7ff fe31 	bl	8000f60 <cs_high>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000680 	.word	0x20000680

0800130c <burst_read>:

uint8_t* burst_read(uint8_t rgstr, uint8_t* out_buf, uint16_t size, uint32_t timeout)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	81bb      	strh	r3, [r7, #12]
	rgstr = rgstr | 0x80;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001324:	b2db      	uxtb	r3, r3
 8001326:	73fb      	strb	r3, [r7, #15]
	cs_low();
 8001328:	f7ff fe0e 	bl	8000f48 <cs_low>
	//TODO: remove dummy delay values
	HAL_SPI_Transmit(hspi_bmi270, &rgstr, 1, 10);
 800132c:	f107 010f 	add.w	r1, r7, #15
 8001330:	230a      	movs	r3, #10
 8001332:	2201      	movs	r2, #1
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <burst_read+0x4c>)
 8001336:	f005 fe0c 	bl	8006f52 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_bmi270, out_buf, size + 1, timeout);
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <burst_read+0x4c>)
 8001346:	f005 ff47 	bl	80071d8 <HAL_SPI_Receive>
	cs_high();
 800134a:	f7ff fe09 	bl	8000f60 <cs_high>
	return out_buf;
 800134e:	68bb      	ldr	r3, [r7, #8]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000680 	.word	0x20000680

0800135c <burst_transmit>:

void burst_transmit(uint8_t* transmit_buf, uint32_t timeout, uint16_t size)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	4613      	mov	r3, r2
 8001368:	80fb      	strh	r3, [r7, #6]
	cs_low();
 800136a:	f7ff fded 	bl	8000f48 <cs_low>
	HAL_SPI_Transmit(hspi_bmi270, transmit_buf, size, timeout);
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <burst_transmit+0x2c>)
 8001376:	f005 fdec 	bl	8006f52 <HAL_SPI_Transmit>
	cs_high();
 800137a:	f7ff fdf1 	bl	8000f60 <cs_high>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000680 	.word	0x20000680
 800138c:	00000000 	.word	0x00000000

08001390 <lsb_to_mps2>:

float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	ed87 0a00 	vstr	s0, [r7]
 800139c:	460a      	mov	r2, r1
 800139e:	80fb      	strh	r3, [r7, #6]
 80013a0:	4613      	mov	r3, r2
 80013a2:	717b      	strb	r3, [r7, #5]
    double power = 2;
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8ae 	bl	8000514 <__aeabi_ui2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ec43 2b11 	vmov	d1, r2, r3
 80013c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80013c4:	f00e fbce 	bl	800fb64 <pow>
 80013c8:	ec51 0b10 	vmov	r0, r1, d0
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d4:	f7ff fa42 	bl	800085c <__aeabi_ddiv>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fbea 	bl	8000bb8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]

    return (9.8 * val * g_range) / half_scale;
 80013e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8a1 	bl	8000534 <__aeabi_i2d>
 80013f2:	a317      	add	r3, pc, #92	@ (adr r3, 8001450 <lsb_to_mps2+0xc0>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f906 	bl	8000608 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4614      	mov	r4, r2
 8001402:	461d      	mov	r5, r3
 8001404:	6838      	ldr	r0, [r7, #0]
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4620      	mov	r0, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f7ff f8f9 	bl	8000608 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4614      	mov	r4, r2
 800141c:	461d      	mov	r5, r3
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff f89a 	bl	8000558 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff fa16 	bl	800085c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbbe 	bl	8000bb8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	ee07 3a90 	vmov	s15, r3
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	9999999a 	.word	0x9999999a
 8001454:	40239999 	.word	0x40239999

08001458 <lsb_to_dps>:

float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	ed87 0a00 	vstr	s0, [r7]
 8001464:	460a      	mov	r2, r1
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	4613      	mov	r3, r2
 800146a:	717b      	strb	r3, [r7, #5]
    double power = 2;
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001474:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8001478:	797b      	ldrb	r3, [r7, #5]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f84a 	bl	8000514 <__aeabi_ui2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	ec43 2b11 	vmov	d1, r2, r3
 8001488:	ed97 0b04 	vldr	d0, [r7, #16]
 800148c:	f00e fb6a 	bl	800fb64 <pow>
 8001490:	ec51 0b10 	vmov	r0, r1, d0
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800149c:	f7ff f9de 	bl	800085c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb86 	bl	8000bb8 <__aeabi_d2f>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 80014b0:	edd7 6a00 	vldr	s13, [r7]
 80014b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_DMA_Init+0x6c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <MX_DMA_Init+0x6c>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_DMA_Init+0x6c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2101      	movs	r1, #1
 80014fe:	200c      	movs	r0, #12
 8001500:	f002 fe59 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001504:	200c      	movs	r0, #12
 8001506:	f002 fe72 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2101      	movs	r1, #1
 800150e:	200e      	movs	r0, #14
 8001510:	f002 fe51 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001514:	200e      	movs	r0, #14
 8001516:	f002 fe6a 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	2010      	movs	r0, #16
 8001520:	f002 fe49 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001524:	2010      	movs	r0, #16
 8001526:	f002 fe62 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2101      	movs	r1, #1
 800152e:	202f      	movs	r0, #47	@ 0x2f
 8001530:	f002 fe41 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001534:	202f      	movs	r0, #47	@ 0x2f
 8001536:	f002 fe5a 	bl	80041ee <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <unpackChannelDataHybridWide>:
 *
 * Output: crsf.PackedRCdataOut, crsf.LinkStatistics.uplink_TX_Power
 * Returns: TelemetryStatus bit
 */
void unpackChannelDataHybridWide(uint16_t *rcData, volatile elrsOtaPacket_t const * const otaPktPtr)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    unpackAnalogChannelData(rcData, otaPktPtr);
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f825 	bl	80015a4 <unpackAnalogChannelData>
    const uint8_t switchByte = otaPktPtr->rc.switches;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	799b      	ldrb	r3, [r3, #6]
 800155e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001562:	b2db      	uxtb	r3, r3
 8001564:	73fb      	strb	r3, [r7, #15]

    // The round-robin switch, 6-7 bits with the switch index implied by the nonce. Some logic moved to processRFPacket
    if (wideSwitchIndex >= 7) {
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <unpackChannelDataHybridWide+0x58>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d814      	bhi.n	8001598 <unpackChannelDataHybridWide+0x50>
        uint16_t switchValue;
        /*if (currTlmDenom < 8) {
            bins = 63;
            switchValue = switchByte & 0x3F; // 6-bit
        } else {*/
            bins = 127;
 800156e:	237f      	movs	r3, #127	@ 0x7f
 8001570:	73bb      	strb	r3, [r7, #14]
            switchValue = switchByte & 0x7F; // 7-bit
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b29b      	uxth	r3, r3
 8001576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800157a:	81bb      	strh	r3, [r7, #12]
        //}

        rcData[5 + wideSwitchIndex] = convertSwitchNb(switchValue, bins);
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	b299      	uxth	r1, r3
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <unpackChannelDataHybridWide+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	3305      	adds	r3, #5
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	18d4      	adds	r4, r2, r3
 800158c:	89bb      	ldrh	r3, [r7, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f879 	bl	8001686 <convertSwitchNb>
 8001594:	4603      	mov	r3, r0
 8001596:	8023      	strh	r3, [r4, #0]
    }

    //setRssiChannelData(rcData); necessary?
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	200003b1 	.word	0x200003b1

080015a4 <unpackAnalogChannelData>:

void unpackAnalogChannelData(uint16_t *rcData, volatile elrsOtaPacket_t const * const otaPktPtr)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    const uint8_t numOfChannels = 4;
 80015ae:	2304      	movs	r3, #4
 80015b0:	737b      	strb	r3, [r7, #13]
    const uint8_t srcBits = 10;
 80015b2:	230a      	movs	r3, #10
 80015b4:	733b      	strb	r3, [r7, #12]
    const uint16_t inputChannelMask = (1 << srcBits) - 1;
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3b01      	subs	r3, #1
 80015c2:	817b      	strh	r3, [r7, #10]

    uint8_t bitsMerged = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
    uint32_t readValue = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
    uint8_t readByteIndex = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t n = 0; n < numOfChannels; n++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	73bb      	strb	r3, [r7, #14]
 80015d4:	e02e      	b.n	8001634 <unpackAnalogChannelData+0x90>
        while (bitsMerged < srcBits) {
            uint8_t readByte = otaPktPtr->rc.ch[readByteIndex++];
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	73fa      	strb	r2, [r7, #15]
 80015dc:	461a      	mov	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	727b      	strb	r3, [r7, #9]
            readValue |= ((uint32_t) readByte) << bitsMerged;
 80015e6:	7a7a      	ldrb	r2, [r7, #9]
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
            bitsMerged += 8;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	3308      	adds	r3, #8
 80015f8:	75fb      	strb	r3, [r7, #23]
        while (bitsMerged < srcBits) {
 80015fa:	7dfa      	ldrb	r2, [r7, #23]
 80015fc:	7b3b      	ldrb	r3, [r7, #12]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d3e9      	bcc.n	80015d6 <unpackAnalogChannelData+0x32>
        }
        rcData[n] = 988 + (readValue & inputChannelMask);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	b29a      	uxth	r2, r3
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	4013      	ands	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	7bbb      	ldrb	r3, [r7, #14]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	440b      	add	r3, r1
 8001614:	f502 7277 	add.w	r2, r2, #988	@ 0x3dc
 8001618:	b292      	uxth	r2, r2
 800161a:	801a      	strh	r2, [r3, #0]
        readValue >>= srcBits;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	613b      	str	r3, [r7, #16]
        bitsMerged -= srcBits;
 8001626:	7dfa      	ldrb	r2, [r7, #23]
 8001628:	7b3b      	ldrb	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t n = 0; n < numOfChannels; n++) {
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	3301      	adds	r3, #1
 8001632:	73bb      	strb	r3, [r7, #14]
 8001634:	7bba      	ldrb	r2, [r7, #14]
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3de      	bcc.n	80015fa <unpackAnalogChannelData+0x56>
    }

    // The low latency switch
    rcData[4] = convertSwitch1b(otaPktPtr->rc.ch4);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 0408 	add.w	r4, r3, #8
 800164e:	4610      	mov	r0, r2
 8001650:	f000 f806 	bl	8001660 <convertSwitch1b>
 8001654:	4603      	mov	r3, r0
 8001656:	8023      	strh	r3, [r4, #0]
}
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <convertSwitch1b>:

uint16_t convertSwitch1b(const uint16_t val)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
    return val ? 2000 : 1000;
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <convertSwitch1b+0x16>
 8001670:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001674:	e001      	b.n	800167a <convertSwitch1b+0x1a>
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <convertSwitchNb>:

uint16_t convertSwitchNb(const uint16_t val, const uint16_t max)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	460a      	mov	r2, r1
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	4613      	mov	r3, r2
 8001694:	80bb      	strh	r3, [r7, #4]
    return (val > max) ? 1500 : val * 1000 / max + 1000;
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d80c      	bhi.n	80016b8 <convertSwitchNb+0x32>
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016a4:	fb03 f202 	mul.w	r2, r3, r2
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	e001      	b.n	80016bc <convertSwitchNb+0x36>
 80016b8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <hybridWideNonceToSwitchIndex>:

void hybridWideNonceToSwitchIndex(uint8_t nonce)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
    // 1, 2, 3, 4, 5, 6, 7, 0
    // Because telemetry can occur on every 2, 4, 8, 16, 32, 64, 128th packet
    // this makes sure each of the 8 values is sent at least once every 16 packets
    // regardless of the TLM ratio
    // Index 7 also can never fall on a telemetry slot
    wideSwitchIndex = ((nonce & 0x07) + ((nonce >> 3) & 0x01)) % 8;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 0207 	and.w	r2, r3, #7
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	425a      	negs	r2, r3
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	f002 0207 	and.w	r2, r2, #7
 80016ee:	bf58      	it	pl
 80016f0:	4253      	negpl	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <hybridWideNonceToSwitchIndex+0x3c>)
 80016f6:	701a      	strb	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200003b1 	.word	0x200003b1

08001708 <updateESC>:
		{3, &htim4, TIM_CHANNEL_3}, // red red
		{0, &htim4, TIM_CHANNEL_2}, // black red
};

// deals with the initialization as well as the motor setting
void updateESC(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	// wait power up
	 if (initializationCtr < ESC_POWER_UP_TIME) {
 800170e:	4b5a      	ldr	r3, [pc, #360]	@ (8001878 <updateESC+0x170>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001716:	4293      	cmp	r3, r2
 8001718:	d806      	bhi.n	8001728 <updateESC+0x20>
		  ++initializationCtr;
 800171a:	4b57      	ldr	r3, [pc, #348]	@ (8001878 <updateESC+0x170>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b55      	ldr	r3, [pc, #340]	@ (8001878 <updateESC+0x170>)
 8001724:	801a      	strh	r2, [r3, #0]
		  return;
 8001726:	e0a4      	b.n	8001872 <updateESC+0x16a>
	  }

	 int i;
	 for(i = 0;i < 1;i++){
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	e031      	b.n	8001792 <updateESC+0x8a>
		 if(!armed){
 800172e:	4b53      	ldr	r3, [pc, #332]	@ (800187c <updateESC+0x174>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <updateESC+0x4c>
			 dshot600(motorDshotBuffers[i],motorOutputs[i]);
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4a4f      	ldr	r2, [pc, #316]	@ (8001880 <updateESC+0x178>)
 8001742:	441a      	add	r2, r3
 8001744:	494f      	ldr	r1, [pc, #316]	@ (8001884 <updateESC+0x17c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f000 f8ce 	bl	80018f0 <dshot600>
		 }

		 HAL_TIM_PWM_Start_DMA(motorPWMTims[i].tim, motorPWMTims[i].channel, motorDshotBuffers[i], DSHOT_FRAME_SIZE);
 8001754:	494c      	ldr	r1, [pc, #304]	@ (8001888 <updateESC+0x180>)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	3304      	adds	r3, #4
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	4948      	ldr	r1, [pc, #288]	@ (8001888 <updateESC+0x180>)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3308      	adds	r3, #8
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <updateESC+0x178>)
 8001784:	441a      	add	r2, r3
 8001786:	2312      	movs	r3, #18
 8001788:	f006 fae2 	bl	8007d50 <HAL_TIM_PWM_Start_DMA>
	 for(i = 0;i < 1;i++){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	ddca      	ble.n	800172e <updateESC+0x26>
	 }



	  if (initializationCtr > ESC_POWER_UP_TIME+INIT_THROTTLE_MAX*6){
 8001798:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <updateESC+0x170>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f241 7270 	movw	r2, #6000	@ 0x1770
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d903      	bls.n	80017ac <updateESC+0xa4>
		 armed = 1;	//the arming sequence is ended
 80017a4:	4b35      	ldr	r3, [pc, #212]	@ (800187c <updateESC+0x174>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
		 return;
 80017aa:	e062      	b.n	8001872 <updateESC+0x16a>
	  }

	  ++initializationCtr;
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <updateESC+0x170>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <updateESC+0x170>)
 80017b6:	801a      	strh	r2, [r3, #0]

	  // creates a triangle necessary for the initialization
	  //int j;
	  if (do_init_throttle_down) {
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <updateESC+0x184>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d028      	beq.n	8001812 <updateESC+0x10a>
		 motorOutputs[0]--;
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <updateESC+0x17c>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <updateESC+0x17c>)
 80017ca:	801a      	strh	r2, [r3, #0]
		 motorOutputs[1]--;
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <updateESC+0x17c>)
 80017ce:	885b      	ldrh	r3, [r3, #2]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <updateESC+0x17c>)
 80017d6:	805a      	strh	r2, [r3, #2]
		 motorOutputs[2]--;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <updateESC+0x17c>)
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <updateESC+0x17c>)
 80017e2:	809a      	strh	r2, [r3, #4]
		 motorOutputs[3]--;
 80017e4:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <updateESC+0x17c>)
 80017e6:	88db      	ldrh	r3, [r3, #6]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <updateESC+0x17c>)
 80017ee:	80da      	strh	r2, [r3, #6]
		 if (motorOutputs[0]<INIT_THROTTLE_MIN){
 80017f0:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <updateESC+0x17c>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80017f6:	d83c      	bhi.n	8001872 <updateESC+0x16a>
			 motorOutputs[0]=INIT_THROTTLE_MIN;
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <updateESC+0x17c>)
 80017fa:	2230      	movs	r2, #48	@ 0x30
 80017fc:	801a      	strh	r2, [r3, #0]
			 motorOutputs[1]=INIT_THROTTLE_MIN;
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <updateESC+0x17c>)
 8001800:	2230      	movs	r2, #48	@ 0x30
 8001802:	805a      	strh	r2, [r3, #2]
			 motorOutputs[2]=INIT_THROTTLE_MIN;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <updateESC+0x17c>)
 8001806:	2230      	movs	r2, #48	@ 0x30
 8001808:	809a      	strh	r2, [r3, #4]
			 motorOutputs[3]=INIT_THROTTLE_MIN;
 800180a:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <updateESC+0x17c>)
 800180c:	2230      	movs	r2, #48	@ 0x30
 800180e:	80da      	strh	r2, [r3, #6]
 8001810:	e02f      	b.n	8001872 <updateESC+0x16a>
		 }

	 }
	 else {
		 motorOutputs[0]++;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <updateESC+0x17c>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <updateESC+0x17c>)
 800181c:	801a      	strh	r2, [r3, #0]
		 motorOutputs[1]++;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <updateESC+0x17c>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	3301      	adds	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <updateESC+0x17c>)
 8001828:	805a      	strh	r2, [r3, #2]
		 motorOutputs[2]++;
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <updateESC+0x17c>)
 800182c:	889b      	ldrh	r3, [r3, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <updateESC+0x17c>)
 8001834:	809a      	strh	r2, [r3, #4]
		 motorOutputs[3]++;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <updateESC+0x17c>)
 8001838:	88db      	ldrh	r3, [r3, #6]
 800183a:	3301      	adds	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <updateESC+0x17c>)
 8001840:	80da      	strh	r2, [r3, #6]
		 if (motorOutputs[0] > INIT_THROTTLE_MAX) {
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <updateESC+0x17c>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800184a:	d912      	bls.n	8001872 <updateESC+0x16a>
			 motorOutputs[0] = INIT_THROTTLE_MAX;
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <updateESC+0x17c>)
 800184e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001852:	801a      	strh	r2, [r3, #0]
			 motorOutputs[1] = INIT_THROTTLE_MAX;
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <updateESC+0x17c>)
 8001856:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800185a:	805a      	strh	r2, [r3, #2]
			 motorOutputs[2] = INIT_THROTTLE_MAX;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <updateESC+0x17c>)
 800185e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001862:	809a      	strh	r2, [r3, #4]
			 motorOutputs[3] = INIT_THROTTLE_MAX;
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <updateESC+0x17c>)
 8001866:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800186a:	80da      	strh	r2, [r3, #6]
			 do_init_throttle_down=1; // making sure they all hit the max
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <updateESC+0x184>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
//				 }
//			 }
//		 }
//	  }

}
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200003b4 	.word	0x200003b4
 800187c:	200003b2 	.word	0x200003b2
 8001880:	200003b8 	.word	0x200003b8
 8001884:	20000000 	.word	0x20000000
 8001888:	20000008 	.word	0x20000008
 800188c:	200003b6 	.word	0x200003b6

08001890 <setMotorOutputs>:

void setMotorOutputs(uint16_t* desiredOut){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(armed){
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <setMotorOutputs+0x54>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <setMotorOutputs+0x4a>
		memcpy(motorOutputs, desiredOut, MOTOR_COUNT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <setMotorOutputs+0x58>)
 80018a8:	601a      	str	r2, [r3, #0]
		int i;
		for(i = 0;i < 1;i++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e011      	b.n	80018d4 <setMotorOutputs+0x44>
			dshot600(motorDshotBuffers[i],motorOutputs[i]);
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <setMotorOutputs+0x5c>)
 80018bc:	441a      	add	r2, r3
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <setMotorOutputs+0x58>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f000 f811 	bl	80018f0 <dshot600>
		for(i = 0;i < 1;i++){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	ddea      	ble.n	80018b0 <setMotorOutputs+0x20>
		}
	}
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200003b2 	.word	0x200003b2
 80018e8:	20000000 	.word	0x20000000
 80018ec:	200003b8 	.word	0x200003b8

080018f0 <dshot600>:

// constructs a dshot packet for a given value
void dshot600(uint32_t *motor, uint16_t value)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
  uint16_t packet = value << 1;
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	83fb      	strh	r3, [r7, #30]

  // compute checksum
  int csum = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  int csum_data = packet;
 8001906:	8bfb      	ldrh	r3, [r7, #30]
 8001908:	617b      	str	r3, [r7, #20]

  motor[0] = 0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  for (int i = 1; i < 4; i++) {
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e009      	b.n	800192a <dshot600+0x3a>
    csum ^=  csum_data;   // xor data by nibbles
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4053      	eors	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
    csum_data >>= 4;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	111b      	asrs	r3, r3, #4
 8001922:	617b      	str	r3, [r7, #20]
  for (int i = 1; i < 4; i++) {
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	3301      	adds	r3, #1
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b03      	cmp	r3, #3
 800192e:	ddf2      	ble.n	8001916 <dshot600+0x26>
  }

  // preserves only last 4 bits
  csum &= 0xf;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	61bb      	str	r3, [r7, #24]

  // append checksum
  packet = (packet << 4) | csum;
 8001938:	8bfb      	ldrh	r3, [r7, #30]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	b21a      	sxth	r2, r3
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	83fb      	strh	r3, [r7, #30]

  // encoding
  int i;
  for (i = 0; i < 16; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e011      	b.n	8001972 <dshot600+0x82>
  {
      motor[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;  // MSB first
 800194e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da01      	bge.n	800195a <dshot600+0x6a>
 8001956:	220e      	movs	r2, #14
 8001958:	e000      	b.n	800195c <dshot600+0x6c>
 800195a:	2207      	movs	r2, #7
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	440b      	add	r3, r1
 8001964:	601a      	str	r2, [r3, #0]
      packet <<= 1;
 8001966:	8bfb      	ldrh	r3, [r7, #30]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	83fb      	strh	r3, [r7, #30]
  for (i = 0; i < 16; i++)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	ddea      	ble.n	800194e <dshot600+0x5e>
  }

  motor[16] = 0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3340      	adds	r3, #64	@ 0x40
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
  motor[17] = 0;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3344      	adds	r3, #68	@ 0x44
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	3724      	adds	r7, #36	@ 0x24
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <constrain>:
    uint8_t fhssHopInterval;            // every X packets we hop to a new frequency. Max value of 16 since only 4 bits have been assigned in the sync package.
    uint8_t preambleLen;
} elrsModSettings_t;

static inline int constrain(int amt, int low, int high)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	da01      	bge.n	80019ac <constrain+0x18>
        return low;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	e006      	b.n	80019ba <constrain+0x26>
    else if (amt > high)
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd01      	ble.n	80019b8 <constrain+0x24>
        return high;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	e000      	b.n	80019ba <constrain+0x26>
    else
        return amt;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <setBindingMode>:
	{1, 250, LORA_BW_800, LORA_SF_6, LORA_CR_LI_4_8, 4000, 4, 14},
	{2, 150, LORA_BW_800, LORA_SF_7, LORA_CR_LI_4_8, 6666, 4, 12},
	{3, 50, LORA_BW_800, LORA_SF_8, LORA_CR_LI_4_8, 20000, 2, 12} // bind mode rate index
};

void setBindingMode(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	if(!receiver.inBindingMode){
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <setBindingMode+0x30>)
 80019ce:	7fdb      	ldrb	r3, [r3, #31]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <setBindingMode+0x2c>
		receiver.inBindingMode = 1;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <setBindingMode+0x30>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	77da      	strb	r2, [r3, #31]
		memcpy(UID, BindingUID, 6);
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <setBindingMode+0x34>)
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <setBindingMode+0x38>)
 80019de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e2:	6018      	str	r0, [r3, #0]
 80019e4:	3304      	adds	r3, #4
 80019e6:	8019      	strh	r1, [r3, #0]
		//UID = BindingUID;

		refreshExpressLRS(bindRateIndex);
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <setBindingMode+0x3c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f904 	bl	8001bfc <refreshExpressLRS>
	}
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200004d8 	.word	0x200004d8
 80019fc:	20000510 	.word	0x20000510
 8001a00:	20000038 	.word	0x20000038
 8001a04:	20000040 	.word	0x20000040

08001a08 <setPrescaleForRateIndex>:

void setPrescaleForRateIndex(uint8_t index){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_AUTORELOAD(elrs_tim, airRateConfig[index].interval - 1);
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	491b      	ldr	r1, [pc, #108]	@ (8001a84 <setPrescaleForRateIndex+0x7c>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	330c      	adds	r3, #12
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <setPrescaleForRateIndex+0x80>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a2c:	79fa      	ldrb	r2, [r7, #7]
 8001a2e:	4915      	ldr	r1, [pc, #84]	@ (8001a84 <setPrescaleForRateIndex+0x7c>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	330c      	adds	r3, #12
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <setPrescaleForRateIndex+0x80>)
 8001a42:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim10, airRateConfig[index].interval - 1);
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	490f      	ldr	r1, [pc, #60]	@ (8001a84 <setPrescaleForRateIndex+0x7c>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	330c      	adds	r3, #12
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <setPrescaleForRateIndex+0x84>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	4908      	ldr	r1, [pc, #32]	@ (8001a84 <setPrescaleForRateIndex+0x7c>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <setPrescaleForRateIndex+0x84>)
 8001a74:	60d3      	str	r3, [r2, #12]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000050 	.word	0x20000050
 8001a88:	20000854 	.word	0x20000854
 8001a8c:	2000089c 	.word	0x2000089c

08001a90 <setLastClockTime>:

void setLastClockTime(uint32_t timeMicros, int* counter){
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	phaseLocker.lastClockTimeMicros = timeMicros;
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <setLastClockTime+0x2c>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6053      	str	r3, [r2, #4]
	*counter = *counter + 1;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
	phaseLocker.lastUpdateClock = 1;
 8001aaa:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <setLastClockTime+0x2c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	731a      	strb	r2, [r3, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200004fc 	.word	0x200004fc

08001ac0 <setLastPacketTime>:

void setLastPacketTime(uint32_t timeMicros){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	phaseLocker.lastPacketTimeMicros = timeMicros;
 8001ac8:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <setLastPacketTime+0x20>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
	phaseLocker.lastUpdateClock = 0;
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <setLastPacketTime+0x20>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	731a      	strb	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200004fc 	.word	0x200004fc

08001ae4 <clockPhaseUpdate>:

void clockPhaseUpdate(uint32_t timeMicros){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	if(receiver.connected != ELRS_DISCONNECTED){
 8001aec:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <clockPhaseUpdate+0xec>)
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d069      	beq.n	8001bc8 <clockPhaseUpdate+0xe4>
//		}else{
//			phaseLocker.rawPhaseDiff = (int32_t)getDeltaTime(phaseLocker.lastPacketTimeMicros, phaseLocker.lastClockTimeMicros) * -1; // if this is positive phase forward
//		}
//
//		phaseLocker.lastUpdateClock = 1;
		phaseLocker.rawPhaseDiff = getDeltaTime(phaseLocker.lastClockTimeMicros, phaseLocker.lastPacketTimeMicros);
 8001af4:	4b37      	ldr	r3, [pc, #220]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a36      	ldr	r2, [pc, #216]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 f91c 	bl	8002d3c <getDeltaTime>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001b08:	6093      	str	r3, [r2, #8]
		//phaseLocker.rawPhaseDiff = phaseLocker.lastClockTimeMicros - phaseLocker.lastPacketTimeMicros; // no possibility for this to be negative
		int32_t defaultInt = (int32_t)airRateConfig[receiver.rateIndex].interval;
 8001b0a:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <clockPhaseUpdate+0xec>)
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <clockPhaseUpdate+0xf4>)
 8001b12:	460b      	mov	r3, r1
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	617b      	str	r3, [r7, #20]
		int32_t offset;
		phaseLocker.rawPhaseDiff = phaseLocker.rawPhaseDiff % defaultInt;
 8001b22:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b2c:	fb01 f202 	mul.w	r2, r1, r2
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001b34:	6093      	str	r3, [r2, #8]
		int32_t phaseSigned = (int32_t)phaseLocker.rawPhaseDiff;
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	613b      	str	r3, [r7, #16]
		offset = defaultInt/2 - phaseSigned; // need to be half out of phase so that the events do not coliide!!
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	0fda      	lsrs	r2, r3, #31
 8001b40:	4413      	add	r3, r2
 8001b42:	105b      	asrs	r3, r3, #1
 8001b44:	461a      	mov	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
		}else{ // phase forward, the closer next packet is ahead
			offset = defaultInt - phaseSigned;
		}
		offset = */

		offset = constrain(offset, -defaultInt/4, defaultInt/4); // don't phase too much.
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	425b      	negs	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da00      	bge.n	8001b56 <clockPhaseUpdate+0x72>
 8001b54:	3303      	adds	r3, #3
 8001b56:	109b      	asrs	r3, r3, #2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da00      	bge.n	8001b62 <clockPhaseUpdate+0x7e>
 8001b60:	3303      	adds	r3, #3
 8001b62:	109b      	asrs	r3, r3, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7ff ff14 	bl	8001994 <constrain>
 8001b6c:	60f8      	str	r0, [r7, #12]
		if(offset > 10 || offset < -10){
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	dc03      	bgt.n	8001b7c <clockPhaseUpdate+0x98>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f113 0f0a 	cmn.w	r3, #10
 8001b7a:	da18      	bge.n	8001bae <clockPhaseUpdate+0xca>
			__HAL_TIM_SET_AUTORELOAD(elrs_tim, defaultInt + (offset/3) - 1);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <clockPhaseUpdate+0xf8>)
 8001b80:	fb82 1203 	smull	r1, r2, r2, r3
 8001b84:	17db      	asrs	r3, r3, #31
 8001b86:	1ad2      	subs	r2, r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <clockPhaseUpdate+0xfc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <clockPhaseUpdate+0xf8>)
 8001b98:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <clockPhaseUpdate+0xfc>)
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	e009      	b.n	8001bc2 <clockPhaseUpdate+0xde>
		}else{
			__HAL_TIM_SET_AUTORELOAD(elrs_tim, defaultInt - 1);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <clockPhaseUpdate+0xfc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <clockPhaseUpdate+0xfc>)
 8001bc0:	60da      	str	r2, [r3, #12]
		}
		phaseLocker.offset = offset;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <clockPhaseUpdate+0xf0>)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6113      	str	r3, [r2, #16]

	}
}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200004d8 	.word	0x200004d8
 8001bd4:	200004fc 	.word	0x200004fc
 8001bd8:	20000050 	.word	0x20000050
 8001bdc:	55555556 	.word	0x55555556
 8001be0:	20000854 	.word	0x20000854

08001be4 <getOffset>:
		return 1;
	}
	return 0;
}

int32_t getOffset(){
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return phaseLocker.offset;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <getOffset+0x14>)
 8001bea:	691b      	ldr	r3, [r3, #16]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200004fc 	.word	0x200004fc

08001bfc <refreshExpressLRS>:

// deals with frequency hopping and LORA params
void refreshExpressLRS(uint8_t newIndex){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	fhssGenSequence(UID);
 8001c06:	481a      	ldr	r0, [pc, #104]	@ (8001c70 <refreshExpressLRS+0x74>)
 8001c08:	f000 fa7c 	bl	8002104 <fhssGenSequence>
	receiver.nonceRX = 0;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	71da      	strb	r2, [r3, #7]
	receiver.rssi = 0;
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
	receiver.rssiFiltered = 0;
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	779a      	strb	r2, [r3, #30]
	receiver.snr = 0;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	775a      	strb	r2, [r3, #29]
	receiver.connected = ELRS_DISCONNECTED;
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	719a      	strb	r2, [r3, #6]

	uint32_t timeMicros = micros();
 8001c2a:	f001 f875 	bl	8002d18 <micros>
 8001c2e:	60f8      	str	r0, [r7, #12]
	phaseLocker.lastClockTimeMicros = timeMicros;
 8001c30:	4a11      	ldr	r2, [pc, #68]	@ (8001c78 <refreshExpressLRS+0x7c>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6053      	str	r3, [r2, #4]
	phaseLocker.lastPacketTimeMicros = timeMicros; // reset so we don't have crazy long differences
 8001c36:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <refreshExpressLRS+0x7c>)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6013      	str	r3, [r2, #0]
	phaseLocker.lastUpdateClock = 0;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <refreshExpressLRS+0x7c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	731a      	strb	r2, [r3, #12]
	phaseLocker.rawPhaseDiff = 0;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <refreshExpressLRS+0x7c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]

	receiver.currentFreq = fhssGetInitialFreq();
 8001c48:	f000 fb34 	bl	80022b4 <fhssGetInitialFreq>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c50:	6013      	str	r3, [r2, #0]
	initSX1280();
 8001c52:	f001 fa39 	bl	80030c8 <initSX1280>
	//writeRFFrequency(receiver.currentFreq);
	changeRateIndex(newIndex, receiver.currentFreq, UID[5]);
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <refreshExpressLRS+0x78>)
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <refreshExpressLRS+0x74>)
 8001c5c:	795a      	ldrb	r2, [r3, #5]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f9cf 	bl	8002004 <changeRateIndex>
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000510 	.word	0x20000510
 8001c74:	200004d8 	.word	0x200004d8
 8001c78:	200004fc 	.word	0x200004fc

08001c7c <processRFPacket>:

void processRFPacket(uint8_t* packet, uint32_t timeMicros){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	elrsOtaPacket_t * const otaPktPtr = (elrsOtaPacket_t * const) packet;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	61fb      	str	r3, [r7, #28]

	lastPacketMicros = timeMicros;
 8001c8a:	4a37      	ldr	r2, [pc, #220]	@ (8001d68 <processRFPacket+0xec>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6013      	str	r3, [r2, #0]
	switch(otaPktPtr->type) {
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d006      	beq.n	8001cac <processRFPacket+0x30>
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	dc5a      	bgt.n	8001d58 <processRFPacket+0xdc>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d02a      	beq.n	8001cfc <processRFPacket+0x80>
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d038      	beq.n	8001d1c <processRFPacket+0xa0>
			    //return;
		    }
		    break;
	    default:
	    	//displayInts4("nonceRx", receiver.nonceRX, "fhssInd", fhssIndex, "time", timeMicros, "phase", phaseLocker.rawPhaseDiff);
	    	break;
 8001caa:	e055      	b.n	8001d58 <processRFPacket+0xdc>
	    	uint8_t syncVal = processSyncPacket(otaPktPtr, timeMicros);
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	69f8      	ldr	r0, [r7, #28]
 8001cb0:	f000 f8ac 	bl	8001e0c <processSyncPacket>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	76fb      	strb	r3, [r7, #27]
	    	if(syncVal == 1){
 8001cb8:	7efb      	ldrb	r3, [r7, #27]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d103      	bne.n	8001cc6 <processRFPacket+0x4a>
	    		lastSync = timeMicros;
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <processRFPacket+0xf0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6013      	str	r3, [r2, #0]
		    break;
 8001cc4:	e04b      	b.n	8001d5e <processRFPacket+0xe2>
	    	}else if(syncVal == 0){
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <processRFPacket+0x68>
	    		char* test3 = "SYNC FAIL\n";
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <processRFPacket+0xf4>)
 8001cce:	613b      	str	r3, [r7, #16]
	    		CDC_Transmit_FS((uint8_t *)test3, strlen(test3));
 8001cd0:	6938      	ldr	r0, [r7, #16]
 8001cd2:	f7fe fad5 	bl	8000280 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f00a fc8d 	bl	800c5fc <CDC_Transmit_FS>
		    break;
 8001ce2:	e03c      	b.n	8001d5e <processRFPacket+0xe2>
	    		char* test3 = "SYNC FAIL NON THING\n";
 8001ce4:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <processRFPacket+0xf8>)
 8001ce6:	617b      	str	r3, [r7, #20]
	    		CDC_Transmit_FS((uint8_t *)test3, strlen(test3));
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7fe fac9 	bl	8000280 <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f00a fc81 	bl	800c5fc <CDC_Transmit_FS>
		    break;
 8001cfa:	e030      	b.n	8001d5e <processRFPacket+0xe2>
	    	if(receiver.switchMode == 0){
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <processRFPacket+0xfc>)
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <processRFPacket+0x94>
	    		hybridWideNonceToSwitchIndex(receiver.nonceRX);
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <processRFPacket+0xfc>)
 8001d08:	79db      	ldrb	r3, [r3, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fcdc 	bl	80016c8 <hybridWideNonceToSwitchIndex>
	    	memcpy((uint8_t *) rcPayload, (uint8_t *) packet, 8);
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <processRFPacket+0x100>)
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6810      	ldr	r0, [r2, #0]
 8001d16:	6851      	ldr	r1, [r2, #4]
 8001d18:	c303      	stmia	r3!, {r0, r1}
		    break;
 8001d1a:	e020      	b.n	8001d5e <processRFPacket+0xe2>
		    if (receiver.inBindingMode && otaPktPtr->msp_ul.packageIndex == 1 && otaPktPtr->msp_ul.payload[0] == ELRS_MSP_BIND) {
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <processRFPacket+0xfc>)
 8001d1e:	7fdb      	ldrb	r3, [r3, #31]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01b      	beq.n	8001d5c <processRFPacket+0xe0>
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d117      	bne.n	8001d5c <processRFPacket+0xe0>
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d113      	bne.n	8001d5c <processRFPacket+0xe0>
			    uint8_t* packy = (uint8_t*)&otaPktPtr->msp_ul.payload[1];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3303      	adds	r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]
			    processBindPacket(packy);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f83c 	bl	8001db8 <processBindPacket>
			    char* data4 = "BIND PACK\n";
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <processRFPacket+0x104>)
 8001d42:	60bb      	str	r3, [r7, #8]
			    CDC_Transmit_FS((uint8_t *)data4, strlen(data4));
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f7fe fa9b 	bl	8000280 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f00a fc53 	bl	800c5fc <CDC_Transmit_FS>
		    break;
 8001d56:	e001      	b.n	8001d5c <processRFPacket+0xe0>
	    	break;
 8001d58:	bf00      	nop
 8001d5a:	e000      	b.n	8001d5e <processRFPacket+0xe2>
		    break;
 8001d5c:	bf00      	nop
		   // char* data3 = "MSP\n";
		    //CDC_Transmit_FS((uint8_t *)data3, strlen(data3));
	}

}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000634 	.word	0x20000634
 8001d6c:	20000630 	.word	0x20000630
 8001d70:	08010a40 	.word	0x08010a40
 8001d74:	08010a4c 	.word	0x08010a4c
 8001d78:	200004d8 	.word	0x200004d8
 8001d7c:	20000518 	.word	0x20000518
 8001d80:	08010a64 	.word	0x08010a64

08001d84 <tentativeConnection>:

void tentativeConnection(uint32_t timeMicros){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	receiver.connected = ELRS_TENTATIVE;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <tentativeConnection+0x2c>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	719a      	strb	r2, [r3, #6]

	phaseLocker.lastClockTimeMicros = timeMicros;
 8001d92:	4a08      	ldr	r2, [pc, #32]	@ (8001db4 <tentativeConnection+0x30>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6053      	str	r3, [r2, #4]
	phaseLocker.lastPacketTimeMicros = timeMicros;
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <tentativeConnection+0x30>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
	phaseLocker.rawPhaseDiff = 0;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <tentativeConnection+0x30>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	200004d8 	.word	0x200004d8
 8001db4:	200004fc 	.word	0x200004fc

08001db8 <processBindPacket>:
	phaseLocker.lastClockTimeMicros = timeMicros;
	phaseLocker.lastPacketTimeMicros = timeMicros; // reset so we don't have crazy long differences
	writeRFFrequency(freqStart);
}

void processBindPacket(uint8_t* packet){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	UID[2] = packet[0];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <processBindPacket+0x4c>)
 8001dc6:	709a      	strb	r2, [r3, #2]
	UID[3] = packet[1];
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785a      	ldrb	r2, [r3, #1]
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <processBindPacket+0x4c>)
 8001dce:	70da      	strb	r2, [r3, #3]
	UID[4] = packet[2];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	789a      	ldrb	r2, [r3, #2]
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <processBindPacket+0x4c>)
 8001dd6:	711a      	strb	r2, [r3, #4]
	UID[5] = packet[3];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	78da      	ldrb	r2, [r3, #3]
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <processBindPacket+0x4c>)
 8001dde:	715a      	strb	r2, [r3, #5]

	receiver.inBindingMode = 0;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <processBindPacket+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	77da      	strb	r2, [r3, #31]
	receiver.rateIndex = 0; // TEMP!!! make connection searching alg
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <processBindPacket+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	711a      	strb	r2, [r3, #4]
	writeCurrentConfigsToFlash();
 8001dec:	f000 f886 	bl	8001efc <writeCurrentConfigsToFlash>
	refreshExpressLRS(receiver.rateIndex);
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <processBindPacket+0x50>)
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff01 	bl	8001bfc <refreshExpressLRS>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000510 	.word	0x20000510
 8001e08:	200004d8 	.word	0x200004d8

08001e0c <processSyncPacket>:

uint8_t processSyncPacket(elrsOtaPacket_t * const otaPktPtr, uint32_t timeMicros){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	// Verify the first two of three bytes of the binding ID, which should always match
	if (otaPktPtr->sync.UID3 != UID[3] || otaPktPtr->sync.UID4 != UID[4]) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	791a      	ldrb	r2, [r3, #4]
 8001e1a:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <processSyncPacket+0xe0>)
 8001e1c:	78db      	ldrb	r3, [r3, #3]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d105      	bne.n	8001e2e <processSyncPacket+0x22>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	795a      	ldrb	r2, [r3, #5]
 8001e26:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <processSyncPacket+0xe0>)
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <processSyncPacket+0x26>
		return 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e058      	b.n	8001ee4 <processSyncPacket+0xd8>
	}
	uint8_t needToWriteConfig = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]

	// need to change in loop
	receiver.nextRateIndex = airRateIndexToIndex24(otaPktPtr->sync.rateIndex, receiver.rateIndex);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f000 faad 	bl	80023a8 <airRateIndexToIndex24>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e54:	715a      	strb	r2, [r3, #5]
	if(receiver.nextRateIndex != receiver.rateIndex){
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e58:	795a      	ldrb	r2, [r3, #5]
 8001e5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e5c:	791b      	ldrb	r3, [r3, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d005      	beq.n	8001e6e <processSyncPacket+0x62>
		needToWriteConfig = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
		receiver.rateIndex = receiver.nextRateIndex;
 8001e66:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e68:	795a      	ldrb	r2, [r3, #5]
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e6c:	711a      	strb	r2, [r3, #4]
	}

	// need to update switch mode
	uint8_t switchEncMode = otaPktPtr->sync.switchEncMode;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	73bb      	strb	r3, [r7, #14]

	if(switchEncMode != receiver.switchMode){
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	7bba      	ldrb	r2, [r7, #14]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d005      	beq.n	8001e92 <processSyncPacket+0x86>
		receiver.switchMode = switchEncMode;
 8001e86:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	f882 3020 	strb.w	r3, [r2, #32]
		needToWriteConfig = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
	}

	if(needToWriteConfig){
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <processSyncPacket+0x90>
		writeCurrentConfigsToFlash();
 8001e98:	f000 f830 	bl	8001efc <writeCurrentConfigsToFlash>
	}
	//displayInts4("syncFhss", otaPktPtr->sync.fhssIndex, "fhss", fhssIndex, "syncNonce", otaPktPtr->sync.nonce, "time", timeMicros);
	// TODO: write connection establishing logic for the rf searching
	if (receiver.nonceRX != otaPktPtr->sync.nonce || fhssIndex != otaPktPtr->sync.fhssIndex || receiver.connected == ELRS_DISCONNECTED) {
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001e9e:	79da      	ldrb	r2, [r3, #7]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d109      	bne.n	8001ebc <processSyncPacket+0xb0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	785a      	ldrb	r2, [r3, #1]
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <processSyncPacket+0xe8>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d103      	bne.n	8001ebc <processSyncPacket+0xb0>
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001eb6:	799b      	ldrb	r3, [r3, #6]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d112      	bne.n	8001ee2 <processSyncPacket+0xd6>
		fhssIndex = (otaPktPtr->sync.fhssIndex) % seqCount;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	785b      	ldrb	r3, [r3, #1]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <processSyncPacket+0xec>)
 8001ec2:	8812      	ldrh	r2, [r2, #0]
 8001ec4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ec8:	fb01 f202 	mul.w	r2, r1, r2
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <processSyncPacket+0xe8>)
 8001ed2:	701a      	strb	r2, [r3, #0]
		//displayInts3("nonce", otaPktPtr->sync.nonce, "nonceRX", receiver.nonceRX, "time", phaseLocker.rawPhaseDiff);
		receiver.nonceRX = otaPktPtr->sync.nonce;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	789a      	ldrb	r2, [r3, #2]
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <processSyncPacket+0xe4>)
 8001eda:	71da      	strb	r2, [r3, #7]

		tentativeConnection(timeMicros);
 8001edc:	6838      	ldr	r0, [r7, #0]
 8001ede:	f7ff ff51 	bl	8001d84 <tentativeConnection>
	}
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000510 	.word	0x20000510
 8001ef0:	200004d8 	.word	0x200004d8
 8001ef4:	20000620 	.word	0x20000620
 8001ef8:	20000622 	.word	0x20000622

08001efc <writeCurrentConfigsToFlash>:

void writeCurrentConfigsToFlash(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	uint8_t buf[8] = {UID[0], UID[1], UID[2], UID[3], UID[4], UID[5], receiver.rateIndex, receiver.switchMode};
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	703b      	strb	r3, [r7, #0]
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	707b      	strb	r3, [r7, #1]
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
 8001f12:	70bb      	strb	r3, [r7, #2]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	70fb      	strb	r3, [r7, #3]
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f1c:	791b      	ldrb	r3, [r3, #4]
 8001f1e:	713b      	strb	r3, [r7, #4]
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <writeCurrentConfigsToFlash+0x48>)
 8001f22:	795b      	ldrb	r3, [r3, #5]
 8001f24:	717b      	strb	r3, [r7, #5]
 8001f26:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <writeCurrentConfigsToFlash+0x4c>)
 8001f28:	791b      	ldrb	r3, [r3, #4]
 8001f2a:	71bb      	strb	r3, [r7, #6]
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <writeCurrentConfigsToFlash+0x4c>)
 8001f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f32:	71fb      	strb	r3, [r7, #7]
	writeNewConfig(buf);
 8001f34:	463b      	mov	r3, r7
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fb16 	bl	8002568 <writeNewConfig>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000510 	.word	0x20000510
 8001f48:	200004d8 	.word	0x200004d8

08001f4c <initExpressLRS>:

void initExpressLRS(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	initFlashMemoryConfig(2);
 8001f52:	2002      	movs	r0, #2
 8001f54:	f000 fa66 	bl	8002424 <initFlashMemoryConfig>
	uint8_t initConfigs[8] = {0x00};
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
	readCurrentConfig(initConfigs);
 8001f60:	463b      	mov	r3, r7
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fa82 	bl	800246c <readCurrentConfig>
	UID[0] = initConfigs[0];
 8001f68:	783a      	ldrb	r2, [r7, #0]
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f6c:	701a      	strb	r2, [r3, #0]
	UID[1] = initConfigs[1];
 8001f6e:	787a      	ldrb	r2, [r7, #1]
 8001f70:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f72:	705a      	strb	r2, [r3, #1]
	UID[2] = initConfigs[2];
 8001f74:	78ba      	ldrb	r2, [r7, #2]
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f78:	709a      	strb	r2, [r3, #2]
	UID[3] = initConfigs[3];
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f7e:	70da      	strb	r2, [r3, #3]
	UID[4] = initConfigs[4];
 8001f80:	793a      	ldrb	r2, [r7, #4]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f84:	711a      	strb	r2, [r3, #4]
	UID[5] = initConfigs[5];
 8001f86:	797a      	ldrb	r2, [r7, #5]
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f8a:	715a      	strb	r2, [r3, #5]
	receiver.rateIndex = 1; // TEMP
 8001f8c:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <initExpressLRS+0x9c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	711a      	strb	r2, [r3, #4]
	receiver.switchMode = initConfigs[7];
 8001f92:	79fa      	ldrb	r2, [r7, #7]
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <initExpressLRS+0x9c>)
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]

	//initSX1280(); // move to main??

	if(UID[0] == 0 && UID[1] == 0 && UID[2] == 0 && UID[3] == 0 && UID[4] == 0 && UID[5] == 0){
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <initExpressLRS+0x98>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <initExpressLRS+0x84>
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <initExpressLRS+0x98>)
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <initExpressLRS+0x84>
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <initExpressLRS+0x98>)
 8001fac:	789b      	ldrb	r3, [r3, #2]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10e      	bne.n	8001fd0 <initExpressLRS+0x84>
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <initExpressLRS+0x98>)
 8001fb4:	78db      	ldrb	r3, [r3, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <initExpressLRS+0x84>
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <initExpressLRS+0x98>)
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <initExpressLRS+0x84>
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <initExpressLRS+0x98>)
 8001fc4:	795b      	ldrb	r3, [r3, #5]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <initExpressLRS+0x84>
		setBindingMode();
 8001fca:	f7ff fcfd 	bl	80019c8 <setBindingMode>
 8001fce:	e005      	b.n	8001fdc <initExpressLRS+0x90>
	}else{
		refreshExpressLRS(receiver.rateIndex);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <initExpressLRS+0x9c>)
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fe11 	bl	8001bfc <refreshExpressLRS>
	}
	//UID = BindingUID;
	//fhssGenSequence(UID);
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000510 	.word	0x20000510
 8001fe8:	200004d8 	.word	0x200004d8

08001fec <getPhaseDiff>:

uint8_t getFHSSIndex(){
	return fhssIndex;
}

uint32_t getPhaseDiff(){
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	return phaseLocker.rawPhaseDiff;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <getPhaseDiff+0x14>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200004fc 	.word	0x200004fc

08002004 <changeRateIndex>:

void changeRateIndex(uint8_t newIndex, uint32_t freq, uint8_t uid5){
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	4613      	mov	r3, r2
 8002012:	71bb      	strb	r3, [r7, #6]
	receiver.rateIndex = newIndex;
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <changeRateIndex+0x74>)
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	7113      	strb	r3, [r2, #4]
	elrsModSettings_t newSettings = airRateConfig[receiver.rateIndex];
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <changeRateIndex+0x74>)
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	4619      	mov	r1, r3
 8002020:	4a16      	ldr	r2, [pc, #88]	@ (800207c <changeRateIndex+0x78>)
 8002022:	460b      	mov	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	f107 040c 	add.w	r4, r7, #12
 8002030:	461d      	mov	r5, r3
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	682b      	ldr	r3, [r5, #0]
 8002038:	6023      	str	r3, [r4, #0]
	receiver.modParams = newSettings;
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <changeRateIndex+0x74>)
 800203c:	f103 0408 	add.w	r4, r3, #8
 8002040:	f107 050c 	add.w	r5, r7, #12
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	6023      	str	r3, [r4, #0]
	setPrescaleForRateIndex(newIndex);
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fcda 	bl	8001a08 <setPrescaleForRateIndex>
	setRFRate(newSettings.sf, newSettings.bw, newSettings.cr, newSettings.preambleLen, freq, uid5 & 0x01);
 8002054:	7d78      	ldrb	r0, [r7, #21]
 8002056:	7d39      	ldrb	r1, [r7, #20]
 8002058:	7dba      	ldrb	r2, [r7, #22]
 800205a:	7f7c      	ldrb	r4, [r7, #29]
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4623      	mov	r3, r4
 800206c:	f001 f83e 	bl	80030ec <setRFRate>
	//setRFRate(newSettings.sf, newSettings.bw, LORA_CR_LI_4_8, 12, fhssGetInitialFreq(), 1);
	//sx1280PollBusy();
	//writeRFFrequency(freq);
	//setRFRate(newSettings.sf, newSettings.bw, newSettings.cr, newSettings.preambleLen, freq, 1);
}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}
 8002078:	200004d8 	.word	0x200004d8
 800207c:	20000050 	.word	0x20000050

08002080 <doFhssIrq>:

uint8_t doFhssIrq(){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
	receiver.nonceRX += 1;
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <doFhssIrq+0x60>)
 8002088:	79db      	ldrb	r3, [r3, #7]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <doFhssIrq+0x60>)
 8002090:	71da      	strb	r2, [r3, #7]
	uint8_t modResultFHSS = (receiver.nonceRX) % receiver.modParams.fhssHopInterval;
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <doFhssIrq+0x60>)
 8002094:	79db      	ldrb	r3, [r3, #7]
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <doFhssIrq+0x60>)
 8002098:	7e12      	ldrb	r2, [r2, #24]
 800209a:	fbb3 f1f2 	udiv	r1, r3, r2
 800209e:	fb01 f202 	mul.w	r2, r1, r2
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]

	// TODO: make non-blocking? like betaflight
	if((receiver.inBindingMode == 0) && modResultFHSS == 0 && receiver.connected != ELRS_DISCONNECTED){
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <doFhssIrq+0x60>)
 80020a8:	7fdb      	ldrb	r3, [r3, #31]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d112      	bne.n	80020d4 <doFhssIrq+0x54>
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10f      	bne.n	80020d4 <doFhssIrq+0x54>
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <doFhssIrq+0x60>)
 80020b6:	799b      	ldrb	r3, [r3, #6]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d00b      	beq.n	80020d4 <doFhssIrq+0x54>
		receiver.currentFreq = fhssGetNextFreq();
 80020bc:	f000 f912 	bl	80022e4 <fhssGetNextFreq>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <doFhssIrq+0x60>)
 80020c4:	6013      	str	r3, [r2, #0]
		writeRFFrequency(receiver.currentFreq);
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <doFhssIrq+0x60>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f8fe 	bl	80032cc <writeRFFrequency>
		return 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <doFhssIrq+0x56>
	}
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004d8 	.word	0x200004d8

080020e4 <expressLrsSetRcDataFromPayload>:

void expressLrsSetRcDataFromPayload(uint16_t *rcData)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	volatile elrsOtaPacket_t * const otaPktPtr = (elrsOtaPacket_t * const) rcPayload;
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <expressLrsSetRcDataFromPayload+0x1c>)
 80020ee:	60fb      	str	r3, [r7, #12]
	unpackChannelDataHybridWide(rcData, otaPktPtr);
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fa28 	bl	8001548 <unpackChannelDataHybridWide>
	//rxExpressLrsSpiConfig()->switchMode == SM_WIDE ? unpackChannelDataHybridWide(rcData, otaPktPtr) : unpackChannelDataHybridSwitch8(rcData, otaPktPtr);
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000518 	.word	0x20000518

08002104 <fhssGenSequence>:
  The domain of the frequency is ignored as compared to Betaflight as the SX1280's settings do not vary
  based on the domain.

*/
void fhssGenSequence(const uint8_t inputUID[])
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    seed = (((long)inputUID[2] << 24) + ((long)inputUID[3] << 16) + ((long)inputUID[4] << 8) + inputUID[5]) ^ ELRS_OTA_VERSION_ID;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3302      	adds	r3, #2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	061a      	lsls	r2, r3, #24
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3303      	adds	r3, #3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	4413      	add	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	3205      	adds	r2, #5
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	4413      	add	r3, r2
 8002130:	f083 0303 	eor.w	r3, r3, #3
 8002134:	461a      	mov	r2, r3
 8002136:	4b57      	ldr	r3, [pc, #348]	@ (8002294 <fhssGenSequence+0x190>)
 8002138:	601a      	str	r2, [r3, #0]
    seqCount = (256 / maxf(freqCount, 1)) * freqCount;
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <fhssGenSequence+0x194>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	76fb      	strb	r3, [r7, #27]
 8002140:	2301      	movs	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	7efa      	ldrb	r2, [r7, #27]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4293      	cmp	r3, r2
 800214a:	bfb8      	it	lt
 800214c:	4613      	movlt	r3, r2
 800214e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002152:	fb92 f3f3 	sdiv	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	4a4f      	ldr	r2, [pc, #316]	@ (8002298 <fhssGenSequence+0x194>)
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	fb13 f302 	smulbb	r3, r3, r2
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b4e      	ldr	r3, [pc, #312]	@ (800229c <fhssGenSequence+0x198>)
 8002164:	801a      	strh	r2, [r3, #0]
    syncChannel = (freqCount / 2) + 1;
 8002166:	4b4c      	ldr	r3, [pc, #304]	@ (8002298 <fhssGenSequence+0x194>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3301      	adds	r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b4b      	ldr	r3, [pc, #300]	@ (80022a0 <fhssGenSequence+0x19c>)
 8002174:	701a      	strb	r2, [r3, #0]
    freqSpread = (freqStop - freqStart) * ELRS_FREQ_SPREAD_SCALE / maxf((freqCount - 1), 1);
 8002176:	4b4b      	ldr	r3, [pc, #300]	@ (80022a4 <fhssGenSequence+0x1a0>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b4b      	ldr	r3, [pc, #300]	@ (80022a8 <fhssGenSequence+0x1a4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	4a45      	ldr	r2, [pc, #276]	@ (8002298 <fhssGenSequence+0x194>)
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	3a01      	subs	r2, #1
 8002188:	613a      	str	r2, [r7, #16]
 800218a:	2201      	movs	r2, #1
 800218c:	60fa      	str	r2, [r7, #12]
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	428a      	cmp	r2, r1
 8002194:	bfb8      	it	lt
 8002196:	460a      	movlt	r2, r1
 8002198:	fbb3 f3f2 	udiv	r3, r3, r2
 800219c:	4a43      	ldr	r2, [pc, #268]	@ (80022ac <fhssGenSequence+0x1a8>)
 800219e:	6013      	str	r3, [r2, #0]

    // initialize the sequence array
    for (uint16_t i = 0; i < seqCount; i++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	83fb      	strh	r3, [r7, #30]
 80021a4:	e02f      	b.n	8002206 <fhssGenSequence+0x102>
        if (i % freqCount == 0) {
 80021a6:	8bfb      	ldrh	r3, [r7, #30]
 80021a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002298 <fhssGenSequence+0x194>)
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b0:	fb01 f202 	mul.w	r2, r1, r2
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <fhssGenSequence+0xc2>
            fhssSequence[i] = syncChannel;
 80021ba:	8bfb      	ldrh	r3, [r7, #30]
 80021bc:	4a38      	ldr	r2, [pc, #224]	@ (80022a0 <fhssGenSequence+0x19c>)
 80021be:	7811      	ldrb	r1, [r2, #0]
 80021c0:	4a3b      	ldr	r2, [pc, #236]	@ (80022b0 <fhssGenSequence+0x1ac>)
 80021c2:	54d1      	strb	r1, [r2, r3]
 80021c4:	e01c      	b.n	8002200 <fhssGenSequence+0xfc>
        } else if (i % freqCount == syncChannel) {
 80021c6:	8bfb      	ldrh	r3, [r7, #30]
 80021c8:	4a33      	ldr	r2, [pc, #204]	@ (8002298 <fhssGenSequence+0x194>)
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80021d0:	fb01 f202 	mul.w	r2, r1, r2
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <fhssGenSequence+0x19c>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d104      	bne.n	80021e8 <fhssGenSequence+0xe4>
            fhssSequence[i] = 0;
 80021de:	8bfb      	ldrh	r3, [r7, #30]
 80021e0:	4a33      	ldr	r2, [pc, #204]	@ (80022b0 <fhssGenSequence+0x1ac>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	54d1      	strb	r1, [r2, r3]
 80021e6:	e00b      	b.n	8002200 <fhssGenSequence+0xfc>
        } else {
            fhssSequence[i] = i % freqCount;
 80021e8:	8bfb      	ldrh	r3, [r7, #30]
 80021ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <fhssGenSequence+0x194>)
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80021f2:	fb01 f202 	mul.w	r2, r1, r2
 80021f6:	1a9a      	subs	r2, r3, r2
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	b2d1      	uxtb	r1, r2
 80021fc:	4a2c      	ldr	r2, [pc, #176]	@ (80022b0 <fhssGenSequence+0x1ac>)
 80021fe:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < seqCount; i++) {
 8002200:	8bfb      	ldrh	r3, [r7, #30]
 8002202:	3301      	adds	r3, #1
 8002204:	83fb      	strh	r3, [r7, #30]
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <fhssGenSequence+0x198>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	8bfa      	ldrh	r2, [r7, #30]
 800220c:	429a      	cmp	r2, r3
 800220e:	d3ca      	bcc.n	80021a6 <fhssGenSequence+0xa2>
        }
    }

    for (uint16_t i = 0; i < seqCount; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	83bb      	strh	r3, [r7, #28]
 8002214:	e033      	b.n	800227e <fhssGenSequence+0x17a>
        // if it's not the sync channel
        if (i % freqCount != 0) {
 8002216:	8bbb      	ldrh	r3, [r7, #28]
 8002218:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <fhssGenSequence+0x194>)
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002220:	fb01 f202 	mul.w	r2, r1, r2
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d026      	beq.n	8002278 <fhssGenSequence+0x174>
            uint8_t offset = (i / freqCount) * freqCount; // offset to start of current block
 800222a:	8bbb      	ldrh	r3, [r7, #28]
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <fhssGenSequence+0x194>)
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	fb93 f3f2 	sdiv	r3, r3, r2
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <fhssGenSequence+0x194>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	fb12 f303 	smulbb	r3, r2, r3
 800223e:	72fb      	strb	r3, [r7, #11]
            uint8_t rand = rngN(freqCount - 1) + 1; // random number between 1 and numFreqs
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <fhssGenSequence+0x194>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f87b 	bl	8002344 <rngN>
 800224e:	4603      	mov	r3, r0
 8002250:	3301      	adds	r3, #1
 8002252:	72bb      	strb	r3, [r7, #10]

            // switch this entry and another random entry in the same block
            uint8_t temp = fhssSequence[i];
 8002254:	8bbb      	ldrh	r3, [r7, #28]
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <fhssGenSequence+0x1ac>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	727b      	strb	r3, [r7, #9]
            fhssSequence[i] = fhssSequence[offset + rand];
 800225c:	7afa      	ldrb	r2, [r7, #11]
 800225e:	7abb      	ldrb	r3, [r7, #10]
 8002260:	441a      	add	r2, r3
 8002262:	8bbb      	ldrh	r3, [r7, #28]
 8002264:	4912      	ldr	r1, [pc, #72]	@ (80022b0 <fhssGenSequence+0x1ac>)
 8002266:	5c89      	ldrb	r1, [r1, r2]
 8002268:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <fhssGenSequence+0x1ac>)
 800226a:	54d1      	strb	r1, [r2, r3]
            fhssSequence[offset + rand] = temp;
 800226c:	7afa      	ldrb	r2, [r7, #11]
 800226e:	7abb      	ldrb	r3, [r7, #10]
 8002270:	4413      	add	r3, r2
 8002272:	490f      	ldr	r1, [pc, #60]	@ (80022b0 <fhssGenSequence+0x1ac>)
 8002274:	7a7a      	ldrb	r2, [r7, #9]
 8002276:	54ca      	strb	r2, [r1, r3]
    for (uint16_t i = 0; i < seqCount; i++) {
 8002278:	8bbb      	ldrh	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	83bb      	strh	r3, [r7, #28]
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <fhssGenSequence+0x198>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	8bba      	ldrh	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3c6      	bcc.n	8002216 <fhssGenSequence+0x112>
        }
    }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000062c 	.word	0x2000062c
 8002298:	2000004c 	.word	0x2000004c
 800229c:	20000622 	.word	0x20000622
 80022a0:	20000624 	.word	0x20000624
 80022a4:	20000048 	.word	0x20000048
 80022a8:	20000044 	.word	0x20000044
 80022ac:	20000628 	.word	0x20000628
 80022b0:	20000520 	.word	0x20000520

080022b4 <fhssGetInitialFreq>:

uint32_t fhssGetInitialFreq()
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
    return freqStart + (syncChannel * freqSpread / ELRS_FREQ_SPREAD_SCALE);
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <fhssGetInitialFreq+0x24>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <fhssGetInitialFreq+0x28>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	0a1a      	lsrs	r2, r3, #8
 80022c8:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <fhssGetInitialFreq+0x2c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4413      	add	r3, r2
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20000624 	.word	0x20000624
 80022dc:	20000628 	.word	0x20000628
 80022e0:	20000044 	.word	0x20000044

080022e4 <fhssGetNextFreq>:

uint32_t fhssGetNextFreq()
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
    fhssIndex = (fhssIndex + 1) % seqCount;
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <fhssGetNextFreq+0x4c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <fhssGetNextFreq+0x50>)
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80022f8:	fb01 f202 	mul.w	r2, r1, r2
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <fhssGetNextFreq+0x4c>)
 8002302:	701a      	strb	r2, [r3, #0]
    uint32_t freq = freqStart + (freqSpread * fhssSequence[fhssIndex] / ELRS_FREQ_SPREAD_SCALE);
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <fhssGetNextFreq+0x4c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <fhssGetNextFreq+0x54>)
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	461a      	mov	r2, r3
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <fhssGetNextFreq+0x58>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	0a1a      	lsrs	r2, r3, #8
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <fhssGetNextFreq+0x5c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	607b      	str	r3, [r7, #4]
    return freq;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000620 	.word	0x20000620
 8002334:	20000622 	.word	0x20000622
 8002338:	20000520 	.word	0x20000520
 800233c:	20000628 	.word	0x20000628
 8002340:	20000044 	.word	0x20000044

08002344 <rngN>:


uint8_t rngN(const uint8_t max)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
    const uint32_t m = 2147483648;
 800234e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002352:	617b      	str	r3, [r7, #20]
    const uint32_t a = 214013;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <rngN+0x58>)
 8002356:	613b      	str	r3, [r7, #16]
    const uint32_t c = 2531011;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <rngN+0x5c>)
 800235a:	60fb      	str	r3, [r7, #12]
    seed = (a * seed + c) % m;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <rngN+0x60>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	fb01 f202 	mul.w	r2, r1, r2
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <rngN+0x60>)
 800237a:	6013      	str	r3, [r2, #0]
    return (seed >> 16) % max;
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <rngN+0x60>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	fbb3 f1f2 	udiv	r1, r3, r2
 8002388:	fb01 f202 	mul.w	r2, r1, r2
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	b2db      	uxtb	r3, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	000343fd 	.word	0x000343fd
 80023a0:	00269ec3 	.word	0x00269ec3
 80023a4:	2000062c 	.word	0x2000062c

080023a8 <airRateIndexToIndex24>:

uint8_t airRateIndexToIndex24(uint8_t airRate, uint8_t currentIndex)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	460a      	mov	r2, r1
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71bb      	strb	r3, [r7, #6]
    switch (airRate) {
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d82a      	bhi.n	8002414 <airRateIndexToIndex24+0x6c>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <airRateIndexToIndex24+0x1c>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	080023f1 	.word	0x080023f1
 80023cc:	080023f5 	.word	0x080023f5
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	080023fd 	.word	0x080023fd
 80023d8:	08002401 	.word	0x08002401
 80023dc:	08002405 	.word	0x08002405
 80023e0:	08002409 	.word	0x08002409
 80023e4:	0800240d 	.word	0x0800240d
 80023e8:	08002411 	.word	0x08002411
    case 0:
        return currentIndex;
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	e012      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 1:
        return currentIndex;
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	e010      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 2:
        return currentIndex;
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	e00e      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 3:
        return currentIndex;
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	e00c      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 4:
        return 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e00a      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 5:
        return currentIndex;
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	e008      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 6:
        return 1;
 8002404:	2301      	movs	r3, #1
 8002406:	e006      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 7:
        return 2;
 8002408:	2302      	movs	r3, #2
 800240a:	e004      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 8:
        return currentIndex;
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	e002      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    case 9:
        return 3;
 8002410:	2303      	movs	r3, #3
 8002412:	e000      	b.n	8002416 <airRateIndexToIndex24+0x6e>
    default:
        return currentIndex;
 8002414:	79bb      	ldrb	r3, [r7, #6]
    }
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <initFlashMemoryConfig>:

uint32_t *firstFreeAddress = (uint32_t*)0x08060000;



uint8_t initFlashMemoryConfig(uint8_t sizeWords){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
	configSizeWords = sizeWords;
 800242e:	4a0c      	ldr	r2, [pc, #48]	@ (8002460 <initFlashMemoryConfig+0x3c>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	7013      	strb	r3, [r2, #0]
	getFirstFreeAddress();
 8002434:	f000 f900 	bl	8002638 <getFirstFreeAddress>

	// Check if the last word is not free. if this is the case then clear everything. This case is only likely on startup.
	uint32_t word = *finalSectorPtr;
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <initFlashMemoryConfig+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
	if(word != 0xFFFFFFFF){
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d003      	beq.n	8002450 <initFlashMemoryConfig+0x2c>
		eraseFlashSector();
 8002448:	f000 f912 	bl	8002670 <eraseFlashSector>
		return 0x03;
 800244c:	2303      	movs	r3, #3
 800244e:	e003      	b.n	8002458 <initFlashMemoryConfig+0x34>
	}

	return *initSectorPtr;
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <initFlashMemoryConfig+0x44>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3

}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000638 	.word	0x20000638
 8002464:	200000a4 	.word	0x200000a4
 8002468:	200000a0 	.word	0x200000a0

0800246c <readCurrentConfig>:

void readCurrentConfig(uint8_t* out){
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	uint32_t* startPtr = firstFreeAddress - configSizeWords;
 8002474:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <readCurrentConfig+0xec>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b38      	ldr	r3, [pc, #224]	@ (800255c <readCurrentConfig+0xf0>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	425b      	negs	r3, r3
 8002480:	4413      	add	r3, r2
 8002482:	61fb      	str	r3, [r7, #28]
	// This should never be true if write is called properly.
	if(startPtr > finalSectorPtr - configSizeWords + 1){
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <readCurrentConfig+0xf4>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b34      	ldr	r3, [pc, #208]	@ (800255c <readCurrentConfig+0xf0>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f1c3 0301 	rsb	r3, r3, #1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	429a      	cmp	r2, r3
 8002498:	d908      	bls.n	80024ac <readCurrentConfig+0x40>
		startPtr = finalSectorPtr - configSizeWords + 1;
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <readCurrentConfig+0xf4>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <readCurrentConfig+0xf0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f1c3 0301 	rsb	r3, r3, #1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
	}
	// should only be called if we are empty buffered, on first startup.
	if(startPtr < initSectorPtr){
 80024ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <readCurrentConfig+0xf8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d21d      	bcs.n	80024f2 <readCurrentConfig+0x86>
		for(int j = 0;j < configSizeWords;j++){
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	e014      	b.n	80024e6 <readCurrentConfig+0x7a>
			for(int i = 0;i < 4;i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00b      	b.n	80024da <readCurrentConfig+0x6e>
				out[j * 4 + i] = 0;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	009a      	lsls	r2, r3, #2
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4413      	add	r3, r2
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i < 4;i++){
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddf0      	ble.n	80024c2 <readCurrentConfig+0x56>
		for(int j = 0;j < configSizeWords;j++){
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <readCurrentConfig+0xf0>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	dbe4      	blt.n	80024bc <readCurrentConfig+0x50>
			}
		}
	}

	for(int j = 0;j < configSizeWords;j++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	e021      	b.n	800253c <readCurrentConfig+0xd0>
		uint32_t word = *(startPtr + j);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < 4;i++){
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e012      	b.n	8002530 <readCurrentConfig+0xc4>
			out[j * 4 + i] = (uint8_t)((word >> (8 * (3 - i))) & 0xFF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1c3 0303 	rsb	r3, r3, #3
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	fa22 f103 	lsr.w	r1, r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < 4;i++){
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	dde9      	ble.n	800250a <readCurrentConfig+0x9e>
	for(int j = 0;j < configSizeWords;j++){
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3301      	adds	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	4b07      	ldr	r3, [pc, #28]	@ (800255c <readCurrentConfig+0xf0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4293      	cmp	r3, r2
 8002546:	dbd7      	blt.n	80024f8 <readCurrentConfig+0x8c>
		}
	}

}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200000a8 	.word	0x200000a8
 800255c:	20000638 	.word	0x20000638
 8002560:	200000a4 	.word	0x200000a4
 8002564:	200000a0 	.word	0x200000a0

08002568 <writeNewConfig>:

void writeNewConfig(uint8_t* in){
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	// if the buffer fills up, start writing at the top. Very rarely called.
	if(firstFreeAddress > finalSectorPtr - configSizeWords + 1){
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <writeNewConfig+0xc0>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <writeNewConfig+0xc4>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f1c3 0301 	rsb	r3, r3, #1
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	441a      	add	r2, r3
 8002580:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <writeNewConfig+0xc8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d205      	bcs.n	8002594 <writeNewConfig+0x2c>
		firstFreeAddress = initSectorPtr;
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <writeNewConfig+0xcc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	@ (8002630 <writeNewConfig+0xc8>)
 800258e:	6013      	str	r3, [r2, #0]
		eraseFlashSector();
 8002590:	f000 f86e 	bl	8002670 <eraseFlashSector>
	}
	HAL_FLASH_Unlock();
 8002594:	f002 fa0a 	bl	80049ac <HAL_FLASH_Unlock>
	for(int i = 0;i < configSizeWords;i++){
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e030      	b.n	8002600 <writeNewConfig+0x98>
		uint32_t word = ((uint32_t)in[i * 4 + 0] << 24) + ((uint32_t)in[i * 4 + 1] << 16) + ((uint32_t)in[i * 4 + 2] << 8) + ((uint32_t)in[i * 4 + 3]);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	061a      	lsls	r2, r3, #24
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3301      	adds	r3, #1
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	441a      	add	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	4413      	add	r3, r2
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	3203      	adds	r2, #3
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	440a      	add	r2, r1
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(firstFreeAddress + i), word);
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <writeNewConfig+0xc8>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	461c      	mov	r4, r3
 80025ee:	4615      	mov	r5, r2
 80025f0:	4622      	mov	r2, r4
 80025f2:	462b      	mov	r3, r5
 80025f4:	2002      	movs	r0, #2
 80025f6:	f002 f985 	bl	8004904 <HAL_FLASH_Program>
	for(int i = 0;i < configSizeWords;i++){
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <writeNewConfig+0xc4>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4293      	cmp	r3, r2
 800260a:	dbc8      	blt.n	800259e <writeNewConfig+0x36>
	}
	firstFreeAddress = firstFreeAddress + configSizeWords;
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <writeNewConfig+0xc8>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <writeNewConfig+0xc4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <writeNewConfig+0xc8>)
 800261a:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Lock();
 800261c:	f002 f9e8 	bl	80049f0 <HAL_FLASH_Lock>
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	200000a4 	.word	0x200000a4
 800262c:	20000638 	.word	0x20000638
 8002630:	200000a8 	.word	0x200000a8
 8002634:	200000a0 	.word	0x200000a0

08002638 <getFirstFreeAddress>:

void getFirstFreeAddress(){
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
	uint32_t* currentDat = initSectorPtr;
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <getFirstFreeAddress+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	607b      	str	r3, [r7, #4]
	while((uint8_t)(*(currentDat)) != 0xFF){
 8002644:	e002      	b.n	800264c <getFirstFreeAddress+0x14>
		currentDat++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	607b      	str	r3, [r7, #4]
	while((uint8_t)(*(currentDat)) != 0xFF){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d1f7      	bne.n	8002646 <getFirstFreeAddress+0xe>
	}
	firstFreeAddress = currentDat;
 8002656:	4a05      	ldr	r2, [pc, #20]	@ (800266c <getFirstFreeAddress+0x34>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	200000a0 	.word	0x200000a0
 800266c:	200000a8 	.word	0x200000a8

08002670 <eraseFlashSector>:

void eraseFlashSector(){
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002674:	f002 f99a 	bl	80049ac <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8002678:	2102      	movs	r1, #2
 800267a:	2007      	movs	r0, #7
 800267c:	f002 fb08 	bl	8004c90 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8002680:	f002 f9b6 	bl	80049f0 <HAL_FLASH_Lock>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a64      	ldr	r2, [pc, #400]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b62      	ldr	r3, [pc, #392]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b5e      	ldr	r3, [pc, #376]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b57      	ldr	r3, [pc, #348]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a56      	ldr	r2, [pc, #344]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a4f      	ldr	r2, [pc, #316]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <MX_GPIO_Init+0x1b0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|LED_0_PLEASE_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002714:	4849      	ldr	r0, [pc, #292]	@ (800283c <MX_GPIO_Init+0x1b4>)
 8002716:	f002 fc87 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	2110      	movs	r1, #16
 800271e:	4848      	ldr	r0, [pc, #288]	@ (8002840 <MX_GPIO_Init+0x1b8>)
 8002720:	f002 fc82 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8002724:	2201      	movs	r2, #1
 8002726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800272a:	4845      	ldr	r0, [pc, #276]	@ (8002840 <MX_GPIO_Init+0x1b8>)
 800272c:	f002 fc7c 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_RST_GPIO_Port, RADIO_RST_Pin, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002736:	4843      	ldr	r0, [pc, #268]	@ (8002844 <MX_GPIO_Init+0x1bc>)
 8002738:	f002 fc76 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EXTI_Pin;
 800273c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_EXTI_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	483a      	ldr	r0, [pc, #232]	@ (800283c <MX_GPIO_Init+0x1b4>)
 8002754:	f002 fae4 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_0_PLEASE_Pin;
 8002758:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4832      	ldr	r0, [pc, #200]	@ (800283c <MX_GPIO_Init+0x1b4>)
 8002772:	f002 fad5 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI3_CS_Pin;
 8002776:	f248 0310 	movw	r3, #32784	@ 0x8010
 800277a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	482c      	ldr	r0, [pc, #176]	@ (8002840 <MX_GPIO_Init+0x1b8>)
 8002790:	f002 fac6 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BIND_Pin;
 8002794:	2304      	movs	r3, #4
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002798:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BIND_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4826      	ldr	r0, [pc, #152]	@ (8002844 <MX_GPIO_Init+0x1bc>)
 80027aa:	f002 fab9 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RX_SPI_BUSY_Pin;
 80027ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RX_SPI_BUSY_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	481f      	ldr	r0, [pc, #124]	@ (8002840 <MX_GPIO_Init+0x1b8>)
 80027c4:	f002 faac 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_EXTI_Pin;
 80027c8:	2340      	movs	r3, #64	@ 0x40
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_EXTI_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4819      	ldr	r0, [pc, #100]	@ (8002844 <MX_GPIO_Init+0x1bc>)
 80027de:	f002 fa9f 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_RST_Pin;
 80027e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RADIO_RST_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4812      	ldr	r0, [pc, #72]	@ (8002844 <MX_GPIO_Init+0x1bc>)
 80027fc:	f002 fa90 	bl	8004d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 4, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2104      	movs	r1, #4
 8002804:	2008      	movs	r0, #8
 8002806:	f001 fcd6 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800280a:	2008      	movs	r0, #8
 800280c:	f001 fcef 	bl	80041ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2103      	movs	r1, #3
 8002814:	2017      	movs	r0, #23
 8002816:	f001 fcce 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800281a:	2017      	movs	r0, #23
 800281c:	f001 fce7 	bl	80041ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	2028      	movs	r0, #40	@ 0x28
 8002826:	f001 fcc6 	bl	80041b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800282a:	2028      	movs	r0, #40	@ 0x28
 800282c:	f001 fcdf 	bl	80041ee <HAL_NVIC_EnableIRQ>

}
 8002830:	bf00      	nop
 8002832:	3728      	adds	r7, #40	@ 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	40020800 	.word	0x40020800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400

08002848 <IMUInit>:

float gyro[3];
float accel[3];

void IMUInit()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	BMI270Init();
 800284c:	f7fe fc72 	bl	8001134 <BMI270Init>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <readIMUData>:

void readIMUData()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	BMI270ReadData(accel, gyro);
 8002858:	4902      	ldr	r1, [pc, #8]	@ (8002864 <readIMUData+0x10>)
 800285a:	4803      	ldr	r0, [pc, #12]	@ (8002868 <readIMUData+0x14>)
 800285c:	f7fe fb8c 	bl	8000f78 <BMI270ReadData>
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000063c 	.word	0x2000063c
 8002868:	20000648 	.word	0x20000648

0800286c <HAL_TIM_PeriodElapsedCallback>:




// figure out where to put these, these are specific to the motor and the gyro.. not necessary to be here
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_TIM_PeriodElapsedCallback+0x16>
			updateESC();
 800287c:	f7fe ff44 	bl	8001708 <updateESC>
		  }

		  //countMicros++;
		  //handleConnectionState(micros());
	  }
}
 8002880:	e01b      	b.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x4e>
	  }else if(htim == &htim9){
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a10      	ldr	r2, [pc, #64]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10c      	bne.n	80028a4 <HAL_TIM_PeriodElapsedCallback+0x38>
		  setLastClockTime(micros(), &countMicros);
 800288a:	f000 fa45 	bl	8002d18 <micros>
 800288e:	4603      	mov	r3, r0
 8002890:	490e      	ldr	r1, [pc, #56]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8fc 	bl	8001a90 <setLastClockTime>
		  clockPhaseUpdate(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff f923 	bl	8001ae4 <clockPhaseUpdate>
		  doFhssIrq();
 800289e:	f7ff fbef 	bl	8002080 <doFhssIrq>
}
 80028a2:	e00a      	b.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x4e>
	  }else if(htim == &htim10){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d106      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x4e>
		  if(packetArrived){
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x4e>
			  expressLrsSetRcDataFromPayload(rcData);
 80028b4:	4808      	ldr	r0, [pc, #32]	@ (80028d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80028b6:	f7ff fc15 	bl	80020e4 <expressLrsSetRcDataFromPayload>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000080c 	.word	0x2000080c
 80028c8:	20000854 	.word	0x20000854
 80028cc:	20000678 	.word	0x20000678
 80028d0:	2000089c 	.word	0x2000089c
 80028d4:	2000067c 	.word	0x2000067c
 80028d8:	20000664 	.word	0x20000664

080028dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_6) {
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b40      	cmp	r3, #64	@ 0x40
 80028ea:	d102      	bne.n	80028f2 <HAL_GPIO_EXTI_Callback+0x16>
	  readIMUData();
 80028ec:	f7ff ffb2 	bl	8002854 <readIMUData>
	  setBindingMode();

  } else {
      __NOP();
  }
}
 80028f0:	e092      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x13c>
  } else if (GPIO_Pin == GPIO_PIN_13) {
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f8:	d17c      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x118>
	  packyCount+=1;
 80028fa:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x144>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a47      	ldr	r2, [pc, #284]	@ (8002a20 <HAL_GPIO_EXTI_Callback+0x144>)
 8002902:	6013      	str	r3, [r2, #0]
	  setLastPacketTime(micros());
 8002904:	f000 fa08 	bl	8002d18 <micros>
 8002908:	4603      	mov	r3, r0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f8d8 	bl	8001ac0 <setLastPacketTime>
	  uint8_t clear_irq[3] = {0x97, 0xFF, 0xFF};
 8002910:	4a44      	ldr	r2, [pc, #272]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x148>)
 8002912:	f107 0318 	add.w	r3, r7, #24
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4611      	mov	r1, r2
 800291a:	8019      	strh	r1, [r3, #0]
 800291c:	3302      	adds	r3, #2
 800291e:	0c12      	lsrs	r2, r2, #16
 8002920:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002928:	483f      	ldr	r0, [pc, #252]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 800292a:	f002 fb7d 	bl	8005028 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, clear_irq, 3, 10);
 800292e:	f107 0118 	add.w	r1, r7, #24
 8002932:	230a      	movs	r3, #10
 8002934:	2203      	movs	r2, #3
 8002936:	483d      	ldr	r0, [pc, #244]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x150>)
 8002938:	f004 fb0b 	bl	8006f52 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002942:	4839      	ldr	r0, [pc, #228]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002944:	f002 fb70 	bl	8005028 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET); // get pointer
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800294e:	4836      	ldr	r0, [pc, #216]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002950:	f002 fb6a 	bl	8005028 <HAL_GPIO_WritePin>
	  uint8_t transmit_buf[4] = {0x17, 0x00, 0x00};
 8002954:	2317      	movs	r3, #23
 8002956:	617b      	str	r3, [r7, #20]
	  HAL_SPI_Transmit(&hspi3, transmit_buf, 4, 10);
 8002958:	f107 0114 	add.w	r1, r7, #20
 800295c:	230a      	movs	r3, #10
 800295e:	2204      	movs	r2, #4
 8002960:	4832      	ldr	r0, [pc, #200]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x150>)
 8002962:	f004 faf6 	bl	8006f52 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, packet_pointer_buf, 4, 10);
 8002966:	230a      	movs	r3, #10
 8002968:	2204      	movs	r2, #4
 800296a:	4931      	ldr	r1, [pc, #196]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x154>)
 800296c:	482f      	ldr	r0, [pc, #188]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x150>)
 800296e:	f004 fc33 	bl	80071d8 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002978:	482b      	ldr	r0, [pc, #172]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 800297a:	f002 fb55 	bl	8005028 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET); // read buffer data
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002984:	4828      	ldr	r0, [pc, #160]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002986:	f002 fb4f 	bl	8005028 <HAL_GPIO_WritePin>
	  uint8_t transmit_buf_2[11] = {0x1B, packet_pointer_buf[0] - 16, 0x00};
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	f8c3 2007 	str.w	r2, [r3, #7]
 8002998:	231b      	movs	r3, #27
 800299a:	723b      	strb	r3, [r7, #8]
 800299c:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0x154>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	3b10      	subs	r3, #16
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	727b      	strb	r3, [r7, #9]
	  HAL_SPI_Transmit(&hspi3, transmit_buf_2, 11, 1);
 80029a6:	f107 0108 	add.w	r1, r7, #8
 80029aa:	2301      	movs	r3, #1
 80029ac:	220b      	movs	r2, #11
 80029ae:	481f      	ldr	r0, [pc, #124]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x150>)
 80029b0:	f004 facf 	bl	8006f52 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi3, transmit_buf_2, 11, 10);
 80029b4:	f107 0108 	add.w	r1, r7, #8
 80029b8:	230a      	movs	r3, #10
 80029ba:	220b      	movs	r2, #11
 80029bc:	481b      	ldr	r0, [pc, #108]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0x150>)
 80029be:	f004 fc0b 	bl	80071d8 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80029c2:	2201      	movs	r2, #1
 80029c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c8:	4817      	ldr	r0, [pc, #92]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0x14c>)
 80029ca:	f002 fb2d 	bl	8005028 <HAL_GPIO_WritePin>
	  memcpy((uint8_t *) radioDmaBuffer, (uint8_t *) transmit_buf_2, 8);
 80029ce:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x158>)
 80029d0:	461a      	mov	r2, r3
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029da:	e882 0003 	stmia.w	r2, {r0, r1}
	  processRFPacket((uint8_t *)radioDmaBuffer, micros());
 80029de:	f000 f99b 	bl	8002d18 <micros>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4813      	ldr	r0, [pc, #76]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0x158>)
 80029e8:	f7ff f948 	bl	8001c7c <processRFPacket>
	  packetArrived = 1;
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0x15c>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	e011      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x13c>
  } else if(GPIO_Pin == GPIO_PIN_2){
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d10d      	bne.n	8002a16 <HAL_GPIO_EXTI_Callback+0x13a>
	  char* data4 = "BIND\n";
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0x160>)
 80029fc:	61fb      	str	r3, [r7, #28]
	  CDC_Transmit_FS((uint8_t *)data4, strlen(data4));
 80029fe:	69f8      	ldr	r0, [r7, #28]
 8002a00:	f7fd fc3e 	bl	8000280 <strlen>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	69f8      	ldr	r0, [r7, #28]
 8002a0c:	f009 fdf6 	bl	800c5fc <CDC_Transmit_FS>
	  setBindingMode();
 8002a10:	f7fe ffda 	bl	80019c8 <setBindingMode>
}
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x13c>
      __NOP();
 8002a16:	bf00      	nop
}
 8002a18:	bf00      	nop
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000674 	.word	0x20000674
 8002a24:	08010a78 	.word	0x08010a78
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	200006d8 	.word	0x200006d8
 8002a30:	20000660 	.word	0x20000660
 8002a34:	20000658 	.word	0x20000658
 8002a38:	2000067c 	.word	0x2000067c
 8002a3c:	08010a70 	.word	0x08010a70

08002a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b08b      	sub	sp, #44	@ 0x2c
 8002a44:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	uint16_t buf[4] = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4e:	f001 fa41 	bl	8003ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a52:	f000 f8ad 	bl	8002bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a56:	f7ff fe17 	bl	8002688 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a5a:	f7fe fd3d 	bl	80014d8 <MX_DMA_Init>
  MX_TIM4_Init();
 8002a5e:	f000 fe8b 	bl	8003778 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002a62:	f000 fdb1 	bl	80035c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a66:	f000 fe2f 	bl	80036c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002a6a:	f000 ff05 	bl	8003878 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8002a6e:	f009 fd07 	bl	800c480 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002a72:	f000 f981 	bl	8002d78 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002a76:	f000 f9b5 	bl	8002de4 <MX_SPI3_Init>
  MX_TIM9_Init();
 8002a7a:	f000 ff4b 	bl	8003914 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002a7e:	f000 ff83 	bl	8003988 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  uint32_t startingTick = HAL_GetTick();
 8002a82:	f001 fa8d 	bl	8003fa0 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a88:	210c      	movs	r1, #12
 8002a8a:	4839      	ldr	r0, [pc, #228]	@ (8002b70 <main+0x130>)
 8002a8c:	f005 f8b0 	bl	8007bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8002a90:	4838      	ldr	r0, [pc, #224]	@ (8002b74 <main+0x134>)
 8002a92:	f004 fffb 	bl	8007a8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8002a96:	4838      	ldr	r0, [pc, #224]	@ (8002b78 <main+0x138>)
 8002a98:	f004 fff8 	bl	8007a8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8002a9c:	4837      	ldr	r0, [pc, #220]	@ (8002b7c <main+0x13c>)
 8002a9e:	f004 fff5 	bl	8007a8c <HAL_TIM_Base_Start_IT>
  TIM3->CCR4 = 50;
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <main+0x140>)
 8002aa4:	2232      	movs	r2, #50	@ 0x32
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  packyCount = 0;
 8002aa8:	4b36      	ldr	r3, [pc, #216]	@ (8002b84 <main+0x144>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
//  HAL_Delay(1);
//  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
  //uint8_t *data = "SPI WORKIG\n";

  //uint8_t CHIP_ID_READ[2] = {0x80 | 0x00, 0x00};
  initExpressLRS();
 8002aae:	f7ff fa4d 	bl	8001f4c <initExpressLRS>
  IMUInit();
 8002ab2:	f7ff fec9 	bl	8002848 <IMUInit>
//  uint32_t currentFreq;
//  uint8_t nonceRX;
  /*HAL_FLASH_Unlock();
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
	HAL_FLASH_Lock();*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002ab6:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <main+0x148>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <main+0x148>)
 8002abc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1;
 8002ac2:	4b32      	ldr	r3, [pc, #200]	@ (8002b8c <main+0x14c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a31      	ldr	r2, [pc, #196]	@ (8002b8c <main+0x14c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	@ (8002b8c <main+0x14c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // all just debug here, can be cleaned. Tomorrow write gyro class, so that switching up the gyro can be relatively easy.
  while (1)
  {
	uint32_t currentTick = HAL_GetTick();
 8002ad4:	f001 fa64 	bl	8003fa0 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]
	if(currentTick - last_tick_start > 1000)
 8002ada:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <main+0x150>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ae6:	d928      	bls.n	8002b3a <main+0xfa>
		toSend = strcat(toSend, "\n");
		CDC_Transmit_FS((uint8_t*)toSend, strlen(toSend));
		free(toSend);
		free(rateIndString);*/
		//displayInt("packetCount", packetCount);
		displayInts4("packetCount", packyCount, "timClicks", rcData[2], "phaseDoff", getPhaseDiff(), "offset", getOffset());
 8002ae8:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <main+0x144>)
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <main+0x154>)
 8002aee:	889b      	ldrh	r3, [r3, #4]
 8002af0:	461e      	mov	r6, r3
 8002af2:	f7ff fa7b 	bl	8001fec <getPhaseDiff>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461d      	mov	r5, r3
 8002afa:	f7ff f873 	bl	8001be4 <getOffset>
 8002afe:	4603      	mov	r3, r0
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <main+0x158>)
 8002b04:	9302      	str	r3, [sp, #8]
 8002b06:	9501      	str	r5, [sp, #4]
 8002b08:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <main+0x15c>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4633      	mov	r3, r6
 8002b0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <main+0x160>)
 8002b10:	4621      	mov	r1, r4
 8002b12:	4824      	ldr	r0, [pc, #144]	@ (8002ba4 <main+0x164>)
 8002b14:	f000 f8b4 	bl	8002c80 <displayInts4>
		char* test3 = malloc(10);
		test3 = strcat(test3, dataMem);
		test3 = strcat(test3,"\n");*/
		//CDC_Transmit_FS((uint8_t*)test3, strlen(test3));
		//k++;
		if(spiWorking){
 8002b18:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <main+0x168>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <main+0xea>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8002b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b24:	4821      	ldr	r0, [pc, #132]	@ (8002bac <main+0x16c>)
 8002b26:	f002 fa98 	bl	800505a <HAL_GPIO_TogglePin>
		free(data14);
		free(data15);
		free(data16);
		free(data17);*/

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8002b2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b2e:	481f      	ldr	r0, [pc, #124]	@ (8002bac <main+0x16c>)
 8002b30:	f002 fa93 	bl	800505a <HAL_GPIO_TogglePin>
		last_tick_start = currentTick;
 8002b34:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <main+0x150>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6013      	str	r3, [r2, #0]
	}
		uint16_t temp = rcData[2] - 989;
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <main+0x154>)
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	f2a3 33dd 	subw	r3, r3, #989	@ 0x3dd
 8002b42:	82fb      	strh	r3, [r7, #22]
		if(temp < 11 || temp > 2000){
 8002b44:	8afb      	ldrh	r3, [r7, #22]
 8002b46:	2b0a      	cmp	r3, #10
 8002b48:	d903      	bls.n	8002b52 <main+0x112>
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b50:	d901      	bls.n	8002b56 <main+0x116>
			temp = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	82fb      	strh	r3, [r7, #22]
		}
		//temp = 300;
		buf[0] = temp;
 8002b56:	8afb      	ldrh	r3, [r7, #22]
 8002b58:	80bb      	strh	r3, [r7, #4]
		buf[1] = temp;
 8002b5a:	8afb      	ldrh	r3, [r7, #22]
 8002b5c:	80fb      	strh	r3, [r7, #6]
		buf[2] = temp;
 8002b5e:	8afb      	ldrh	r3, [r7, #22]
 8002b60:	813b      	strh	r3, [r7, #8]
		buf[3] = temp;
 8002b62:	8afb      	ldrh	r3, [r7, #22]
 8002b64:	817b      	strh	r3, [r7, #10]
		setMotorOutputs(buf);
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fe91 	bl	8001890 <setMotorOutputs>
  {
 8002b6e:	e7b1      	b.n	8002ad4 <main+0x94>
 8002b70:	2000077c 	.word	0x2000077c
 8002b74:	20000854 	.word	0x20000854
 8002b78:	2000080c 	.word	0x2000080c
 8002b7c:	2000089c 	.word	0x2000089c
 8002b80:	40000400 	.word	0x40000400
 8002b84:	20000674 	.word	0x20000674
 8002b88:	e000edf0 	.word	0xe000edf0
 8002b8c:	e0001000 	.word	0xe0001000
 8002b90:	20000654 	.word	0x20000654
 8002b94:	20000664 	.word	0x20000664
 8002b98:	08010a94 	.word	0x08010a94
 8002b9c:	08010a9c 	.word	0x08010a9c
 8002ba0:	08010a7c 	.word	0x08010a7c
 8002ba4:	08010a88 	.word	0x08010a88
 8002ba8:	2000039c 	.word	0x2000039c
 8002bac:	40020800 	.word	0x40020800

08002bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b094      	sub	sp, #80	@ 0x50
 8002bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	2230      	movs	r2, #48	@ 0x30
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00b f852 	bl	800dc68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <SystemClock_Config+0xc8>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	4a26      	ldr	r2, [pc, #152]	@ (8002c78 <SystemClock_Config+0xc8>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <SystemClock_Config+0xc8>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <SystemClock_Config+0xcc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <SystemClock_Config+0xcc>)
 8002bfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <SystemClock_Config+0xcc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c16:	2302      	movs	r3, #2
 8002c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c20:	2308      	movs	r3, #8
 8002c22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002c24:	23c0      	movs	r3, #192	@ 0xc0
 8002c26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c28:	2304      	movs	r3, #4
 8002c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c30:	f107 0320 	add.w	r3, r7, #32
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fc93 	bl	8006560 <HAL_RCC_OscConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c40:	f000 f894 	bl	8002d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c44:	230f      	movs	r3, #15
 8002c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fef5 	bl	8006a50 <HAL_RCC_ClockConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c6c:	f000 f87e 	bl	8002d6c <Error_Handler>
  }
}
 8002c70:	bf00      	nop
 8002c72:	3750      	adds	r7, #80	@ 0x50
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40007000 	.word	0x40007000

08002c80 <displayInts4>:
	// do stuff with result
	CDC_Transmit_FS((uint8_t*)str, strlen(str));
	free(str);
}

void displayInts4(char* desc, int val, char* desc2, int val2, char* desc3, int val3, char* desc4, int val4){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	@ 0x38
 8002c84:	af08      	add	r7, sp, #32
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
	int len = snprintf(NULL, 0, "%s: %d %s: %u %s: %u %s: %d\n", desc, val, desc2, val2, desc3, val3, desc4, val4);
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	9306      	str	r3, [sp, #24]
 8002c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c94:	9305      	str	r3, [sp, #20]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	9304      	str	r3, [sp, #16]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	9303      	str	r3, [sp, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9302      	str	r3, [sp, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <displayInts4+0x94>)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f00a fecd 	bl	800da50 <sniprintf>
 8002cb6:	6178      	str	r0, [r7, #20]
	//int len2 = snprintf(NULL, 0, "%u", val2);
	char *str = malloc(len + 2);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f00a f8ef 	bl	800cea0 <malloc>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]
	snprintf(str, len + 2, "%s: %d %s: %u %s: %u %s: %d\n", desc, val, desc2, val2, desc3, val3, desc4, val4);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3302      	adds	r3, #2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	9306      	str	r3, [sp, #24]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	9305      	str	r3, [sp, #20]
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	9302      	str	r3, [sp, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <displayInts4+0x94>)
 8002cec:	6938      	ldr	r0, [r7, #16]
 8002cee:	f00a feaf 	bl	800da50 <sniprintf>
	// do stuff with result
	CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8002cf2:	6938      	ldr	r0, [r7, #16]
 8002cf4:	f7fd fac4 	bl	8000280 <strlen>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6938      	ldr	r0, [r7, #16]
 8002d00:	f009 fc7c 	bl	800c5fc <CDC_Transmit_FS>
	free(str);
 8002d04:	6938      	ldr	r0, [r7, #16]
 8002d06:	f00a f8d3 	bl	800ceb0 <free>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	08010adc 	.word	0x08010adc

08002d18 <micros>:

uint32_t micros(){
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	return (DWT->CYCCNT/48);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <micros+0x1c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <micros+0x20>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	095b      	lsrs	r3, r3, #5
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e0001000 	.word	0xe0001000
 8002d38:	aaaaaaab 	.word	0xaaaaaaab

08002d3c <getDeltaTime>:

uint32_t getDeltaTime(uint32_t greater, uint32_t lesser){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	if(greater < lesser){
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d203      	bcs.n	8002d56 <getDeltaTime+0x1a>
		greater += (0xFFFFFFFF/48);
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <getDeltaTime+0x2c>)
 8002d52:	4413      	add	r3, r2
 8002d54:	607b      	str	r3, [r7, #4]
	}
	return greater - lesser;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	05555555 	.word	0x05555555

08002d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d70:	b672      	cpsid	i
}
 8002d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <Error_Handler+0x8>

08002d78 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d7e:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <MX_SPI1_Init+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d8a:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dca:	f004 f839 	bl	8006e40 <HAL_SPI_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002dd4:	f7ff ffca 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000680 	.word	0x20000680
 8002de0:	40013000 	.word	0x40013000

08002de4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <MX_SPI3_Init+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002df4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e14:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e18:	2210      	movs	r2, #16
 8002e1a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e30:	220a      	movs	r2, #10
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_SPI3_Init+0x64>)
 8002e36:	f004 f803 	bl	8006e40 <HAL_SPI_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002e40:	f7ff ff94 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200006d8 	.word	0x200006d8
 8002e4c:	40003c00 	.word	0x40003c00

08002e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <HAL_SPI_MspInit+0xe8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d12c      	bne.n	8002ecc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a29      	ldr	r2, [pc, #164]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002eaa:	23e0      	movs	r3, #224	@ 0xe0
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eba:	2305      	movs	r3, #5
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481e      	ldr	r0, [pc, #120]	@ (8002f40 <HAL_SPI_MspInit+0xf0>)
 8002ec6:	f001 ff2b 	bl	8004d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002eca:	e030      	b.n	8002f2e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_SPI_MspInit+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12b      	bne.n	8002f2e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <HAL_SPI_MspInit+0xec>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f0e:	2338      	movs	r3, #56	@ 0x38
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f1e:	2306      	movs	r3, #6
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	4807      	ldr	r0, [pc, #28]	@ (8002f48 <HAL_SPI_MspInit+0xf8>)
 8002f2a:	f001 fef9 	bl	8004d20 <HAL_GPIO_Init>
}
 8002f2e:	bf00      	nop
 8002f30:	3730      	adds	r7, #48	@ 0x30
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40013000 	.word	0x40013000
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40003c00 	.word	0x40003c00
 8002f48:	40020400 	.word	0x40020400

08002f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_MspInit+0x4c>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff2:	f000 ffc1 	bl	8003f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BIND_Pin);
 8002ffe:	2004      	movs	r0, #4
 8003000:	f002 f846 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}

08003008 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <DMA1_Stream1_IRQHandler+0x10>)
 800300e:	f001 fa0f 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000944 	.word	0x20000944

0800301c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8003020:	4802      	ldr	r0, [pc, #8]	@ (800302c <DMA1_Stream3_IRQHandler+0x10>)
 8003022:	f001 fa05 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200009a4 	.word	0x200009a4

08003030 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <DMA1_Stream5_IRQHandler+0x10>)
 8003036:	f001 f9fb 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200008e4 	.word	0x200008e4

08003044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_EXTI_Pin);
 8003048:	2040      	movs	r0, #64	@ 0x40
 800304a:	f002 f821 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003058:	4802      	ldr	r0, [pc, #8]	@ (8003064 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800305a:	f005 f829 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000854 	.word	0x20000854

08003068 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800306e:	f005 f81f 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000089c 	.word	0x2000089c

0800307c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_EXTI_Pin);
 8003080:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003084:	f002 f804 	bl	8005090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <DMA1_Stream7_IRQHandler+0x10>)
 8003092:	f001 f9cd 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000a04 	.word	0x20000a04

080030a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <TIM5_IRQHandler+0x10>)
 80030a6:	f005 f803 	bl	80080b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000080c 	.word	0x2000080c

080030b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <OTG_FS_IRQHandler+0x10>)
 80030ba:	f002 f945 	bl	8005348 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20001f68 	.word	0x20001f68

080030c8 <initSX1280>:
#include "sx1280.h"
#include "expresslrs.h"
#include "string.h"
#include "usbd_cdc_if.h"

void initSX1280(){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af02      	add	r7, sp, #8
	setRFRate(LORA_SF_8, LORA_BW_800, LORA_CR_LI_4_8, 12, fhssGetInitialFreq(), 1);
 80030ce:	f7ff f8f1 	bl	80022b4 <fhssGetInitialFreq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2201      	movs	r2, #1
 80030d6:	9201      	str	r2, [sp, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	230c      	movs	r3, #12
 80030dc:	2207      	movs	r2, #7
 80030de:	2118      	movs	r1, #24
 80030e0:	2080      	movs	r0, #128	@ 0x80
 80030e2:	f000 f803 	bl	80030ec <setRFRate>
	configureInterrupts();
	HAL_Delay(1);

	setRXModeNoTimeout();
	HAL_Delay(1);*/
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <setRFRate>:


//TODO: interrupt clear
void setRFRate(uint8_t sF, uint8_t bW, uint8_t cR, uint8_t preambleLen, uint32_t freqReg, uint8_t isInverted){
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	4604      	mov	r4, r0
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	4603      	mov	r3, r0
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	460b      	mov	r3, r1
 8003104:	717b      	strb	r3, [r7, #5]
 8003106:	4613      	mov	r3, r2
 8003108:	713b      	strb	r3, [r7, #4]
	//setStandby();
	setHighPower();
 800310a:	f000 f951 	bl	80033b0 <setHighPower>
	//HAL_Delay(1);
	setStandby();
 800310e:	f000 f8c0 	bl	8003292 <setStandby>
	//HAL_Delay(1);
	setPacketTypeLORA();
 8003112:	f000 f8cc 	bl	80032ae <setPacketTypeLORA>
	writeRFFrequency(freqReg);
 8003116:	69b8      	ldr	r0, [r7, #24]
 8003118:	f000 f8d8 	bl	80032cc <writeRFFrequency>
	setLORAModParameters(sF, bW, cR);
 800311c:	797a      	ldrb	r2, [r7, #5]
 800311e:	79b9      	ldrb	r1, [r7, #6]
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f86a 	bl	80031fc <setLORAModParameters>
	if(isInverted){
 8003128:	7f3b      	ldrb	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <setRFRate+0x54>
		setLORAPacketParameters(preambleLen, LORA_HEADER_IMPLICIT, 0x08, LORA_CRC_DISABLE, LORA_IQ_INVERTED);
 800312e:	7938      	ldrb	r0, [r7, #4]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	2208      	movs	r2, #8
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	f000 f835 	bl	80031a8 <setLORAPacketParameters>
 800313e:	e007      	b.n	8003150 <setRFRate+0x64>
	}else{
		setLORAPacketParameters(preambleLen, LORA_HEADER_IMPLICIT, 0x08, LORA_CRC_DISABLE, LORA_IQ_STD);
 8003140:	7938      	ldrb	r0, [r7, #4]
 8003142:	2340      	movs	r3, #64	@ 0x40
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	2208      	movs	r2, #8
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	f000 f82c 	bl	80031a8 <setLORAPacketParameters>
	}
	configureInterrupts();
 8003150:	f000 f816 	bl	8003180 <configureInterrupts>
	setRXModeNoTimeout();
 8003154:	f000 f804 	bl	8003160 <setRXModeNoTimeout>
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}

08003160 <setRXModeNoTimeout>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
	return status_buf[0];
}

// sets RX Mode without any timeout, continuous listening
void setRXModeNoTimeout(){
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
	uint8_t set_rx_mode_buff[4] = {SX1280_SET_RX_MODE, 0x00, 0xFF, 0xFF};
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <setRXModeNoTimeout+0x1c>)
 8003168:	607b      	str	r3, [r7, #4]
	sendSPIBuffer(set_rx_mode_buff, 4);
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2104      	movs	r1, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f930 	bl	80033d4 <sendSPIBuffer>
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	ffff0082 	.word	0xffff0082

08003180 <configureInterrupts>:

// boof, i just send RX done interrupts to all DIO pins because I cannot be bothered to test which DIO Pin is actually wired to the interrupt
void configureInterrupts(){
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
	// interrupt mask is 0x0002, as the rxdone interrupt is on the second bit of the mask, explained in the data sheet
	// TODO: make this method not constant for other expresslrs necessities, but atm this script is just for the receiver.
	uint8_t irq_configure_buf[9] = {SX1280_SET_DIO_IRQ_PARAMS, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02};
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <configureInterrupts+0x24>)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	ca07      	ldmia	r2, {r0, r1, r2}
 800318c:	c303      	stmia	r3!, {r0, r1}
 800318e:	701a      	strb	r2, [r3, #0]
	sendSPIBuffer(irq_configure_buf, 9);
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	2109      	movs	r1, #9
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f91d 	bl	80033d4 <sendSPIBuffer>
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	08010afc 	.word	0x08010afc

080031a8 <setLORAPacketParameters>:

void setLORAPacketParameters(uint8_t preambleLen, uint8_t headerType, uint8_t payloadLen, uint8_t crcEnabled, uint8_t invertIQ){
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	4603      	mov	r3, r0
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	717b      	strb	r3, [r7, #5]
 80031c2:	4613      	mov	r3, r2
 80031c4:	713b      	strb	r3, [r7, #4]
	uint8_t write_packet_params_buff[8] = {SX1280_SET_PACKET_PARAMS, preambleLen, headerType, payloadLen, crcEnabled, invertIQ, 0x00, 0x00};
 80031c6:	238c      	movs	r3, #140	@ 0x8c
 80031c8:	723b      	strb	r3, [r7, #8]
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	727b      	strb	r3, [r7, #9]
 80031ce:	79bb      	ldrb	r3, [r7, #6]
 80031d0:	72bb      	strb	r3, [r7, #10]
 80031d2:	797b      	ldrb	r3, [r7, #5]
 80031d4:	72fb      	strb	r3, [r7, #11]
 80031d6:	793b      	ldrb	r3, [r7, #4]
 80031d8:	733b      	strb	r3, [r7, #12]
 80031da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031de:	737b      	strb	r3, [r7, #13]
 80031e0:	2300      	movs	r3, #0
 80031e2:	73bb      	strb	r3, [r7, #14]
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
	sendSPIBuffer(write_packet_params_buff, 8);
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	2108      	movs	r1, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f8f0 	bl	80033d4 <sendSPIBuffer>
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}

080031fc <setLORAModParameters>:

void setLORAModParameters(uint8_t sF, uint8_t bW, uint8_t cR){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
 8003206:	460b      	mov	r3, r1
 8003208:	71bb      	strb	r3, [r7, #6]
 800320a:	4613      	mov	r3, r2
 800320c:	717b      	strb	r3, [r7, #5]
	uint8_t lora_mod_params_buff[4] = {SX1280_SET_MODULATION_PARAMS, sF, bW, cR};
 800320e:	238b      	movs	r3, #139	@ 0x8b
 8003210:	723b      	strb	r3, [r7, #8]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	727b      	strb	r3, [r7, #9]
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	72bb      	strb	r3, [r7, #10]
 800321a:	797b      	ldrb	r3, [r7, #5]
 800321c:	72fb      	strb	r3, [r7, #11]
	sendSPIBuffer(lora_mod_params_buff, 4);
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	2104      	movs	r1, #4
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f8d5 	bl	80033d4 <sendSPIBuffer>
	//HAL_Delay(1);
	uint8_t sFCorrection = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]

	if(sF == LORA_SF_5 || sF == LORA_SF_6){
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b50      	cmp	r3, #80	@ 0x50
 8003232:	d002      	beq.n	800323a <setLORAModParameters+0x3e>
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	2b60      	cmp	r3, #96	@ 0x60
 8003238:	d102      	bne.n	8003240 <setLORAModParameters+0x44>
		sFCorrection = 0x1E;
 800323a:	231e      	movs	r3, #30
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e00a      	b.n	8003256 <setLORAModParameters+0x5a>
	}else if(sF == LORA_SF_7 || sF == LORA_SF_8){
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2b70      	cmp	r3, #112	@ 0x70
 8003244:	d002      	beq.n	800324c <setLORAModParameters+0x50>
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b80      	cmp	r3, #128	@ 0x80
 800324a:	d102      	bne.n	8003252 <setLORAModParameters+0x56>
		sFCorrection = 0x37;
 800324c:	2337      	movs	r3, #55	@ 0x37
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e001      	b.n	8003256 <setLORAModParameters+0x5a>
	}else{
		sFCorrection = 0x32;
 8003252:	2332      	movs	r3, #50	@ 0x32
 8003254:	73fb      	strb	r3, [r7, #15]
	}
	writeRegister(0x0925, sFCorrection);
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	4619      	mov	r1, r3
 800325a:	f640 1025 	movw	r0, #2341	@ 0x925
 800325e:	f000 f850 	bl	8003302 <writeRegister>
	//HAL_Delay(1);

	uint8_t freq_comp = readRegister(0x093c);
 8003262:	f640 103c 	movw	r0, #2364	@ 0x93c
 8003266:	f000 f86b 	bl	8003340 <readRegister>
 800326a:	4603      	mov	r3, r0
 800326c:	73bb      	strb	r3, [r7, #14]
	freq_comp = freq_comp & 0b11111000;
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	73bb      	strb	r3, [r7, #14]
	freq_comp = freq_comp | 0x01;
 8003276:	7bbb      	ldrb	r3, [r7, #14]
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	73bb      	strb	r3, [r7, #14]

	writeRegister(0x093c, freq_comp);
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	4619      	mov	r1, r3
 8003282:	f640 103c 	movw	r0, #2364	@ 0x93c
 8003286:	f000 f83c 	bl	8003302 <writeRegister>

}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <setStandby>:

void setStandby(){
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
	uint8_t standby_set_buff[2] = {SX1280_SET_STANDBY, 0x00};
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	80bb      	strh	r3, [r7, #4]
	sendSPIBuffer(standby_set_buff, 2);
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f897 	bl	80033d4 <sendSPIBuffer>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <setPacketTypeLORA>:

// could be modular but I don't care.
void setPacketTypeLORA(){
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
	uint8_t packet_type_buff[2] = {SX1280_SET_PACKET_TYPE, 0x01};
 80032b4:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 80032b8:	80bb      	strh	r3, [r7, #4]
	sendSPIBuffer(packet_type_buff, 2);
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2102      	movs	r1, #2
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f888 	bl	80033d4 <sendSPIBuffer>
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <writeRFFrequency>:
        }
    }
    return 1;
}

void writeRFFrequency(uint32_t freqReg){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	uint8_t buf[4] = {SX1280_RADIO_SET_RFFREQUENCY};
 80032d4:	2386      	movs	r3, #134	@ 0x86
 80032d6:	60fb      	str	r3, [r7, #12]
	//uint8_t buf[4] = {0x86, 0xB8, 0xA5, 0x6A};
	buf[1] = (uint8_t)((freqReg >> 16) & 0xFF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t)((freqReg >> 8) & 0xFF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	73bb      	strb	r3, [r7, #14]
	buf[3] = (uint8_t)((freqReg) & 0xFF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	73fb      	strb	r3, [r7, #15]

	sendSPIBuffer(buf, 4);
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	2104      	movs	r1, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f86d 	bl	80033d4 <sendSPIBuffer>
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <writeRegister>:

void writeRegister(uint16_t reg, uint8_t data){
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	460a      	mov	r2, r1
 800330c:	80fb      	strh	r3, [r7, #6]
 800330e:	4613      	mov	r3, r2
 8003310:	717b      	strb	r3, [r7, #5]
	uint8_t buf[4] = {SX1280_WRITE_REGISTER};
 8003312:	2318      	movs	r3, #24
 8003314:	60fb      	str	r3, [r7, #12]
	buf[1] = (uint8_t)((reg >> 8) & 0xFF);
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	b29b      	uxth	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t)((reg) & 0xFF);
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	73bb      	strb	r3, [r7, #14]
	buf[3] = data;
 8003326:	797b      	ldrb	r3, [r7, #5]
 8003328:	73fb      	strb	r3, [r7, #15]

	sendSPIBuffer(buf, 4);
 800332a:	f107 030c 	add.w	r3, r7, #12
 800332e:	2104      	movs	r1, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f84f 	bl	80033d4 <sendSPIBuffer>
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <readRegister>:

// I hope I'm doing this right.
uint8_t readRegister(uint16_t reg){
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
	uint8_t read_buf[5] = {0x00};
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	2300      	movs	r3, #0
 8003350:	753b      	strb	r3, [r7, #20]
	uint8_t buf[5] = {SX1280_READ_REGISTER};
 8003352:	2319      	movs	r3, #25
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	2300      	movs	r3, #0
 8003358:	733b      	strb	r3, [r7, #12]

	buf[1] = (uint8_t)((reg >> 8) & 0xFF);
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	b29b      	uxth	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t)((reg) & 0xFF);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	72bb      	strb	r3, [r7, #10]

	HAL_GPIO_WritePin(CS_GPIO_Port_SX1280, CS_Pin_SX1280, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003370:	480d      	ldr	r0, [pc, #52]	@ (80033a8 <readRegister+0x68>)
 8003372:	f001 fe59 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_sx1280, buf, 5, 10);
 8003376:	f107 0108 	add.w	r1, r7, #8
 800337a:	230a      	movs	r3, #10
 800337c:	2205      	movs	r2, #5
 800337e:	480b      	ldr	r0, [pc, #44]	@ (80033ac <readRegister+0x6c>)
 8003380:	f003 fde7 	bl	8006f52 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_sx1280, read_buf, 5, 10);
 8003384:	f107 0110 	add.w	r1, r7, #16
 8003388:	230a      	movs	r3, #10
 800338a:	2205      	movs	r2, #5
 800338c:	4807      	ldr	r0, [pc, #28]	@ (80033ac <readRegister+0x6c>)
 800338e:	f003 ff23 	bl	80071d8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_GPIO_Port_SX1280, CS_Pin_SX1280, GPIO_PIN_SET);
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003398:	4803      	ldr	r0, [pc, #12]	@ (80033a8 <readRegister+0x68>)
 800339a:	f001 fe45 	bl	8005028 <HAL_GPIO_WritePin>

	return read_buf[4];
 800339e:	7d3b      	ldrb	r3, [r7, #20]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40020000 	.word	0x40020000
 80033ac:	200006d8 	.word	0x200006d8

080033b0 <setHighPower>:

void setHighPower(){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	writeRegister(0x0891, (readRegister(0x0891) | 0xC0));
 80033b4:	f640 0091 	movw	r0, #2193	@ 0x891
 80033b8:	f7ff ffc2 	bl	8003340 <readRegister>
 80033bc:	4603      	mov	r3, r0
 80033be:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	f640 0091 	movw	r0, #2193	@ 0x891
 80033ca:	f7ff ff9a 	bl	8003302 <writeRegister>
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <sendSPIBuffer>:

//TODO: better delays
void sendSPIBuffer(uint8_t* buf, uint8_t size){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(CS_GPIO_Port_SX1280, CS_Pin_SX1280, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033e6:	480a      	ldr	r0, [pc, #40]	@ (8003410 <sendSPIBuffer+0x3c>)
 80033e8:	f001 fe1e 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_sx1280, buf, size, 10);
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	230a      	movs	r3, #10
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4807      	ldr	r0, [pc, #28]	@ (8003414 <sendSPIBuffer+0x40>)
 80033f6:	f003 fdac 	bl	8006f52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port_SX1280, CS_Pin_SX1280, GPIO_PIN_SET);
 80033fa:	2201      	movs	r2, #1
 80033fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003400:	4803      	ldr	r0, [pc, #12]	@ (8003410 <sendSPIBuffer+0x3c>)
 8003402:	f001 fe11 	bl	8005028 <HAL_GPIO_WritePin>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40020000 	.word	0x40020000
 8003414:	200006d8 	.word	0x200006d8

08003418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return 1;
 800341c:	2301      	movs	r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_kill>:

int _kill(int pid, int sig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003432:	f00a fc7b 	bl	800dd2c <__errno>
 8003436:	4603      	mov	r3, r0
 8003438:	2216      	movs	r2, #22
 800343a:	601a      	str	r2, [r3, #0]
  return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_exit>:

void _exit (int status)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ffe7 	bl	8003428 <_kill>
  while (1) {}    /* Make sure we hang here */
 800345a:	bf00      	nop
 800345c:	e7fd      	b.n	800345a <_exit+0x12>

0800345e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e00a      	b.n	8003486 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003470:	f3af 8000 	nop.w
 8003474:	4601      	mov	r1, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	60ba      	str	r2, [r7, #8]
 800347c:	b2ca      	uxtb	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	dbf0      	blt.n	8003470 <_read+0x12>
  }

  return len;
 800348e:	687b      	ldr	r3, [r7, #4]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e009      	b.n	80034be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	60ba      	str	r2, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3301      	adds	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	dbf1      	blt.n	80034aa <_write+0x12>
  }
  return len;
 80034c6:	687b      	ldr	r3, [r7, #4]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_close>:

int _close(int file)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034f8:	605a      	str	r2, [r3, #4]
  return 0;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_isatty>:

int _isatty(int file)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003510:	2301      	movs	r3, #1
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <_sbrk+0x5c>)
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <_sbrk+0x60>)
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800354c:	4b13      	ldr	r3, [pc, #76]	@ (800359c <_sbrk+0x64>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <_sbrk+0x64>)
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <_sbrk+0x68>)
 8003558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <_sbrk+0x64>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	d207      	bcs.n	8003578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003568:	f00a fbe0 	bl	800dd2c <__errno>
 800356c:	4603      	mov	r3, r0
 800356e:	220c      	movs	r2, #12
 8003570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
 8003576:	e009      	b.n	800358c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <_sbrk+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <_sbrk+0x64>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	4a05      	ldr	r2, [pc, #20]	@ (800359c <_sbrk+0x64>)
 8003588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20020000 	.word	0x20020000
 8003598:	00000400 	.word	0x00000400
 800359c:	20000730 	.word	0x20000730
 80035a0:	200027b8 	.word	0x200027b8

080035a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a8:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <SystemInit+0x20>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	4a05      	ldr	r2, [pc, #20]	@ (80035c4 <SystemInit+0x20>)
 80035b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim4_ch2;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	@ 0x38
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035dc:	f107 0320 	add.w	r3, r7, #32
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
 80035f4:	615a      	str	r2, [r3, #20]
 80035f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035f8:	4b32      	ldr	r3, [pc, #200]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 80035fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 8003602:	2203      	movs	r2, #3
 8003604:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b2f      	ldr	r3, [pc, #188]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 800360c:	4b2d      	ldr	r3, [pc, #180]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 800360e:	2213      	movs	r2, #19
 8003610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003612:	4b2c      	ldr	r3, [pc, #176]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003618:	4b2a      	ldr	r3, [pc, #168]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 800361a:	2280      	movs	r2, #128	@ 0x80
 800361c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800361e:	4829      	ldr	r0, [pc, #164]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 8003620:	f004 f9e4 	bl	80079ec <HAL_TIM_Base_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800362a:	f7ff fb9f 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003638:	4619      	mov	r1, r3
 800363a:	4822      	ldr	r0, [pc, #136]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 800363c:	f004 feea 	bl	8008414 <HAL_TIM_ConfigClockSource>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003646:	f7ff fb91 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800364a:	481e      	ldr	r0, [pc, #120]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 800364c:	f004 fa80 	bl	8007b50 <HAL_TIM_PWM_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003656:	f7ff fb89 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003662:	f107 0320 	add.w	r3, r7, #32
 8003666:	4619      	mov	r1, r3
 8003668:	4816      	ldr	r0, [pc, #88]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 800366a:	f005 fb7f 	bl	8008d6c <HAL_TIMEx_MasterConfigSynchronization>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003674:	f7ff fb7a 	bl	8002d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003678:	2360      	movs	r3, #96	@ 0x60
 800367a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	2200      	movs	r2, #0
 800368c:	4619      	mov	r1, r3
 800368e:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 8003690:	f004 fdfe 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800369a:	f7ff fb67 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2208      	movs	r2, #8
 80036a2:	4619      	mov	r1, r3
 80036a4:	4807      	ldr	r0, [pc, #28]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 80036a6:	f004 fdf3 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80036b0:	f7ff fb5c 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036b4:	4803      	ldr	r0, [pc, #12]	@ (80036c4 <MX_TIM2_Init+0xfc>)
 80036b6:	f000 fb3d 	bl	8003d34 <HAL_TIM_MspPostInit>

}
 80036ba:	bf00      	nop
 80036bc:	3738      	adds	r7, #56	@ 0x38
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000734 	.word	0x20000734

080036c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ce:	f107 0320 	add.w	r3, r7, #32
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	615a      	str	r2, [r3, #20]
 80036e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036ea:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <MX_TIM3_Init+0xa8>)
 80036ec:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <MX_TIM3_Init+0xac>)
 80036ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80036f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <MX_TIM3_Init+0xa8>)
 80036f2:	222f      	movs	r2, #47	@ 0x2f
 80036f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <MX_TIM3_Init+0xa8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80036fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <MX_TIM3_Init+0xa8>)
 80036fe:	2264      	movs	r2, #100	@ 0x64
 8003700:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <MX_TIM3_Init+0xa8>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <MX_TIM3_Init+0xa8>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800370e:	4818      	ldr	r0, [pc, #96]	@ (8003770 <MX_TIM3_Init+0xa8>)
 8003710:	f004 fa1e 	bl	8007b50 <HAL_TIM_PWM_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800371a:	f7ff fb27 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003726:	f107 0320 	add.w	r3, r7, #32
 800372a:	4619      	mov	r1, r3
 800372c:	4810      	ldr	r0, [pc, #64]	@ (8003770 <MX_TIM3_Init+0xa8>)
 800372e:	f005 fb1d 	bl	8008d6c <HAL_TIMEx_MasterConfigSynchronization>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003738:	f7ff fb18 	bl	8002d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800373c:	2360      	movs	r3, #96	@ 0x60
 800373e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	220c      	movs	r2, #12
 8003750:	4619      	mov	r1, r3
 8003752:	4807      	ldr	r0, [pc, #28]	@ (8003770 <MX_TIM3_Init+0xa8>)
 8003754:	f004 fd9c 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800375e:	f7ff fb05 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003762:	4803      	ldr	r0, [pc, #12]	@ (8003770 <MX_TIM3_Init+0xa8>)
 8003764:	f000 fae6 	bl	8003d34 <HAL_TIM_MspPostInit>

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000077c 	.word	0x2000077c
 8003774:	40000400 	.word	0x40000400

08003778 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800377e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	615a      	str	r2, [r3, #20]
 80037a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037a8:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037aa:	4a32      	ldr	r2, [pc, #200]	@ (8003874 <MX_TIM4_Init+0xfc>)
 80037ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037b0:	2203      	movs	r2, #3
 80037b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20-1;
 80037ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037bc:	2213      	movs	r2, #19
 80037be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037cc:	4828      	ldr	r0, [pc, #160]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037ce:	f004 f90d 	bl	80079ec <HAL_TIM_Base_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80037d8:	f7ff fac8 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037e6:	4619      	mov	r1, r3
 80037e8:	4821      	ldr	r0, [pc, #132]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037ea:	f004 fe13 	bl	8008414 <HAL_TIM_ConfigClockSource>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80037f4:	f7ff faba 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80037f8:	481d      	ldr	r0, [pc, #116]	@ (8003870 <MX_TIM4_Init+0xf8>)
 80037fa:	f004 f9a9 	bl	8007b50 <HAL_TIM_PWM_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003804:	f7ff fab2 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003810:	f107 0320 	add.w	r3, r7, #32
 8003814:	4619      	mov	r1, r3
 8003816:	4816      	ldr	r0, [pc, #88]	@ (8003870 <MX_TIM4_Init+0xf8>)
 8003818:	f005 faa8 	bl	8008d6c <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8003822:	f7ff faa3 	bl	8002d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003826:	2360      	movs	r3, #96	@ 0x60
 8003828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2204      	movs	r2, #4
 800383a:	4619      	mov	r1, r3
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <MX_TIM4_Init+0xf8>)
 800383e:	f004 fd27 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003848:	f7ff fa90 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2208      	movs	r2, #8
 8003850:	4619      	mov	r1, r3
 8003852:	4807      	ldr	r0, [pc, #28]	@ (8003870 <MX_TIM4_Init+0xf8>)
 8003854:	f004 fd1c 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800385e:	f7ff fa85 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003862:	4803      	ldr	r0, [pc, #12]	@ (8003870 <MX_TIM4_Init+0xf8>)
 8003864:	f000 fa66 	bl	8003d34 <HAL_TIM_MspPostInit>

}
 8003868:	bf00      	nop
 800386a:	3738      	adds	r7, #56	@ 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	200007c4 	.word	0x200007c4
 8003874:	40000800 	.word	0x40000800

08003878 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388c:	463b      	mov	r3, r7
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <MX_TIM5_Init+0x94>)
 8003896:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <MX_TIM5_Init+0x98>)
 8003898:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 23999;
 800389a:	4b1c      	ldr	r3, [pc, #112]	@ (800390c <MX_TIM5_Init+0x94>)
 800389c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80038a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <MX_TIM5_Init+0x94>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 80038a8:	4b18      	ldr	r3, [pc, #96]	@ (800390c <MX_TIM5_Init+0x94>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ae:	4b17      	ldr	r3, [pc, #92]	@ (800390c <MX_TIM5_Init+0x94>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <MX_TIM5_Init+0x94>)
 80038b6:	2280      	movs	r2, #128	@ 0x80
 80038b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038ba:	4814      	ldr	r0, [pc, #80]	@ (800390c <MX_TIM5_Init+0x94>)
 80038bc:	f004 f896 	bl	80079ec <HAL_TIM_Base_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80038c6:	f7ff fa51 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4619      	mov	r1, r3
 80038d6:	480d      	ldr	r0, [pc, #52]	@ (800390c <MX_TIM5_Init+0x94>)
 80038d8:	f004 fd9c 	bl	8008414 <HAL_TIM_ConfigClockSource>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80038e2:	f7ff fa43 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038e6:	2320      	movs	r3, #32
 80038e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038ee:	463b      	mov	r3, r7
 80038f0:	4619      	mov	r1, r3
 80038f2:	4806      	ldr	r0, [pc, #24]	@ (800390c <MX_TIM5_Init+0x94>)
 80038f4:	f005 fa3a 	bl	8008d6c <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80038fe:	f7ff fa35 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000080c 	.word	0x2000080c
 8003910:	40000c00 	.word	0x40000c00

08003914 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	463b      	mov	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
  // THIS PRESCALER WAS OBTAINED THROUGH TRIAL AND ERROR
  // prescaler = 195
  // period = 1
  // why i dont know.
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003926:	4b16      	ldr	r3, [pc, #88]	@ (8003980 <MX_TIM9_Init+0x6c>)
 8003928:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <MX_TIM9_Init+0x70>)
 800392a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 47;
 800392c:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <MX_TIM9_Init+0x6c>)
 800392e:	222f      	movs	r2, #47	@ 0x2f
 8003930:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003932:	4b13      	ldr	r3, [pc, #76]	@ (8003980 <MX_TIM9_Init+0x6c>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 6665;
 8003938:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <MX_TIM9_Init+0x6c>)
 800393a:	f641 2209 	movw	r2, #6665	@ 0x1a09
 800393e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <MX_TIM9_Init+0x6c>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <MX_TIM9_Init+0x6c>)
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800394c:	480c      	ldr	r0, [pc, #48]	@ (8003980 <MX_TIM9_Init+0x6c>)
 800394e:	f004 f84d 	bl	80079ec <HAL_TIM_Base_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003958:	f7ff fa08 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800395c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003960:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003962:	463b      	mov	r3, r7
 8003964:	4619      	mov	r1, r3
 8003966:	4806      	ldr	r0, [pc, #24]	@ (8003980 <MX_TIM9_Init+0x6c>)
 8003968:	f004 fd54 	bl	8008414 <HAL_TIM_ConfigClockSource>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003972:	f7ff f9fb 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000854 	.word	0x20000854
 8003984:	40014000 	.word	0x40014000

08003988 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800398c:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <MX_TIM10_Init+0x40>)
 800398e:	4a0f      	ldr	r2, [pc, #60]	@ (80039cc <MX_TIM10_Init+0x44>)
 8003990:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 189;
 8003992:	4b0d      	ldr	r3, [pc, #52]	@ (80039c8 <MX_TIM10_Init+0x40>)
 8003994:	22bd      	movs	r2, #189	@ 0xbd
 8003996:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <MX_TIM10_Init+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 6665;
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <MX_TIM10_Init+0x40>)
 80039a0:	f641 2209 	movw	r2, #6665	@ 0x1a09
 80039a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <MX_TIM10_Init+0x40>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039ac:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <MX_TIM10_Init+0x40>)
 80039ae:	2280      	movs	r2, #128	@ 0x80
 80039b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80039b2:	4805      	ldr	r0, [pc, #20]	@ (80039c8 <MX_TIM10_Init+0x40>)
 80039b4:	f004 f81a 	bl	80079ec <HAL_TIM_Base_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80039be:	f7ff f9d5 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000089c 	.word	0x2000089c
 80039cc:	40014400 	.word	0x40014400

080039d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e0:	f040 8089 	bne.w	8003af6 <HAL_TIM_Base_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	4b95      	ldr	r3, [pc, #596]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	4a94      	ldr	r2, [pc, #592]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f4:	4b92      	ldr	r3, [pc, #584]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8003a00:	4b90      	ldr	r3, [pc, #576]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a02:	4a91      	ldr	r2, [pc, #580]	@ (8003c48 <HAL_TIM_Base_MspInit+0x278>)
 8003a04:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003a06:	4b8f      	ldr	r3, [pc, #572]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a08:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003a0c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a14:	4b8b      	ldr	r3, [pc, #556]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a20:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a22:	4b88      	ldr	r3, [pc, #544]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a28:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a2a:	4b86      	ldr	r3, [pc, #536]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a30:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003a32:	4b84      	ldr	r3, [pc, #528]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a38:	4b82      	ldr	r3, [pc, #520]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a3e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a40:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a42:	2204      	movs	r2, #4
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003a46:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8003a4c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003a52:	4b7c      	ldr	r3, [pc, #496]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003a58:	487a      	ldr	r0, [pc, #488]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a5a:	f000 fbe3 	bl	8004224 <HAL_DMA_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_TIM_Base_MspInit+0x98>
    {
      Error_Handler();
 8003a64:	f7ff f982 	bl	8002d6c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a76      	ldr	r2, [pc, #472]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a6e:	4a75      	ldr	r2, [pc, #468]	@ (8003c44 <HAL_TIM_Base_MspInit+0x274>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8003a74:	4b75      	ldr	r3, [pc, #468]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a76:	4a76      	ldr	r2, [pc, #472]	@ (8003c50 <HAL_TIM_Base_MspInit+0x280>)
 8003a78:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8003a7a:	4b74      	ldr	r3, [pc, #464]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a7c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003a80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a82:	4b72      	ldr	r3, [pc, #456]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a84:	2240      	movs	r2, #64	@ 0x40
 8003a86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a88:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a96:	4b6d      	ldr	r3, [pc, #436]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003aa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aa4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8003aa6:	4b69      	ldr	r3, [pc, #420]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8003aac:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003aae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ab2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ab4:	4b65      	ldr	r3, [pc, #404]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003aba:	4b64      	ldr	r3, [pc, #400]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8003ac0:	4b62      	ldr	r3, [pc, #392]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003ac6:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8003acc:	485f      	ldr	r0, [pc, #380]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ace:	f000 fba9 	bl	8004224 <HAL_DMA_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Base_MspInit+0x10c>
    {
      Error_Handler();
 8003ad8:	f7ff f948 	bl	8002d6c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ae2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a58      	ldr	r2, [pc, #352]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003aec:	621a      	str	r2, [r3, #32]
 8003aee:	4a57      	ldr	r2, [pc, #348]	@ (8003c4c <HAL_TIM_Base_MspInit+0x27c>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003af4:	e0f1      	b.n	8003cda <HAL_TIM_Base_MspInit+0x30a>
  else if(tim_baseHandle->Instance==TIM4)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a56      	ldr	r2, [pc, #344]	@ (8003c54 <HAL_TIM_Base_MspInit+0x284>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	f040 8083 	bne.w	8003c08 <HAL_TIM_Base_MspInit+0x238>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	4b4e      	ldr	r3, [pc, #312]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b12:	4b4b      	ldr	r3, [pc, #300]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b20:	4a4e      	ldr	r2, [pc, #312]	@ (8003c5c <HAL_TIM_Base_MspInit+0x28c>)
 8003b22:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8003b24:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b26:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b2a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b2e:	2240      	movs	r2, #64	@ 0x40
 8003b30:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b32:	4b49      	ldr	r3, [pc, #292]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003b38:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b3e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b40:	4b45      	ldr	r3, [pc, #276]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b46:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b48:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b4e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8003b50:	4b41      	ldr	r3, [pc, #260]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8003b56:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b5c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b60:	2204      	movs	r2, #4
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim4_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003b64:	4b3c      	ldr	r3, [pc, #240]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim4_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim4_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b70:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8003b76:	4838      	ldr	r0, [pc, #224]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b78:	f000 fb54 	bl	8004224 <HAL_DMA_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_TIM_Base_MspInit+0x1b6>
      Error_Handler();
 8003b82:	f7ff f8f3 	bl	8002d6c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a33      	ldr	r2, [pc, #204]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8c:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <HAL_TIM_Base_MspInit+0x288>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8003b92:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003b94:	4a33      	ldr	r2, [pc, #204]	@ (8003c64 <HAL_TIM_Base_MspInit+0x294>)
 8003b96:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003b98:	4b31      	ldr	r3, [pc, #196]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003b9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b9e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003ba2:	2240      	movs	r2, #64	@ 0x40
 8003ba4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003bac:	4b2c      	ldr	r3, [pc, #176]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bbc:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bc2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003bc4:	4b26      	ldr	r3, [pc, #152]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003bca:	4b25      	ldr	r3, [pc, #148]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bcc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003bd0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim4_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003bd8:	4b21      	ldr	r3, [pc, #132]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim4_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8003bde:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim4_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003be4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003bea:	481d      	ldr	r0, [pc, #116]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bec:	f000 fb1a 	bl	8004224 <HAL_DMA_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_Base_MspInit+0x22a>
      Error_Handler();
 8003bf6:	f7ff f8b9 	bl	8002d6c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_TIM_Base_MspInit+0x290>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003c06:	e068      	b.n	8003cda <HAL_TIM_Base_MspInit+0x30a>
  else if(tim_baseHandle->Instance==TIM5)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	@ (8003c68 <HAL_TIM_Base_MspInit+0x298>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12c      	bne.n	8003c6c <HAL_TIM_Base_MspInit+0x29c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	4a09      	ldr	r2, [pc, #36]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c22:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_TIM_Base_MspInit+0x270>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2102      	movs	r1, #2
 8003c32:	2032      	movs	r0, #50	@ 0x32
 8003c34:	f000 fabf 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c38:	2032      	movs	r0, #50	@ 0x32
 8003c3a:	f000 fad8 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 8003c3e:	e04c      	b.n	8003cda <HAL_TIM_Base_MspInit+0x30a>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	200008e4 	.word	0x200008e4
 8003c48:	40026088 	.word	0x40026088
 8003c4c:	20000944 	.word	0x20000944
 8003c50:	40026028 	.word	0x40026028
 8003c54:	40000800 	.word	0x40000800
 8003c58:	200009a4 	.word	0x200009a4
 8003c5c:	40026058 	.word	0x40026058
 8003c60:	20000a04 	.word	0x20000a04
 8003c64:	400260b8 	.word	0x400260b8
 8003c68:	40000c00 	.word	0x40000c00
  else if(tim_baseHandle->Instance==TIM9)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_TIM_Base_MspInit+0x314>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d116      	bne.n	8003ca4 <HAL_TIM_Base_MspInit+0x2d4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c86:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	2018      	movs	r0, #24
 8003c98:	f000 fa8d 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c9c:	2018      	movs	r0, #24
 8003c9e:	f000 faa6 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 8003ca2:	e01a      	b.n	8003cda <HAL_TIM_Base_MspInit+0x30a>
  else if(tim_baseHandle->Instance==TIM10)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a10      	ldr	r2, [pc, #64]	@ (8003cec <HAL_TIM_Base_MspInit+0x31c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d115      	bne.n	8003cda <HAL_TIM_Base_MspInit+0x30a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_TIM_Base_MspInit+0x318>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2019      	movs	r0, #25
 8003cd0:	f000 fa71 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003cd4:	2019      	movs	r0, #25
 8003cd6:	f000 fa8a 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40014400 	.word	0x40014400

08003cf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <HAL_TIM_PWM_MspInit+0x3c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_TIM_PWM_MspInit+0x40>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_TIM_PWM_MspInit+0x40>)
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <HAL_TIM_PWM_MspInit+0x40>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	@ 0x30
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	f107 031c 	add.w	r3, r7, #28
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d13d      	bne.n	8003dd2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	4b44      	ldr	r3, [pc, #272]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	4a43      	ldr	r2, [pc, #268]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d66:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d82:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	4831      	ldr	r0, [pc, #196]	@ (8003e70 <HAL_TIM_MspPostInit+0x13c>)
 8003daa:	f000 ffb9 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 031c 	add.w	r3, r7, #28
 8003dc8:	4619      	mov	r1, r3
 8003dca:	482a      	ldr	r0, [pc, #168]	@ (8003e74 <HAL_TIM_MspPostInit+0x140>)
 8003dcc:	f000 ffa8 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003dd0:	e047      	b.n	8003e62 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_TIM_MspPostInit+0x144>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d11e      	bne.n	8003e1a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	4b22      	ldr	r3, [pc, #136]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	4a21      	ldr	r2, [pc, #132]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dec:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4818      	ldr	r0, [pc, #96]	@ (8003e74 <HAL_TIM_MspPostInit+0x140>)
 8003e14:	f000 ff84 	bl	8004d20 <HAL_GPIO_Init>
}
 8003e18:	e023      	b.n	8003e62 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM4)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_TIM_MspPostInit+0x148>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d11e      	bne.n	8003e62 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e34:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <HAL_TIM_MspPostInit+0x138>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e52:	2302      	movs	r3, #2
 8003e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e56:	f107 031c 	add.w	r3, r7, #28
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <HAL_TIM_MspPostInit+0x140>)
 8003e5e:	f000 ff5f 	bl	8004d20 <HAL_GPIO_Init>
}
 8003e62:	bf00      	nop
 8003e64:	3730      	adds	r7, #48	@ 0x30
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020000 	.word	0x40020000
 8003e74:	40020400 	.word	0x40020400
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800

08003e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e84:	f7ff fb8e 	bl	80035a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e88:	480c      	ldr	r0, [pc, #48]	@ (8003ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e8a:	490d      	ldr	r1, [pc, #52]	@ (8003ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e90:	e002      	b.n	8003e98 <LoopCopyDataInit>

08003e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e96:	3304      	adds	r3, #4

08003e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e9c:	d3f9      	bcc.n	8003e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea4:	e001      	b.n	8003eaa <LoopFillZerobss>

08003ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea8:	3204      	adds	r2, #4

08003eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eac:	d3fb      	bcc.n	8003ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eae:	f009 ff43 	bl	800dd38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eb2:	f7fe fdc5 	bl	8002a40 <main>
  bx  lr    
 8003eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec0:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8003ec4:	08012f20 	.word	0x08012f20
  ldr r2, =_sbss
 8003ec8:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8003ecc:	200027b8 	.word	0x200027b8

08003ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed0:	e7fe      	b.n	8003ed0 <ADC_IRQHandler>
	...

08003ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <HAL_Init+0x40>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <HAL_Init+0x40>)
 8003ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <HAL_Init+0x40>)
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <HAL_Init+0x40>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a07      	ldr	r2, [pc, #28]	@ (8003f14 <HAL_Init+0x40>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efc:	2003      	movs	r0, #3
 8003efe:	f000 f94f 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f02:	200f      	movs	r0, #15
 8003f04:	f000 f808 	bl	8003f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f08:	f7ff f820 	bl	8002f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023c00 	.word	0x40023c00

08003f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_InitTick+0x54>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_InitTick+0x58>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f967 	bl	800420a <HAL_SYSTICK_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00e      	b.n	8003f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d80a      	bhi.n	8003f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	f000 f92f 	bl	80041b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f58:	4a06      	ldr	r2, [pc, #24]	@ (8003f74 <HAL_InitTick+0x5c>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200000ac 	.word	0x200000ac
 8003f70:	200000b4 	.word	0x200000b4
 8003f74:	200000b0 	.word	0x200000b0

08003f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_IncTick+0x20>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <HAL_IncTick+0x24>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <HAL_IncTick+0x24>)
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	200000b4 	.word	0x200000b4
 8003f9c:	20000a64 	.word	0x20000a64

08003fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	@ (8003fb4 <HAL_GetTick+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000a64 	.word	0x20000a64

08003fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc0:	f7ff ffee 	bl	8003fa0 <HAL_GetTick>
 8003fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d005      	beq.n	8003fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <HAL_Delay+0x44>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fde:	bf00      	nop
 8003fe0:	f7ff ffde 	bl	8003fa0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d8f7      	bhi.n	8003fe0 <HAL_Delay+0x28>
  {
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200000b4 	.word	0x200000b4

08004000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800402c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004032:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	60d3      	str	r3, [r2, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <__NVIC_GetPriorityGrouping+0x18>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 0307 	and.w	r3, r3, #7
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db0b      	blt.n	800408e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f003 021f 	and.w	r2, r3, #31
 800407c:	4907      	ldr	r1, [pc, #28]	@ (800409c <__NVIC_EnableIRQ+0x38>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2001      	movs	r0, #1
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	@ (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	@ (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	@ 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
         );
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	@ 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800416c:	d301      	bcc.n	8004172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004172:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <SysTick_Config+0x40>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417a:	210f      	movs	r1, #15
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	f7ff ff8e 	bl	80040a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004184:	4b05      	ldr	r3, [pc, #20]	@ (800419c <SysTick_Config+0x40>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	4b04      	ldr	r3, [pc, #16]	@ (800419c <SysTick_Config+0x40>)
 800418c:	2207      	movs	r2, #7
 800418e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000e010 	.word	0xe000e010

080041a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff29 	bl	8004000 <__NVIC_SetPriorityGrouping>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041c8:	f7ff ff3e 	bl	8004048 <__NVIC_GetPriorityGrouping>
 80041cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff8e 	bl	80040f4 <NVIC_EncodePriority>
 80041d8:	4602      	mov	r2, r0
 80041da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff5d 	bl	80040a0 <__NVIC_SetPriority>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff31 	bl	8004064 <__NVIC_EnableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffa2 	bl	800415c <SysTick_Config>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7ff feb6 	bl	8003fa0 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e099      	b.n	8004374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004260:	e00f      	b.n	8004282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004262:	f7ff fe9d 	bl	8003fa0 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b05      	cmp	r3, #5
 800426e:	d908      	bls.n	8004282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2203      	movs	r2, #3
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e078      	b.n	8004374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e8      	bne.n	8004262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4b38      	ldr	r3, [pc, #224]	@ (800437c <HAL_DMA_Init+0x158>)
 800429c:	4013      	ands	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	4313      	orrs	r3, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	2b04      	cmp	r3, #4
 8004314:	d117      	bne.n	8004346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa6f 	bl	800480c <DMA_CheckFifoParam>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2240      	movs	r2, #64	@ 0x40
 8004338:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004342:	2301      	movs	r3, #1
 8004344:	e016      	b.n	8004374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa26 	bl	80047a0 <DMA_CalcBaseAndBitshift>
 8004354:	4603      	mov	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435c:	223f      	movs	r2, #63	@ 0x3f
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	f010803f 	.word	0xf010803f

08004380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_DMA_Start_IT+0x26>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e040      	b.n	8004428 <HAL_DMA_Start_IT+0xa8>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d12f      	bne.n	800441a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f9b8 	bl	8004744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	223f      	movs	r2, #63	@ 0x3f
 80043da:	409a      	lsls	r2, r3
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0216 	orr.w	r2, r2, #22
 80043ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0208 	orr.w	r2, r2, #8
 8004406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e005      	b.n	8004426 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004422:	2302      	movs	r3, #2
 8004424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800443c:	4b8e      	ldr	r3, [pc, #568]	@ (8004678 <HAL_DMA_IRQHandler+0x248>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a8e      	ldr	r2, [pc, #568]	@ (800467c <HAL_DMA_IRQHandler+0x24c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	2208      	movs	r2, #8
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01a      	beq.n	800449c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d013      	beq.n	800449c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	2208      	movs	r2, #8
 800448a:	409a      	lsls	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044be:	2201      	movs	r2, #1
 80044c0:	409a      	lsls	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0202 	orr.w	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	2204      	movs	r2, #4
 80044d8:	409a      	lsls	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	2204      	movs	r2, #4
 80044f6:	409a      	lsls	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f043 0204 	orr.w	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450c:	2210      	movs	r2, #16
 800450e:	409a      	lsls	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d043      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03c      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	2210      	movs	r2, #16
 800452c:	409a      	lsls	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d024      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
 800455e:	e01f      	b.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
 8004570:	e016      	b.n	80045a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0208 	bic.w	r2, r2, #8
 800458e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2220      	movs	r2, #32
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 808f 	beq.w	80046d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8087 	beq.w	80046d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	2220      	movs	r2, #32
 80045c8:	409a      	lsls	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d136      	bne.n	8004648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0216 	bic.w	r2, r2, #22
 80045e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_DMA_IRQHandler+0x1da>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	223f      	movs	r2, #63	@ 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d07e      	beq.n	800473c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
        }
        return;
 8004646:	e079      	b.n	800473c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	2b00      	cmp	r3, #0
 800466a:	d031      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
 8004674:	e02c      	b.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
 8004676:	bf00      	nop
 8004678:	200000ac 	.word	0x200000ac
 800467c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d023      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
 8004690:	e01e      	b.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0210 	bic.w	r2, r2, #16
 80046ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d032      	beq.n	800473e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d022      	beq.n	800472a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2205      	movs	r2, #5
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3301      	adds	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d307      	bcc.n	8004718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f2      	bne.n	80046fc <HAL_DMA_IRQHandler+0x2cc>
 8004716:	e000      	b.n	800471a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
 800473a:	e000      	b.n	800473e <HAL_DMA_IRQHandler+0x30e>
        return;
 800473c:	bf00      	nop
    }
  }
}
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b40      	cmp	r3, #64	@ 0x40
 8004770:	d108      	bne.n	8004784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004782:	e007      	b.n	8004794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	3b10      	subs	r3, #16
 80047b0:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <DMA_CalcBaseAndBitshift+0x64>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ba:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <DMA_CalcBaseAndBitshift+0x68>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d909      	bls.n	80047e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	@ 0x58
 80047e0:	e007      	b.n	80047f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	aaaaaaab 	.word	0xaaaaaaab
 8004808:	08012b64 	.word	0x08012b64

0800480c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11f      	bne.n	8004866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d856      	bhi.n	80048da <DMA_CheckFifoParam+0xce>
 800482c:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <DMA_CheckFifoParam+0x28>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004845 	.word	0x08004845
 8004838:	08004857 	.word	0x08004857
 800483c:	08004845 	.word	0x08004845
 8004840:	080048db 	.word	0x080048db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d046      	beq.n	80048de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e043      	b.n	80048de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800485e:	d140      	bne.n	80048e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004864:	e03d      	b.n	80048e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486e:	d121      	bne.n	80048b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d837      	bhi.n	80048e6 <DMA_CheckFifoParam+0xda>
 8004876:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <DMA_CheckFifoParam+0x70>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	0800488d 	.word	0x0800488d
 8004880:	08004893 	.word	0x08004893
 8004884:	0800488d 	.word	0x0800488d
 8004888:	080048a5 	.word	0x080048a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e030      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d025      	beq.n	80048ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e022      	b.n	80048ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048ac:	d11f      	bne.n	80048ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048b2:	e01c      	b.n	80048ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d903      	bls.n	80048c2 <DMA_CheckFifoParam+0xb6>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d003      	beq.n	80048c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048c0:	e018      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      break;
 80048c6:	e015      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e00b      	b.n	80048f2 <DMA_CheckFifoParam+0xe6>
      break;
 80048da:	bf00      	nop
 80048dc:	e00a      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
 80048e0:	e008      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048e2:	bf00      	nop
 80048e4:	e006      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
 80048e8:	e004      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048f2:	bf00      	nop
    }
  } 
  
  return status; 
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop

08004904 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <HAL_FLASH_Program+0xa0>)
 8004918:	7e1b      	ldrb	r3, [r3, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_FLASH_Program+0x1e>
 800491e:	2302      	movs	r3, #2
 8004920:	e03b      	b.n	800499a <HAL_FLASH_Program+0x96>
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <HAL_FLASH_Program+0xa0>)
 8004924:	2201      	movs	r2, #1
 8004926:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004928:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800492c:	f000 f870 	bl	8004a10 <FLASH_WaitForLastOperation>
 8004930:	4603      	mov	r3, r0
 8004932:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d12b      	bne.n	8004992 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004940:	783b      	ldrb	r3, [r7, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 f91b 	bl	8004b80 <FLASH_Program_Byte>
 800494a:	e016      	b.n	800497a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004952:	883b      	ldrh	r3, [r7, #0]
 8004954:	4619      	mov	r1, r3
 8004956:	68b8      	ldr	r0, [r7, #8]
 8004958:	f000 f8ee 	bl	8004b38 <FLASH_Program_HalfWord>
 800495c:	e00d      	b.n	800497a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d105      	bne.n	8004970 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f000 f8c3 	bl	8004af4 <FLASH_Program_Word>
 800496e:	e004      	b.n	800497a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004974:	68b8      	ldr	r0, [r7, #8]
 8004976:	f000 f88b 	bl	8004a90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800497a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800497e:	f000 f847 	bl	8004a10 <FLASH_WaitForLastOperation>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004986:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <HAL_FLASH_Program+0xa4>)
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <HAL_FLASH_Program+0xa4>)
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004992:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <HAL_FLASH_Program+0xa0>)
 8004994:	2200      	movs	r2, #0
 8004996:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000a68 	.word	0x20000a68
 80049a8:	40023c00 	.word	0x40023c00

080049ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_FLASH_Unlock+0x38>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da0b      	bge.n	80049d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_FLASH_Unlock+0x38>)
 80049c0:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <HAL_FLASH_Unlock+0x3c>)
 80049c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80049c4:	4b07      	ldr	r3, [pc, #28]	@ (80049e4 <HAL_FLASH_Unlock+0x38>)
 80049c6:	4a09      	ldr	r2, [pc, #36]	@ (80049ec <HAL_FLASH_Unlock+0x40>)
 80049c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_FLASH_Unlock+0x38>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da01      	bge.n	80049d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80049d6:	79fb      	ldrb	r3, [r7, #7]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	45670123 	.word	0x45670123
 80049ec:	cdef89ab 	.word	0xcdef89ab

080049f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <HAL_FLASH_Lock+0x1c>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <HAL_FLASH_Lock+0x1c>)
 80049fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40023c00 	.word	0x40023c00

08004a10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <FLASH_WaitForLastOperation+0x78>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a22:	f7ff fabd 	bl	8003fa0 <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004a28:	e010      	b.n	8004a4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d00c      	beq.n	8004a4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <FLASH_WaitForLastOperation+0x38>
 8004a38:	f7ff fab2 	bl	8003fa0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d201      	bcs.n	8004a4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e019      	b.n	8004a80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <FLASH_WaitForLastOperation+0x7c>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e8      	bne.n	8004a2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <FLASH_WaitForLastOperation+0x7c>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a64:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <FLASH_WaitForLastOperation+0x7c>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004a6a:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <FLASH_WaitForLastOperation+0x7c>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004a76:	f000 f8a5 	bl	8004bc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
  
}  
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000a68 	.word	0x20000a68
 8004a8c:	40023c00 	.word	0x40023c00

08004a90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a9c:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004aa8:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	4a10      	ldr	r2, [pc, #64]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004aae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004ab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8004af0 <FLASH_Program_DoubleWord+0x60>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004ac6:	f3bf 8f6f 	isb	sy
}
 8004aca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	000a      	movs	r2, r1
 8004ada:	2300      	movs	r3, #0
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	3104      	adds	r1, #4
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40023c00 	.word	0x40023c00

08004af4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	4a09      	ldr	r2, [pc, #36]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b16:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	4a06      	ldr	r2, [pc, #24]	@ (8004b34 <FLASH_Program_Word+0x40>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	601a      	str	r2, [r3, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40023c00 	.word	0x40023c00

08004b38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b44:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a0c      	ldr	r2, [pc, #48]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4a09      	ldr	r2, [pc, #36]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b5c:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4a06      	ldr	r2, [pc, #24]	@ (8004b7c <FLASH_Program_HalfWord+0x44>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	801a      	strh	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00

08004b80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b98:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ba0:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	4a06      	ldr	r2, [pc, #24]	@ (8004bc0 <FLASH_Program_Byte+0x40>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	701a      	strb	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00

08004bc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f043 0310 	orr.w	r3, r3, #16
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004bde:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004be0:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004be2:	2210      	movs	r2, #16
 8004be4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f043 0308 	orr.w	r3, r3, #8
 8004bfa:	4a24      	ldr	r2, [pc, #144]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004bfc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c00:	2220      	movs	r2, #32
 8004c02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004c04:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004c10:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f043 0304 	orr.w	r3, r3, #4
 8004c18:	4a1c      	ldr	r2, [pc, #112]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c1e:	2240      	movs	r2, #64	@ 0x40
 8004c20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004c22:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	4a15      	ldr	r2, [pc, #84]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004c3a:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c3c:	2280      	movs	r2, #128	@ 0x80
 8004c3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004c6c:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f043 0320 	orr.w	r3, r3, #32
 8004c74:	4a05      	ldr	r2, [pc, #20]	@ (8004c8c <FLASH_SetErrorCode+0xc8>)
 8004c76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <FLASH_SetErrorCode+0xc4>)
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	60da      	str	r2, [r3, #12]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	20000a68 	.word	0x20000a68

08004c90 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e010      	b.n	8004cce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d103      	bne.n	8004cba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e009      	b.n	8004cce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d103      	bne.n	8004cc8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004cc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e002      	b.n	8004cce <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004cc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cce:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004cda:	4b10      	ldr	r3, [pc, #64]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	490f      	ldr	r1, [pc, #60]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4a0c      	ldr	r2, [pc, #48]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	4a07      	ldr	r2, [pc, #28]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <FLASH_Erase_Sector+0x8c>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	6113      	str	r3, [r2, #16]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40023c00 	.word	0x40023c00

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	@ 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e159      	b.n	8004ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 8148 	bne.w	8004fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d005      	beq.n	8004d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d130      	bne.n	8004dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 0201 	and.w	r2, r3, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d017      	beq.n	8004e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d123      	bne.n	8004e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a2 	beq.w	8004fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b57      	ldr	r3, [pc, #348]	@ (8005008 <HAL_GPIO_Init+0x2e8>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	4a56      	ldr	r2, [pc, #344]	@ (8005008 <HAL_GPIO_Init+0x2e8>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eb6:	4b54      	ldr	r3, [pc, #336]	@ (8005008 <HAL_GPIO_Init+0x2e8>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec2:	4a52      	ldr	r2, [pc, #328]	@ (800500c <HAL_GPIO_Init+0x2ec>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a49      	ldr	r2, [pc, #292]	@ (8005010 <HAL_GPIO_Init+0x2f0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d019      	beq.n	8004f22 <HAL_GPIO_Init+0x202>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a48      	ldr	r2, [pc, #288]	@ (8005014 <HAL_GPIO_Init+0x2f4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_GPIO_Init+0x1fe>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <HAL_GPIO_Init+0x2f8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00d      	beq.n	8004f1a <HAL_GPIO_Init+0x1fa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a46      	ldr	r2, [pc, #280]	@ (800501c <HAL_GPIO_Init+0x2fc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <HAL_GPIO_Init+0x1f6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a45      	ldr	r2, [pc, #276]	@ (8005020 <HAL_GPIO_Init+0x300>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <HAL_GPIO_Init+0x1f2>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	e008      	b.n	8004f24 <HAL_GPIO_Init+0x204>
 8004f12:	2307      	movs	r3, #7
 8004f14:	e006      	b.n	8004f24 <HAL_GPIO_Init+0x204>
 8004f16:	2303      	movs	r3, #3
 8004f18:	e004      	b.n	8004f24 <HAL_GPIO_Init+0x204>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e002      	b.n	8004f24 <HAL_GPIO_Init+0x204>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_GPIO_Init+0x204>
 8004f22:	2300      	movs	r3, #0
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	f002 0203 	and.w	r2, r2, #3
 8004f2a:	0092      	lsls	r2, r2, #2
 8004f2c:	4093      	lsls	r3, r2
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f34:	4935      	ldr	r1, [pc, #212]	@ (800500c <HAL_GPIO_Init+0x2ec>)
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f42:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f66:	4a2f      	ldr	r2, [pc, #188]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f90:	4a24      	ldr	r2, [pc, #144]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f96:	4b23      	ldr	r3, [pc, #140]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fba:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc0:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8005024 <HAL_GPIO_Init+0x304>)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3301      	adds	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	f67f aea2 	bls.w	8004d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	@ 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	40013800 	.word	0x40013800
 8005010:	40020000 	.word	0x40020000
 8005014:	40020400 	.word	0x40020400
 8005018:	40020800 	.word	0x40020800
 800501c:	40020c00 	.word	0x40020c00
 8005020:	40021000 	.word	0x40021000
 8005024:	40013c00 	.word	0x40013c00

08005028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005038:	787b      	ldrb	r3, [r7, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005044:	e003      	b.n	800504e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	041a      	lsls	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	619a      	str	r2, [r3, #24]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4013      	ands	r3, r2
 8005072:	041a      	lsls	r2, r3, #16
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43d9      	mvns	r1, r3
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	400b      	ands	r3, r1
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	619a      	str	r2, [r3, #24]
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800509a:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050a6:	4a05      	ldr	r2, [pc, #20]	@ (80050bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fd fc14 	bl	80028dc <HAL_GPIO_EXTI_Callback>
  }
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40013c00 	.word	0x40013c00

080050c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e101      	b.n	80052d6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f007 fbcd 	bl	800c88c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005100:	d102      	bne.n	8005108 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f003 ffc6 	bl	800909e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7c1a      	ldrb	r2, [r3, #16]
 800511a:	f88d 2000 	strb.w	r2, [sp]
 800511e:	3304      	adds	r3, #4
 8005120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005122:	f003 fea5 	bl	8008e70 <USB_CoreInit>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0ce      	b.n	80052d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f003 ffbe 	bl	80090c0 <USB_SetCurrentMode>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0bf      	b.n	80052d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e04a      	b.n	80051f2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3315      	adds	r3, #21
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3314      	adds	r3, #20
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	b298      	uxth	r0, r3
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	332e      	adds	r3, #46	@ 0x2e
 8005198:	4602      	mov	r2, r0
 800519a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800519c:	7bfa      	ldrb	r2, [r7, #15]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	3318      	adds	r3, #24
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	331c      	adds	r3, #28
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051c4:	7bfa      	ldrb	r2, [r7, #15]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	3320      	adds	r3, #32
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3324      	adds	r3, #36	@ 0x24
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	3301      	adds	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	791b      	ldrb	r3, [r3, #4]
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d3af      	bcc.n	800515c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e044      	b.n	800528c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005202:	7bfa      	ldrb	r2, [r7, #15]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800522a:	7bfa      	ldrb	r2, [r7, #15]
 800522c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	3301      	adds	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	429a      	cmp	r2, r3
 8005294:	d3b5      	bcc.n	8005202 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7c1a      	ldrb	r2, [r3, #16]
 800529e:	f88d 2000 	strb.w	r2, [sp]
 80052a2:	3304      	adds	r3, #4
 80052a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a6:	f003 ff57 	bl	8009158 <USB_DevInit>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e00c      	b.n	80052d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 ff9b 	bl	800a20a <USB_DevDisconnect>

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_PCD_Start+0x1c>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e022      	b.n	8005340 <HAL_PCD_Start+0x62>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f003 fea8 	bl	800907c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f004 ff49 	bl	800a1c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b08d      	sub	sp, #52	@ 0x34
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f005 f807 	bl	800a372 <USB_GetMode>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 848c 	bne.w	8005c84 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f004 ff6b 	bl	800a24c <USB_ReadInterrupts>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 8482 	beq.w	8005c82 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f004 ff58 	bl	800a24c <USB_ReadInterrupts>
 800539c:	4603      	mov	r3, r0
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d107      	bne.n	80053b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f002 0202 	and.w	r2, r2, #2
 80053b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f004 ff46 	bl	800a24c <USB_ReadInterrupts>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d161      	bne.n	800548e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0210 	bic.w	r2, r2, #16
 80053d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	4613      	mov	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	3304      	adds	r3, #4
 80053f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	0c5b      	lsrs	r3, r3, #17
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	2b02      	cmp	r3, #2
 8005404:	d124      	bne.n	8005450 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d035      	beq.n	800547e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800541c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6a38      	ldr	r0, [r7, #32]
 8005426:	f004 fd7d 	bl	8009f24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005436:	441a      	add	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005448:	441a      	add	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	615a      	str	r2, [r3, #20]
 800544e:	e016      	b.n	800547e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	0c5b      	lsrs	r3, r3, #17
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	2b06      	cmp	r3, #6
 800545a:	d110      	bne.n	800547e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005462:	2208      	movs	r2, #8
 8005464:	4619      	mov	r1, r3
 8005466:	6a38      	ldr	r0, [r7, #32]
 8005468:	f004 fd5c 	bl	8009f24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005478:	441a      	add	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0210 	orr.w	r2, r2, #16
 800548c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f004 feda 	bl	800a24c <USB_ReadInterrupts>
 8005498:	4603      	mov	r3, r0
 800549a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800549e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054a2:	f040 80a7 	bne.w	80055f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 fedf 	bl	800a272 <USB_ReadDevAllOutEpInterrupt>
 80054b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80054b6:	e099      	b.n	80055ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 808e 	beq.w	80055e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 ff03 	bl	800a2da <USB_ReadDevOutEPInterrupt>
 80054d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ec:	461a      	mov	r2, r3
 80054ee:	2301      	movs	r3, #1
 80054f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80054f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fea1 	bl	800623c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00c      	beq.n	800551e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005510:	461a      	mov	r2, r3
 8005512:	2308      	movs	r3, #8
 8005514:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005516:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 ff77 	bl	800640c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005534:	461a      	mov	r2, r3
 8005536:	2310      	movs	r3, #16
 8005538:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d030      	beq.n	80055a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554c:	2b80      	cmp	r3, #128	@ 0x80
 800554e:	d109      	bne.n	8005564 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800555e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005562:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	3304      	adds	r3, #4
 8005578:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	78db      	ldrb	r3, [r3, #3]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d108      	bne.n	8005594 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f007 fa78 	bl	800ca84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	2302      	movs	r3, #2
 80055a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	2320      	movs	r3, #32
 80055c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d8:	461a      	mov	r2, r3
 80055da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	3301      	adds	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f47f af62 	bne.w	80054b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f004 fe27 	bl	800a24c <USB_ReadInterrupts>
 80055fe:	4603      	mov	r3, r0
 8005600:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005608:	f040 80db 	bne.w	80057c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f004 fe48 	bl	800a2a6 <USB_ReadDevAllInEpInterrupt>
 8005616:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800561c:	e0cd      	b.n	80057ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80c2 	beq.w	80057ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f004 fe6e 	bl	800a316 <USB_ReadDevInEPInterrupt>
 800563a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d057      	beq.n	80056f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2201      	movs	r2, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	69f9      	ldr	r1, [r7, #28]
 8005662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005666:	4013      	ands	r3, r2
 8005668:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005676:	461a      	mov	r2, r3
 8005678:	2301      	movs	r3, #1
 800567a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	799b      	ldrb	r3, [r3, #6]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d132      	bne.n	80056ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3320      	adds	r3, #32
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569a:	4613      	mov	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4403      	add	r3, r0
 80056a4:	331c      	adds	r3, #28
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4419      	add	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4403      	add	r3, r0
 80056b8:	3320      	adds	r3, #32
 80056ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d113      	bne.n	80056ea <HAL_PCD_IRQHandler+0x3a2>
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056e2:	461a      	mov	r2, r3
 80056e4:	2101      	movs	r1, #1
 80056e6:	f004 fe75 	bl	800a3d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f007 f94c 	bl	800c98e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570c:	461a      	mov	r2, r3
 800570e:	2308      	movs	r3, #8
 8005710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005728:	461a      	mov	r2, r3
 800572a:	2310      	movs	r3, #16
 800572c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005744:	461a      	mov	r2, r3
 8005746:	2340      	movs	r3, #64	@ 0x40
 8005748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d023      	beq.n	800579c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005756:	6a38      	ldr	r0, [r7, #32]
 8005758:	f003 fe62 	bl	8009420 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800575c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	3310      	adds	r3, #16
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4413      	add	r3, r2
 800576c:	3304      	adds	r3, #4
 800576e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	78db      	ldrb	r3, [r3, #3]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d108      	bne.n	800578a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2200      	movs	r2, #0
 800577c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f007 f98f 	bl	800caa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	2302      	movs	r3, #2
 800579a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80057a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fcbb 	bl	8006124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	3301      	adds	r3, #1
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f af2e 	bne.w	800561e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f004 fd40 	bl	800a24c <USB_ReadInterrupts>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d6:	d122      	bne.n	800581e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d108      	bne.n	8005808 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fea1 	bl	8006548 <HAL_PCDEx_LPM_Callback>
 8005806:	e002      	b.n	800580e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f007 f92d 	bl	800ca68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800581c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f004 fd12 	bl	800a24c <USB_ReadInterrupts>
 8005828:	4603      	mov	r3, r0
 800582a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005832:	d112      	bne.n	800585a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f007 f8e9 	bl	800ca1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005858:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f004 fcf4 	bl	800a24c <USB_ReadInterrupts>
 8005864:	4603      	mov	r3, r0
 8005866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586e:	f040 80b7 	bne.w	80059e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2110      	movs	r1, #16
 800588c:	4618      	mov	r0, r3
 800588e:	f003 fdc7 	bl	8009420 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005896:	e046      	b.n	8005926 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d8:	461a      	mov	r2, r3
 80058da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800591a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800591e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	3301      	adds	r3, #1
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	461a      	mov	r2, r3
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	4293      	cmp	r3, r2
 8005930:	d3b2      	bcc.n	8005898 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005940:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005944:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7bdb      	ldrb	r3, [r3, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800595e:	f043 030b 	orr.w	r3, r3, #11
 8005962:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005974:	f043 030b 	orr.w	r3, r3, #11
 8005978:	6453      	str	r3, [r2, #68]	@ 0x44
 800597a:	e015      	b.n	80059a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800598e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005992:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a2:	f043 030b 	orr.w	r3, r3, #11
 80059a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80059ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059ca:	461a      	mov	r2, r3
 80059cc:	f004 fd02 	bl	800a3d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80059de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 fc31 	bl	800a24c <USB_ReadInterrupts>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059f4:	d123      	bne.n	8005a3e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 fcc7 	bl	800a38e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f003 fd84 	bl	8009512 <USB_GetDevSpeed>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681c      	ldr	r4, [r3, #0]
 8005a16:	f001 fa07 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8005a1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a20:	461a      	mov	r2, r3
 8005a22:	4620      	mov	r0, r4
 8005a24:	f003 fa88 	bl	8008f38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f006 ffd8 	bl	800c9de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 fc02 	bl	800a24c <USB_ReadInterrupts>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d10a      	bne.n	8005a68 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f006 ffb5 	bl	800c9c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f002 0208 	and.w	r2, r2, #8
 8005a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f004 fbed 	bl	800a24c <USB_ReadInterrupts>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a78:	2b80      	cmp	r3, #128	@ 0x80
 8005a7a:	d123      	bne.n	8005ac4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a88:	2301      	movs	r3, #1
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8c:	e014      	b.n	8005ab8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d105      	bne.n	8005ab2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb08 	bl	80060c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	791b      	ldrb	r3, [r3, #4]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d3e4      	bcc.n	8005a8e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f004 fbbf 	bl	800a24c <USB_ReadInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad8:	d13c      	bne.n	8005b54 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ada:	2301      	movs	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ade:	e02b      	b.n	8005b38 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3318      	adds	r3, #24
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d115      	bne.n	8005b32 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da12      	bge.n	8005b32 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	440b      	add	r3, r1
 8005b1a:	3317      	adds	r3, #23
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fac8 	bl	80060c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	3301      	adds	r3, #1
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	791b      	ldrb	r3, [r3, #4]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d3cd      	bcc.n	8005ae0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f004 fb77 	bl	800a24c <USB_ReadInterrupts>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b68:	d156      	bne.n	8005c18 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	e045      	b.n	8005bfc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d12e      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da2b      	bge.n	8005bf6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005baa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d121      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bf2:	6053      	str	r3, [r2, #4]
            break;
 8005bf4:	e008      	b.n	8005c08 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	791b      	ldrb	r3, [r3, #4]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d3b3      	bcc.n	8005b70 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f004 fb15 	bl	800a24c <USB_ReadInterrupts>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d10a      	bne.n	8005c44 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f006 ff4c 	bl	800cacc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 faff 	bl	800a24c <USB_ReadInterrupts>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d115      	bne.n	8005c84 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f006 ff3c 	bl	800cae8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	e000      	b.n	8005c84 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005c82:	bf00      	nop
    }
  }
}
 8005c84:	3734      	adds	r7, #52	@ 0x34
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd90      	pop	{r4, r7, pc}

08005c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_PCD_SetAddress+0x1a>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e012      	b.n	8005cca <HAL_PCD_SetAddress+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 fa5e 	bl	800a17c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	70fb      	strb	r3, [r7, #3]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	803b      	strh	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da0f      	bge.n	8005d18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	3310      	adds	r3, #16
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	705a      	strb	r2, [r3, #1]
 8005d16:	e00f      	b.n	8005d38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d44:	883a      	ldrh	r2, [r7, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	78ba      	ldrb	r2, [r7, #2]
 8005d4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d62:	78bb      	ldrb	r3, [r7, #2]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d102      	bne.n	8005d6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_PCD_EP_Open+0xaa>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e00e      	b.n	8005d9a <HAL_PCD_EP_Open+0xc8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f003 fbe6 	bl	800955c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da0f      	bge.n	8005dd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	705a      	strb	r2, [r3, #1]
 8005dd4:	e00f      	b.n	8005df6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_PCD_EP_Close+0x6e>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e00e      	b.n	8005e2e <HAL_PCD_EP_Close+0x8c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fc24 	bl	800966c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	460b      	mov	r3, r1
 8005e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2200      	movs	r2, #0
 8005e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	799b      	ldrb	r3, [r3, #6]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	799b      	ldrb	r3, [r3, #6]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6979      	ldr	r1, [r7, #20]
 8005e9e:	f003 fcc1 	bl	8009824 <USB_EPStartXfer>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3310      	adds	r3, #16
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	3304      	adds	r3, #4
 8005f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	799b      	ldrb	r3, [r3, #6]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d102      	bne.n	8005f36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	799b      	ldrb	r3, [r3, #6]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	f003 fc6f 	bl	8009824 <USB_EPStartXfer>

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	7912      	ldrb	r2, [r2, #4]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e04f      	b.n	800600e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0f      	bge.n	8005f96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3310      	adds	r3, #16
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	705a      	strb	r2, [r3, #1]
 8005f94:	e00d      	b.n	8005fb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_PCD_EP_SetStall+0x82>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e01d      	b.n	800600e <HAL_PCD_EP_SetStall+0xbe>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f003 fff7 	bl	8009fd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7999      	ldrb	r1, [r3, #6]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ffe:	461a      	mov	r2, r3
 8006000:	f004 f9e8 	bl	800a3d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7912      	ldrb	r2, [r2, #4]
 800602c:	4293      	cmp	r3, r2
 800602e:	d901      	bls.n	8006034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e042      	b.n	80060ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006038:	2b00      	cmp	r3, #0
 800603a:	da0f      	bge.n	800605c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	3310      	adds	r3, #16
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	4413      	add	r3, r2
 8006050:	3304      	adds	r3, #4
 8006052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	705a      	strb	r2, [r3, #1]
 800605a:	e00f      	b.n	800607c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	3304      	adds	r3, #4
 8006074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_PCD_EP_ClrStall+0x86>
 8006098:	2302      	movs	r3, #2
 800609a:	e00e      	b.n	80060ba <HAL_PCD_EP_ClrStall+0xa4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 f800 	bl	800a0b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80060ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0c      	bge.n	80060f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	3310      	adds	r3, #16
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	3304      	adds	r3, #4
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e00c      	b.n	800610a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	f003 020f 	and.w	r2, r3, #15
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	4618      	mov	r0, r3
 8006112:	f003 fe1f 	bl	8009d54 <USB_EPStopXfer>
 8006116:	4603      	mov	r3, r0
 8006118:	72fb      	strb	r3, [r7, #11]

  return ret;
 800611a:	7afb      	ldrb	r3, [r7, #11]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	@ 0x28
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3310      	adds	r3, #16
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	429a      	cmp	r2, r3
 8006156:	d901      	bls.n	800615c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e06b      	b.n	8006234 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	429a      	cmp	r2, r3
 8006170:	d902      	bls.n	8006178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3303      	adds	r3, #3
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006180:	e02a      	b.n	80061d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d902      	bls.n	800619e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3303      	adds	r3, #3
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	6978      	ldr	r0, [r7, #20]
 80061bc:	f003 fe74 	bl	8009ea8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	441a      	add	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d809      	bhi.n	8006202 <PCD_WriteEmptyTxFifo+0xde>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1bf      	bne.n	8006182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	429a      	cmp	r2, r3
 800620c:	d811      	bhi.n	8006232 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	2201      	movs	r2, #1
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	43db      	mvns	r3, r3
 8006228:	6939      	ldr	r1, [r7, #16]
 800622a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800622e:	4013      	ands	r3, r2
 8006230:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	333c      	adds	r3, #60	@ 0x3c
 8006254:	3304      	adds	r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	799b      	ldrb	r3, [r3, #6]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d17b      	bne.n	800636a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d015      	beq.n	80062a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4a61      	ldr	r2, [pc, #388]	@ (8006404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f240 80b9 	bls.w	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80b3 	beq.w	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a4:	6093      	str	r3, [r2, #8]
 80062a6:	e0a7      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062be:	461a      	mov	r2, r3
 80062c0:	2320      	movs	r3, #32
 80062c2:	6093      	str	r3, [r2, #8]
 80062c4:	e098      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8093 	bne.w	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d90f      	bls.n	80062fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f0:	461a      	mov	r2, r3
 80062f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f6:	6093      	str	r3, [r2, #8]
 80062f8:	e07e      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	3304      	adds	r3, #4
 800630e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	0159      	lsls	r1, r3, #5
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	440b      	add	r3, r1
 800631c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006326:	1ad2      	subs	r2, r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d114      	bne.n	800635c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006344:	461a      	mov	r2, r3
 8006346:	2101      	movs	r1, #1
 8006348:	f004 f844 	bl	800a3d4 <USB_EP0_OutStart>
 800634c:	e006      	b.n	800635c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	441a      	add	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f006 faf8 	bl	800c958 <HAL_PCD_DataOutStageCallback>
 8006368:	e046      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4a26      	ldr	r2, [pc, #152]	@ (8006408 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d124      	bne.n	80063bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006388:	461a      	mov	r2, r3
 800638a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638e:	6093      	str	r3, [r2, #8]
 8006390:	e032      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	2320      	movs	r3, #32
 80063ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f006 facf 	bl	800c958 <HAL_PCD_DataOutStageCallback>
 80063ba:	e01d      	b.n	80063f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d114      	bne.n	80063ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d108      	bne.n	80063ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063e4:	461a      	mov	r2, r3
 80063e6:	2100      	movs	r1, #0
 80063e8:	f003 fff4 	bl	800a3d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f006 fab0 	bl	800c958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	4f54300a 	.word	0x4f54300a
 8006408:	4f54310a 	.word	0x4f54310a

0800640c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	333c      	adds	r3, #60	@ 0x3c
 8006424:	3304      	adds	r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a15      	ldr	r2, [pc, #84]	@ (8006494 <PCD_EP_OutSetupPacket_int+0x88>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d90e      	bls.n	8006460 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006458:	461a      	mov	r2, r3
 800645a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800645e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f006 fa67 	bl	800c934 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <PCD_EP_OutSetupPacket_int+0x88>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d90c      	bls.n	8006488 <PCD_EP_OutSetupPacket_int+0x7c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	799b      	ldrb	r3, [r3, #6]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d108      	bne.n	8006488 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006480:	461a      	mov	r2, r3
 8006482:	2101      	movs	r1, #1
 8006484:	f003 ffa6 	bl	800a3d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	4f54300a 	.word	0x4f54300a

08006498 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
 80064a4:	4613      	mov	r3, r2
 80064a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80064b6:	883b      	ldrh	r3, [r7, #0]
 80064b8:	0419      	lsls	r1, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80064c4:	e028      	b.n	8006518 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	e00d      	b.n	80064f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3340      	adds	r3, #64	@ 0x40
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	3301      	adds	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3ec      	bcc.n	80064da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006500:	883b      	ldrh	r3, [r7, #0]
 8006502:	0418      	lsls	r0, r3, #16
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6819      	ldr	r1, [r3, #0]
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	3b01      	subs	r3, #1
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4302      	orrs	r2, r0
 8006510:	3340      	adds	r3, #64	@ 0x40
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	887a      	ldrh	r2, [r7, #2]
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e267      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d075      	beq.n	800666a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800657e:	4b88      	ldr	r3, [pc, #544]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b04      	cmp	r3, #4
 8006588:	d00c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800658a:	4b85      	ldr	r3, [pc, #532]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006592:	2b08      	cmp	r3, #8
 8006594:	d112      	bne.n	80065bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b82      	ldr	r3, [pc, #520]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800659e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065a2:	d10b      	bne.n	80065bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	4b7e      	ldr	r3, [pc, #504]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d05b      	beq.n	8006668 <HAL_RCC_OscConfig+0x108>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d157      	bne.n	8006668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e242      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c4:	d106      	bne.n	80065d4 <HAL_RCC_OscConfig+0x74>
 80065c6:	4b76      	ldr	r3, [pc, #472]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a75      	ldr	r2, [pc, #468]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e01d      	b.n	8006610 <HAL_RCC_OscConfig+0xb0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCC_OscConfig+0x98>
 80065de:	4b70      	ldr	r3, [pc, #448]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6f      	ldr	r2, [pc, #444]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4b6d      	ldr	r3, [pc, #436]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6c      	ldr	r2, [pc, #432]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e00b      	b.n	8006610 <HAL_RCC_OscConfig+0xb0>
 80065f8:	4b69      	ldr	r3, [pc, #420]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a68      	ldr	r2, [pc, #416]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80065fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	4b66      	ldr	r3, [pc, #408]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 800660a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800660e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d013      	beq.n	8006640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fd fcc2 	bl	8003fa0 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006620:	f7fd fcbe 	bl	8003fa0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	@ 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e207      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006632:	4b5b      	ldr	r3, [pc, #364]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0xc0>
 800663e:	e014      	b.n	800666a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006640:	f7fd fcae 	bl	8003fa0 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006648:	f7fd fcaa 	bl	8003fa0 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b64      	cmp	r3, #100	@ 0x64
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e1f3      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800665a:	4b51      	ldr	r3, [pc, #324]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0xe8>
 8006666:	e000      	b.n	800666a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d063      	beq.n	800673e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006676:	4b4a      	ldr	r3, [pc, #296]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006682:	4b47      	ldr	r3, [pc, #284]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800668a:	2b08      	cmp	r3, #8
 800668c:	d11c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668e:	4b44      	ldr	r3, [pc, #272]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d116      	bne.n	80066c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669a:	4b41      	ldr	r3, [pc, #260]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_RCC_OscConfig+0x152>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e1c7      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b2:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4937      	ldr	r1, [pc, #220]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066c6:	e03a      	b.n	800673e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d0:	4b34      	ldr	r3, [pc, #208]	@ (80067a4 <HAL_RCC_OscConfig+0x244>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d6:	f7fd fc63 	bl	8003fa0 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066de:	f7fd fc5f 	bl	8003fa0 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e1a8      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f0:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0f0      	beq.n	80066de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fc:	4b28      	ldr	r3, [pc, #160]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4925      	ldr	r1, [pc, #148]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]
 8006710:	e015      	b.n	800673e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006712:	4b24      	ldr	r3, [pc, #144]	@ (80067a4 <HAL_RCC_OscConfig+0x244>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fd fc42 	bl	8003fa0 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006720:	f7fd fc3e 	bl	8003fa0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e187      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006732:	4b1b      	ldr	r3, [pc, #108]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f0      	bne.n	8006720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d036      	beq.n	80067b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d016      	beq.n	8006780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006752:	4b15      	ldr	r3, [pc, #84]	@ (80067a8 <HAL_RCC_OscConfig+0x248>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fd fc22 	bl	8003fa0 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006760:	f7fd fc1e 	bl	8003fa0 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e167      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <HAL_RCC_OscConfig+0x240>)
 8006774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x200>
 800677e:	e01b      	b.n	80067b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006780:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <HAL_RCC_OscConfig+0x248>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006786:	f7fd fc0b 	bl	8003fa0 <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800678c:	e00e      	b.n	80067ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800678e:	f7fd fc07 	bl	8003fa0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d907      	bls.n	80067ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e150      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
 80067a0:	40023800 	.word	0x40023800
 80067a4:	42470000 	.word	0x42470000
 80067a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ac:	4b88      	ldr	r3, [pc, #544]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1ea      	bne.n	800678e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8097 	beq.w	80068f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ca:	4b81      	ldr	r3, [pc, #516]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10f      	bne.n	80067f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	4b7d      	ldr	r3, [pc, #500]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	4a7c      	ldr	r2, [pc, #496]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067e6:	4b7a      	ldr	r3, [pc, #488]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f6:	4b77      	ldr	r3, [pc, #476]	@ (80069d4 <HAL_RCC_OscConfig+0x474>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d118      	bne.n	8006834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006802:	4b74      	ldr	r3, [pc, #464]	@ (80069d4 <HAL_RCC_OscConfig+0x474>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a73      	ldr	r2, [pc, #460]	@ (80069d4 <HAL_RCC_OscConfig+0x474>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800680c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800680e:	f7fd fbc7 	bl	8003fa0 <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006816:	f7fd fbc3 	bl	8003fa0 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e10c      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006828:	4b6a      	ldr	r3, [pc, #424]	@ (80069d4 <HAL_RCC_OscConfig+0x474>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x2ea>
 800683c:	4b64      	ldr	r3, [pc, #400]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006840:	4a63      	ldr	r2, [pc, #396]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6713      	str	r3, [r2, #112]	@ 0x70
 8006848:	e01c      	b.n	8006884 <HAL_RCC_OscConfig+0x324>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x30c>
 8006852:	4b5f      	ldr	r3, [pc, #380]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	4a5e      	ldr	r2, [pc, #376]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6713      	str	r3, [r2, #112]	@ 0x70
 800685e:	4b5c      	ldr	r3, [pc, #368]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a5b      	ldr	r2, [pc, #364]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0x324>
 800686c:	4b58      	ldr	r3, [pc, #352]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	4a57      	ldr	r2, [pc, #348]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6713      	str	r3, [r2, #112]	@ 0x70
 8006878:	4b55      	ldr	r3, [pc, #340]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a54      	ldr	r2, [pc, #336]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 800687e:	f023 0304 	bic.w	r3, r3, #4
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fd fb88 	bl	8003fa0 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006892:	e00a      	b.n	80068aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006894:	f7fd fb84 	bl	8003fa0 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e0cb      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068aa:	4b49      	ldr	r3, [pc, #292]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ee      	beq.n	8006894 <HAL_RCC_OscConfig+0x334>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b8:	f7fd fb72 	bl	8003fa0 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fd fb6e 	bl	8003fa0 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0b5      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d6:	4b3e      	ldr	r3, [pc, #248]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ee      	bne.n	80068c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d105      	bne.n	80068f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e8:	4b39      	ldr	r3, [pc, #228]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	4a38      	ldr	r2, [pc, #224]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80068ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80a1 	beq.w	8006a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068fe:	4b34      	ldr	r3, [pc, #208]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b08      	cmp	r3, #8
 8006908:	d05c      	beq.n	80069c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d141      	bne.n	8006996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006912:	4b31      	ldr	r3, [pc, #196]	@ (80069d8 <HAL_RCC_OscConfig+0x478>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006918:	f7fd fb42 	bl	8003fa0 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006920:	f7fd fb3e 	bl	8003fa0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e087      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006932:	4b27      	ldr	r3, [pc, #156]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	3b01      	subs	r3, #1
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	491b      	ldr	r1, [pc, #108]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006968:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <HAL_RCC_OscConfig+0x478>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696e:	f7fd fb17 	bl	8003fa0 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006976:	f7fd fb13 	bl	8003fa0 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e05c      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x416>
 8006994:	e054      	b.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006996:	4b10      	ldr	r3, [pc, #64]	@ (80069d8 <HAL_RCC_OscConfig+0x478>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699c:	f7fd fb00 	bl	8003fa0 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fd fafc 	bl	8003fa0 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e045      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	4b06      	ldr	r3, [pc, #24]	@ (80069d0 <HAL_RCC_OscConfig+0x470>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x444>
 80069c2:	e03d      	b.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d107      	bne.n	80069dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e038      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40007000 	.word	0x40007000
 80069d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a4c <HAL_RCC_OscConfig+0x4ec>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d028      	beq.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d121      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d11a      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d111      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	3b01      	subs	r3, #1
 8006a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800

08006a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0cc      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a64:	4b68      	ldr	r3, [pc, #416]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d90c      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b65      	ldr	r3, [pc, #404]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b63      	ldr	r3, [pc, #396]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0b8      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d020      	beq.n	8006ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aa4:	4b59      	ldr	r3, [pc, #356]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a58      	ldr	r2, [pc, #352]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006abc:	4b53      	ldr	r3, [pc, #332]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	4a52      	ldr	r2, [pc, #328]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b50      	ldr	r3, [pc, #320]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	494d      	ldr	r1, [pc, #308]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d044      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aee:	4b47      	ldr	r3, [pc, #284]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d119      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e07f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d003      	beq.n	8006b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e06f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e067      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b2e:	4b37      	ldr	r3, [pc, #220]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f023 0203 	bic.w	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4934      	ldr	r1, [pc, #208]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b40:	f7fd fa2e 	bl	8003fa0 <HAL_GetTick>
 8006b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b48:	f7fd fa2a 	bl	8003fa0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e04f      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 020c 	and.w	r2, r3, #12
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d1eb      	bne.n	8006b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b70:	4b25      	ldr	r3, [pc, #148]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20c      	bcs.n	8006b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b22      	ldr	r3, [pc, #136]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b20      	ldr	r3, [pc, #128]	@ (8006c08 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e032      	b.n	8006bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ba4:	4b19      	ldr	r3, [pc, #100]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4916      	ldr	r1, [pc, #88]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bc2:	4b12      	ldr	r3, [pc, #72]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	490e      	ldr	r1, [pc, #56]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bd6:	f000 f821 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	490a      	ldr	r1, [pc, #40]	@ (8006c10 <HAL_RCC_ClockConfig+0x1c0>)
 8006be8:	5ccb      	ldrb	r3, [r1, r3]
 8006bea:	fa22 f303 	lsr.w	r3, r2, r3
 8006bee:	4a09      	ldr	r2, [pc, #36]	@ (8006c14 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bf2:	4b09      	ldr	r3, [pc, #36]	@ (8006c18 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fd f98e 	bl	8003f18 <HAL_InitTick>

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40023c00 	.word	0x40023c00
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	08012b54 	.word	0x08012b54
 8006c14:	200000ac 	.word	0x200000ac
 8006c18:	200000b0 	.word	0x200000b0

08006c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c20:	b094      	sub	sp, #80	@ 0x50
 8006c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c28:	2300      	movs	r3, #0
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c34:	4b79      	ldr	r3, [pc, #484]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d00d      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0x40>
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	f200 80e1 	bhi.w	8006e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_RCC_GetSysClockFreq+0x34>
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c4e:	e0db      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c50:	4b73      	ldr	r3, [pc, #460]	@ (8006e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006c54:	e0db      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c56:	4b73      	ldr	r3, [pc, #460]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c5a:	e0d8      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c64:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c66:	4b6d      	ldr	r3, [pc, #436]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d063      	beq.n	8006d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c72:	4b6a      	ldr	r3, [pc, #424]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	2200      	movs	r2, #0
 8006c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c8e:	4622      	mov	r2, r4
 8006c90:	462b      	mov	r3, r5
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f04f 0100 	mov.w	r1, #0
 8006c9a:	0159      	lsls	r1, r3, #5
 8006c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca0:	0150      	lsls	r0, r2, #5
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	1a51      	subs	r1, r2, r1
 8006caa:	6139      	str	r1, [r7, #16]
 8006cac:	4629      	mov	r1, r5
 8006cae:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cc0:	4659      	mov	r1, fp
 8006cc2:	018b      	lsls	r3, r1, #6
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cca:	4651      	mov	r1, sl
 8006ccc:	018a      	lsls	r2, r1, #6
 8006cce:	4651      	mov	r1, sl
 8006cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cee:	4690      	mov	r8, r2
 8006cf0:	4699      	mov	r9, r3
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	eb18 0303 	adds.w	r3, r8, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	eb49 0303 	adc.w	r3, r9, r3
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d0e:	4629      	mov	r1, r5
 8006d10:	024b      	lsls	r3, r1, #9
 8006d12:	4621      	mov	r1, r4
 8006d14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d18:	4621      	mov	r1, r4
 8006d1a:	024a      	lsls	r2, r1, #9
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d22:	2200      	movs	r2, #0
 8006d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d2c:	f7f9 ff94 	bl	8000c58 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4613      	mov	r3, r2
 8006d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d38:	e058      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d3a:	4b38      	ldr	r3, [pc, #224]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	099b      	lsrs	r3, r3, #6
 8006d40:	2200      	movs	r2, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	4611      	mov	r1, r2
 8006d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	f04f 0000 	mov.w	r0, #0
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	0159      	lsls	r1, r3, #5
 8006d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d66:	0150      	lsls	r0, r2, #5
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d72:	4649      	mov	r1, r9
 8006d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8006d90:	eb63 050b 	sbc.w	r5, r3, fp
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	00eb      	lsls	r3, r5, #3
 8006d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006da2:	00e2      	lsls	r2, r4, #3
 8006da4:	4614      	mov	r4, r2
 8006da6:	461d      	mov	r5, r3
 8006da8:	4643      	mov	r3, r8
 8006daa:	18e3      	adds	r3, r4, r3
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	464b      	mov	r3, r9
 8006db0:	eb45 0303 	adc.w	r3, r5, r3
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	028b      	lsls	r3, r1, #10
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dcc:	4621      	mov	r1, r4
 8006dce:	028a      	lsls	r2, r1, #10
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	61fa      	str	r2, [r7, #28]
 8006ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006de0:	f7f9 ff3a 	bl	8000c58 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dec:	4b0b      	ldr	r3, [pc, #44]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	3301      	adds	r3, #1
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3750      	adds	r7, #80	@ 0x50
 8006e14:	46bd      	mov	sp, r7
 8006e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	00f42400 	.word	0x00f42400
 8006e24:	007a1200 	.word	0x007a1200

08006e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	@ (8006e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	200000ac 	.word	0x200000ac

08006e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e07b      	b.n	8006f4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d108      	bne.n	8006e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e62:	d009      	beq.n	8006e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	61da      	str	r2, [r3, #28]
 8006e6a:	e005      	b.n	8006e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb ffdc 	bl	8002e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	ea42 0103 	orr.w	r1, r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	f003 0104 	and.w	r1, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	f003 0210 	and.w	r2, r3, #16
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_SPI_Transmit+0x22>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e12d      	b.n	80071d0 <HAL_SPI_Transmit+0x27e>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f7c:	f7fd f810 	bl	8003fa0 <HAL_GetTick>
 8006f80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d002      	beq.n	8006f98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
 8006f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f96:	e116      	b.n	80071c6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Transmit+0x52>
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fa8:	e10d      	b.n	80071c6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2203      	movs	r2, #3
 8006fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	88fa      	ldrh	r2, [r7, #6]
 8006fc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff0:	d10f      	bne.n	8007012 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007010:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	d007      	beq.n	8007030 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800702e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007038:	d14f      	bne.n	80070da <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_Transmit+0xf6>
 8007042:	8afb      	ldrh	r3, [r7, #22]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d142      	bne.n	80070ce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800706c:	e02f      	b.n	80070ce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d112      	bne.n	80070a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007080:	881a      	ldrh	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708c:	1c9a      	adds	r2, r3, #2
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070a0:	e015      	b.n	80070ce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a2:	f7fc ff7d 	bl	8003fa0 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d803      	bhi.n	80070ba <HAL_SPI_Transmit+0x168>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d102      	bne.n	80070c0 <HAL_SPI_Transmit+0x16e>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80070cc:	e07b      	b.n	80071c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1ca      	bne.n	800706e <HAL_SPI_Transmit+0x11c>
 80070d8:	e050      	b.n	800717c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_Transmit+0x196>
 80070e2:	8afb      	ldrh	r3, [r7, #22]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d144      	bne.n	8007172 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800710e:	e030      	b.n	8007172 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d113      	bne.n	8007146 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007144:	e015      	b.n	8007172 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007146:	f7fc ff2b 	bl	8003fa0 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d803      	bhi.n	800715e <HAL_SPI_Transmit+0x20c>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d102      	bne.n	8007164 <HAL_SPI_Transmit+0x212>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d106      	bne.n	8007172 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007170:	e029      	b.n	80071c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1c9      	bne.n	8007110 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 fbdf 	bl	8007944 <SPI_EndRxTxTransaction>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	77fb      	strb	r3, [r7, #31]
 80071bc:	e003      	b.n	80071c6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80071ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	4613      	mov	r3, r2
 80071e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d002      	beq.n	80071fe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80071f8:	2302      	movs	r3, #2
 80071fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071fc:	e0fb      	b.n	80073f6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007206:	d112      	bne.n	800722e <HAL_SPI_Receive+0x56>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10e      	bne.n	800722e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2204      	movs	r2, #4
 8007214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007218:	88fa      	ldrh	r2, [r7, #6]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f8ef 	bl	8007408 <HAL_SPI_TransmitReceive>
 800722a:	4603      	mov	r3, r0
 800722c:	e0e8      	b.n	8007400 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_SPI_Receive+0x64>
 8007238:	2302      	movs	r3, #2
 800723a:	e0e1      	b.n	8007400 <HAL_SPI_Receive+0x228>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007244:	f7fc feac 	bl	8003fa0 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Receive+0x7e>
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800725a:	e0cc      	b.n	80073f6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2204      	movs	r2, #4
 8007260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a2:	d10f      	bne.n	80072c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d007      	beq.n	80072e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d16a      	bne.n	80073c0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072ea:	e032      	b.n	8007352 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d115      	bne.n	8007326 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f103 020c 	add.w	r2, r3, #12
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007324:	e015      	b.n	8007352 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007326:	f7fc fe3b 	bl	8003fa0 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d803      	bhi.n	800733e <HAL_SPI_Receive+0x166>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d102      	bne.n	8007344 <HAL_SPI_Receive+0x16c>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007350:	e051      	b.n	80073f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1c7      	bne.n	80072ec <HAL_SPI_Receive+0x114>
 800735c:	e035      	b.n	80073ca <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d113      	bne.n	8007394 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	b292      	uxth	r2, r2
 8007378:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007392:	e015      	b.n	80073c0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007394:	f7fc fe04 	bl	8003fa0 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d803      	bhi.n	80073ac <HAL_SPI_Receive+0x1d4>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d102      	bne.n	80073b2 <HAL_SPI_Receive+0x1da>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80073be:	e01a      	b.n	80073f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1c9      	bne.n	800735e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fa52 	bl	8007878 <SPI_EndRxTransaction>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
 80073ec:	e003      	b.n	80073f6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	@ 0x30
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007416:	2301      	movs	r3, #1
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_SPI_TransmitReceive+0x26>
 800742a:	2302      	movs	r3, #2
 800742c:	e198      	b.n	8007760 <HAL_SPI_TransmitReceive+0x358>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007436:	f7fc fdb3 	bl	8003fa0 <HAL_GetTick>
 800743a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800744c:	887b      	ldrh	r3, [r7, #2]
 800744e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007454:	2b01      	cmp	r3, #1
 8007456:	d00f      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x70>
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800745e:	d107      	bne.n	8007470 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <HAL_SPI_TransmitReceive+0x68>
 8007468:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800746c:	2b04      	cmp	r3, #4
 800746e:	d003      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007470:	2302      	movs	r3, #2
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007476:	e16d      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_SPI_TransmitReceive+0x82>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_SPI_TransmitReceive+0x82>
 8007484:	887b      	ldrh	r3, [r7, #2]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007490:	e160      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b04      	cmp	r3, #4
 800749c:	d003      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2205      	movs	r2, #5
 80074a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	887a      	ldrh	r2, [r7, #2]
 80074b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	887a      	ldrh	r2, [r7, #2]
 80074ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e6:	2b40      	cmp	r3, #64	@ 0x40
 80074e8:	d007      	beq.n	80074fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007502:	d17c      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x10a>
 800750c:	8b7b      	ldrh	r3, [r7, #26]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d16a      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	881a      	ldrh	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007536:	e057      	b.n	80075e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b02      	cmp	r3, #2
 8007544:	d11b      	bne.n	800757e <HAL_SPI_TransmitReceive+0x176>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d016      	beq.n	800757e <HAL_SPI_TransmitReceive+0x176>
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d113      	bne.n	800757e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d119      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x1b8>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d014      	beq.n	80075c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	b292      	uxth	r2, r2
 80075a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075bc:	2301      	movs	r3, #1
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075c0:	f7fc fcee 	bl	8003fa0 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d80b      	bhi.n	80075e8 <HAL_SPI_TransmitReceive+0x1e0>
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d007      	beq.n	80075e8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80075e6:	e0b5      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1a2      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x130>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d19d      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x130>
 80075fc:	e080      	b.n	8007700 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_TransmitReceive+0x204>
 8007606:	8b7b      	ldrh	r3, [r7, #26]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d16f      	bne.n	80076ec <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007632:	e05b      	b.n	80076ec <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d11c      	bne.n	800767c <HAL_SPI_TransmitReceive+0x274>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <HAL_SPI_TransmitReceive+0x274>
 800764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d114      	bne.n	800767c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d119      	bne.n	80076be <HAL_SPI_TransmitReceive+0x2b6>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d014      	beq.n	80076be <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076be:	f7fc fc6f 	bl	8003fa0 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0x2ce>
 80076ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x2d4>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80076ea:	e033      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d19e      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x22c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d199      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007702:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f91d 	bl	8007944 <SPI_EndRxTxTransaction>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800771c:	e01a      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774a:	e003      	b.n	8007754 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800775c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007760:	4618      	mov	r0, r3
 8007762:	3730      	adds	r7, #48	@ 0x30
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007778:	f7fc fc12 	bl	8003fa0 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	4413      	add	r3, r2
 8007786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007788:	f7fc fc0a 	bl	8003fa0 <HAL_GetTick>
 800778c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800778e:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	015b      	lsls	r3, r3, #5
 8007794:	0d1b      	lsrs	r3, r3, #20
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800779e:	e054      	b.n	800784a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d050      	beq.n	800784a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a8:	f7fc fbfa 	bl	8003fa0 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d902      	bls.n	80077be <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d13d      	bne.n	800783a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077d6:	d111      	bne.n	80077fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e0:	d004      	beq.n	80077ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ea:	d107      	bne.n	80077fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007804:	d10f      	bne.n	8007826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e017      	b.n	800786a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3b01      	subs	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4013      	ands	r3, r2
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	bf0c      	ite	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	2300      	movne	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	429a      	cmp	r2, r3
 8007866:	d19b      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200000ac 	.word	0x200000ac

08007878 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800788c:	d111      	bne.n	80078b2 <SPI_EndRxTransaction+0x3a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007896:	d004      	beq.n	80078a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a0:	d107      	bne.n	80078b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ba:	d12a      	bne.n	8007912 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c4:	d012      	beq.n	80078ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2180      	movs	r1, #128	@ 0x80
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff ff49 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d02d      	beq.n	8007938 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e026      	b.n	800793a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2101      	movs	r1, #1
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff ff36 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01a      	beq.n	8007938 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007906:	f043 0220 	orr.w	r2, r3, #32
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e013      	b.n	800793a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2200      	movs	r2, #0
 800791a:	2101      	movs	r1, #1
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ff23 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e000      	b.n	800793a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2201      	movs	r2, #1
 8007958:	2102      	movs	r1, #2
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff ff04 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796a:	f043 0220 	orr.w	r2, r3, #32
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e032      	b.n	80079dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007976:	4b1b      	ldr	r3, [pc, #108]	@ (80079e4 <SPI_EndRxTxTransaction+0xa0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1b      	ldr	r2, [pc, #108]	@ (80079e8 <SPI_EndRxTxTransaction+0xa4>)
 800797c:	fba2 2303 	umull	r2, r3, r2, r3
 8007980:	0d5b      	lsrs	r3, r3, #21
 8007982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007994:	d112      	bne.n	80079bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	2180      	movs	r1, #128	@ 0x80
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fee1 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d016      	beq.n	80079da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e00f      	b.n	80079dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d2:	2b80      	cmp	r3, #128	@ 0x80
 80079d4:	d0f2      	beq.n	80079bc <SPI_EndRxTxTransaction+0x78>
 80079d6:	e000      	b.n	80079da <SPI_EndRxTxTransaction+0x96>
        break;
 80079d8:	bf00      	nop
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200000ac 	.word	0x200000ac
 80079e8:	165e9f81 	.word	0x165e9f81

080079ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e041      	b.n	8007a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fb ffdc 	bl	80039d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f000 fec6 	bl	80087bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d001      	beq.n	8007aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e044      	b.n	8007b2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ace:	d013      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a19      	ldr	r2, [pc, #100]	@ (8007b44 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a17      	ldr	r2, [pc, #92]	@ (8007b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x6c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a16      	ldr	r2, [pc, #88]	@ (8007b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d111      	bne.n	8007b1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d010      	beq.n	8007b2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	e007      	b.n	8007b2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40014000 	.word	0x40014000

08007b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e041      	b.n	8007be6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fc f8ba 	bl	8003cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f000 fe14 	bl	80087bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <HAL_TIM_PWM_Start+0x24>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	bf14      	ite	ne
 8007c0c:	2301      	movne	r3, #1
 8007c0e:	2300      	moveq	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e022      	b.n	8007c5a <HAL_TIM_PWM_Start+0x6a>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d109      	bne.n	8007c2e <HAL_TIM_PWM_Start+0x3e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	bf14      	ite	ne
 8007c26:	2301      	movne	r3, #1
 8007c28:	2300      	moveq	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	e015      	b.n	8007c5a <HAL_TIM_PWM_Start+0x6a>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d109      	bne.n	8007c48 <HAL_TIM_PWM_Start+0x58>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	bf14      	ite	ne
 8007c40:	2301      	movne	r3, #1
 8007c42:	2300      	moveq	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	e008      	b.n	8007c5a <HAL_TIM_PWM_Start+0x6a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	bf14      	ite	ne
 8007c54:	2301      	movne	r3, #1
 8007c56:	2300      	moveq	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e068      	b.n	8007d34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <HAL_TIM_PWM_Start+0x82>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c70:	e013      	b.n	8007c9a <HAL_TIM_PWM_Start+0xaa>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d104      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x92>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c80:	e00b      	b.n	8007c9a <HAL_TIM_PWM_Start+0xaa>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Start+0xa2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c90:	e003      	b.n	8007c9a <HAL_TIM_PWM_Start+0xaa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f83c 	bl	8008d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a23      	ldr	r2, [pc, #140]	@ (8007d3c <HAL_TIM_PWM_Start+0x14c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d107      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d3c <HAL_TIM_PWM_Start+0x14c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <HAL_TIM_PWM_Start+0x10e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd4:	d013      	beq.n	8007cfe <HAL_TIM_PWM_Start+0x10e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <HAL_TIM_PWM_Start+0x150>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIM_PWM_Start+0x10e>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a17      	ldr	r2, [pc, #92]	@ (8007d44 <HAL_TIM_PWM_Start+0x154>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIM_PWM_Start+0x10e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a16      	ldr	r2, [pc, #88]	@ (8007d48 <HAL_TIM_PWM_Start+0x158>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_TIM_PWM_Start+0x10e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a14      	ldr	r2, [pc, #80]	@ (8007d4c <HAL_TIM_PWM_Start+0x15c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d111      	bne.n	8007d22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b06      	cmp	r3, #6
 8007d0e:	d010      	beq.n	8007d32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d20:	e007      	b.n	8007d32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0201 	orr.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000

08007d50 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	e022      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d109      	bne.n	8007d96 <HAL_TIM_PWM_Start_DMA+0x46>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	e015      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x60>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	e008      	b.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e15d      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_PWM_Start_DMA+0x94>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e022      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d109      	bne.n	8007dfe <HAL_TIM_PWM_Start_DMA+0xae>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e015      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d109      	bne.n	8007e18 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	e008      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d024      	beq.n	8007e78 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_TIM_PWM_Start_DMA+0xea>
 8007e34:	887b      	ldrh	r3, [r7, #2]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e123      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_PWM_Start_DMA+0xfe>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e4c:	e016      	b.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x10e>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e5c:	e00e      	b.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Start_DMA+0x11e>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e6c:	e006      	b.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e76:	e001      	b.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e104      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b0c      	cmp	r3, #12
 8007e80:	f200 80ae 	bhi.w	8007fe0 <HAL_TIM_PWM_Start_DMA+0x290>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007fe1 	.word	0x08007fe1
 8007e94:	08007fe1 	.word	0x08007fe1
 8007e98:	08007fe1 	.word	0x08007fe1
 8007e9c:	08007f09 	.word	0x08007f09
 8007ea0:	08007fe1 	.word	0x08007fe1
 8007ea4:	08007fe1 	.word	0x08007fe1
 8007ea8:	08007fe1 	.word	0x08007fe1
 8007eac:	08007f51 	.word	0x08007f51
 8007eb0:	08007fe1 	.word	0x08007fe1
 8007eb4:	08007fe1 	.word	0x08007fe1
 8007eb8:	08007fe1 	.word	0x08007fe1
 8007ebc:	08007f99 	.word	0x08007f99
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	4a72      	ldr	r2, [pc, #456]	@ (8008090 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	4a71      	ldr	r2, [pc, #452]	@ (8008094 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed4:	4a70      	ldr	r2, [pc, #448]	@ (8008098 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007ed6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3334      	adds	r3, #52	@ 0x34
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	887b      	ldrh	r3, [r7, #2]
 8007ee8:	f7fc fa4a 	bl	8004380 <HAL_DMA_Start_IT>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e0c7      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f04:	60da      	str	r2, [r3, #12]
      break;
 8007f06:	e06e      	b.n	8007fe6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	4a60      	ldr	r2, [pc, #384]	@ (8008090 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f14:	4a5f      	ldr	r2, [pc, #380]	@ (8008094 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8008098 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3338      	adds	r3, #56	@ 0x38
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	887b      	ldrh	r3, [r7, #2]
 8007f30:	f7fc fa26 	bl	8004380 <HAL_DMA_Start_IT>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e0a3      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f4c:	60da      	str	r2, [r3, #12]
      break;
 8007f4e:	e04a      	b.n	8007fe6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	4a4e      	ldr	r2, [pc, #312]	@ (8008090 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f56:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8008094 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	4a4c      	ldr	r2, [pc, #304]	@ (8008098 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007f66:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	333c      	adds	r3, #60	@ 0x3c
 8007f74:	461a      	mov	r2, r3
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	f7fc fa02 	bl	8004380 <HAL_DMA_Start_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e07f      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f94:	60da      	str	r2, [r3, #12]
      break;
 8007f96:	e026      	b.n	8007fe6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8008090 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8008094 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fac:	4a3a      	ldr	r2, [pc, #232]	@ (8008098 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007fae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3340      	adds	r3, #64	@ 0x40
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	887b      	ldrh	r3, [r7, #2]
 8007fc0:	f7fc f9de 	bl	8004380 <HAL_DMA_Start_IT>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e05b      	b.n	8008086 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fdc:	60da      	str	r2, [r3, #12]
      break;
 8007fde:	e002      	b.n	8007fe6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d14b      	bne.n	8008084 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fe93 	bl	8008d20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a27      	ldr	r2, [pc, #156]	@ (800809c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d107      	bne.n	8008014 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a20      	ldr	r2, [pc, #128]	@ (800809c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d018      	beq.n	8008050 <HAL_TIM_PWM_Start_DMA+0x300>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	d013      	beq.n	8008050 <HAL_TIM_PWM_Start_DMA+0x300>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00e      	beq.n	8008050 <HAL_TIM_PWM_Start_DMA+0x300>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1b      	ldr	r2, [pc, #108]	@ (80080a4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <HAL_TIM_PWM_Start_DMA+0x300>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a19      	ldr	r2, [pc, #100]	@ (80080a8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIM_PWM_Start_DMA+0x300>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <HAL_TIM_PWM_Start_DMA+0x35c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d111      	bne.n	8008074 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b06      	cmp	r3, #6
 8008060:	d010      	beq.n	8008084 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0201 	orr.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008072:	e007      	b.n	8008084 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	080086ad 	.word	0x080086ad
 8008094:	08008755 	.word	0x08008755
 8008098:	0800861b 	.word	0x0800861b
 800809c:	40010000 	.word	0x40010000
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40000c00 	.word	0x40000c00
 80080ac:	40014000 	.word	0x40014000

080080b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d020      	beq.n	8008114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01b      	beq.n	8008114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0202 	mvn.w	r2, #2
 80080e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa5b 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa4d 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa5e 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d020      	beq.n	8008160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0204 	mvn.w	r2, #4
 8008130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa35 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 800814c:	e005      	b.n	800815a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa27 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fa38 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01b      	beq.n	80081ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0208 	mvn.w	r2, #8
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa0f 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa01 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fa12 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0210 	mvn.w	r2, #16
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2208      	movs	r2, #8
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9e9 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9db 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f9ec 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00c      	beq.n	800821c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0201 	mvn.w	r2, #1
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fa fb28 	bl	800286c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fe0e 	bl	8008e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800825c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9c7 	bl	80085f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0220 	mvn.w	r2, #32
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fde0 	bl	8008e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e0ae      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	f200 809f 	bhi.w	80083fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080083fd 	.word	0x080083fd
 80082cc:	080083fd 	.word	0x080083fd
 80082d0:	080083fd 	.word	0x080083fd
 80082d4:	08008339 	.word	0x08008339
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	080083fd 	.word	0x080083fd
 80082e0:	080083fd 	.word	0x080083fd
 80082e4:	0800837b 	.word	0x0800837b
 80082e8:	080083fd 	.word	0x080083fd
 80082ec:	080083fd 	.word	0x080083fd
 80082f0:	080083fd 	.word	0x080083fd
 80082f4:	080083bb 	.word	0x080083bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fae8 	bl	80088d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e064      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb2e 	bl	80089a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e043      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb79 	bl	8008a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e023      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fbc3 	bl	8008b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e002      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIM_ConfigClockSource+0x1c>
 800842c:	2302      	movs	r3, #2
 800842e:	e0b4      	b.n	800859a <HAL_TIM_ConfigClockSource+0x186>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800844e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008468:	d03e      	beq.n	80084e8 <HAL_TIM_ConfigClockSource+0xd4>
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846e:	f200 8087 	bhi.w	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008476:	f000 8086 	beq.w	8008586 <HAL_TIM_ConfigClockSource+0x172>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847e:	d87f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b70      	cmp	r3, #112	@ 0x70
 8008482:	d01a      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0xa6>
 8008484:	2b70      	cmp	r3, #112	@ 0x70
 8008486:	d87b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b60      	cmp	r3, #96	@ 0x60
 800848a:	d050      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x11a>
 800848c:	2b60      	cmp	r3, #96	@ 0x60
 800848e:	d877      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b50      	cmp	r3, #80	@ 0x50
 8008492:	d03c      	beq.n	800850e <HAL_TIM_ConfigClockSource+0xfa>
 8008494:	2b50      	cmp	r3, #80	@ 0x50
 8008496:	d873      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b40      	cmp	r3, #64	@ 0x40
 800849a:	d058      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x13a>
 800849c:	2b40      	cmp	r3, #64	@ 0x40
 800849e:	d86f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b30      	cmp	r3, #48	@ 0x30
 80084a2:	d064      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b30      	cmp	r3, #48	@ 0x30
 80084a6:	d86b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d060      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d867      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05c      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d05a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b8:	e062      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084ca:	f000 fc09 	bl	8008ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	609a      	str	r2, [r3, #8]
      break;
 80084e6:	e04f      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	f000 fbf2 	bl	8008ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800850a:	609a      	str	r2, [r3, #8]
      break;
 800850c:	e03c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851a:	461a      	mov	r2, r3
 800851c:	f000 fb66 	bl	8008bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2150      	movs	r1, #80	@ 0x50
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fbbf 	bl	8008caa <TIM_ITRx_SetConfig>
      break;
 800852c:	e02c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800853a:	461a      	mov	r2, r3
 800853c:	f000 fb85 	bl	8008c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2160      	movs	r1, #96	@ 0x60
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fbaf 	bl	8008caa <TIM_ITRx_SetConfig>
      break;
 800854c:	e01c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fb46 	bl	8008bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2140      	movs	r1, #64	@ 0x40
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fb9f 	bl	8008caa <TIM_ITRx_SetConfig>
      break;
 800856c:	e00c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f000 fb96 	bl	8008caa <TIM_ITRx_SetConfig>
      break;
 800857e:	e003      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e000      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d107      	bne.n	8008642 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008640:	e02a      	b.n	8008698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d107      	bne.n	800865c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2202      	movs	r2, #2
 8008650:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800865a:	e01d      	b.n	8008698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d107      	bne.n	8008676 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2204      	movs	r2, #4
 800866a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008674:	e010      	b.n	8008698 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d107      	bne.n	8008690 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2208      	movs	r2, #8
 8008684:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800868e:	e003      	b.n	8008698 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff ffb4 	bl	8008606 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
}
 80086a4:	bf00      	nop
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d10b      	bne.n	80086dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d136      	bne.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086da:	e031      	b.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d10b      	bne.n	80086fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2202      	movs	r2, #2
 80086ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d125      	bne.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086fc:	e020      	b.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d10b      	bne.n	8008720 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2204      	movs	r2, #4
 800870c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d114      	bne.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800871e:	e00f      	b.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d10a      	bne.n	8008740 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2208      	movs	r2, #8
 800872e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d103      	bne.n	8008740 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ff42 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	771a      	strb	r2, [r3, #28]
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d103      	bne.n	8008774 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	771a      	strb	r2, [r3, #28]
 8008772:	e019      	b.n	80087a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	429a      	cmp	r2, r3
 800877c:	d103      	bne.n	8008786 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	771a      	strb	r2, [r3, #28]
 8008784:	e010      	b.n	80087a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d103      	bne.n	8008798 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2204      	movs	r2, #4
 8008794:	771a      	strb	r2, [r3, #28]
 8008796:	e007      	b.n	80087a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d102      	bne.n	80087a8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2208      	movs	r2, #8
 80087a6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff ff18 	bl	80085de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
}
 80087b4:	bf00      	nop
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a3a      	ldr	r2, [pc, #232]	@ (80088b8 <TIM_Base_SetConfig+0xfc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00f      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087da:	d00b      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a37      	ldr	r2, [pc, #220]	@ (80088bc <TIM_Base_SetConfig+0x100>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d007      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a36      	ldr	r2, [pc, #216]	@ (80088c0 <TIM_Base_SetConfig+0x104>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_Base_SetConfig+0x38>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a35      	ldr	r2, [pc, #212]	@ (80088c4 <TIM_Base_SetConfig+0x108>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d108      	bne.n	8008806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2b      	ldr	r2, [pc, #172]	@ (80088b8 <TIM_Base_SetConfig+0xfc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01b      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008814:	d017      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a28      	ldr	r2, [pc, #160]	@ (80088bc <TIM_Base_SetConfig+0x100>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a27      	ldr	r2, [pc, #156]	@ (80088c0 <TIM_Base_SetConfig+0x104>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00f      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a26      	ldr	r2, [pc, #152]	@ (80088c4 <TIM_Base_SetConfig+0x108>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00b      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a25      	ldr	r2, [pc, #148]	@ (80088c8 <TIM_Base_SetConfig+0x10c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d007      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a24      	ldr	r2, [pc, #144]	@ (80088cc <TIM_Base_SetConfig+0x110>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_Base_SetConfig+0x8a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a23      	ldr	r2, [pc, #140]	@ (80088d0 <TIM_Base_SetConfig+0x114>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d108      	bne.n	8008858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800884c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a0e      	ldr	r2, [pc, #56]	@ (80088b8 <TIM_Base_SetConfig+0xfc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d103      	bne.n	800888c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b01      	cmp	r3, #1
 800889c:	d105      	bne.n	80088aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]
  }
}
 80088aa:	bf00      	nop
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40010000 	.word	0x40010000
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	40014000 	.word	0x40014000
 80088cc:	40014400 	.word	0x40014400
 80088d0:	40014800 	.word	0x40014800

080088d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	f023 0201 	bic.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0303 	bic.w	r3, r3, #3
 800890a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f023 0302 	bic.w	r3, r3, #2
 800891c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1c      	ldr	r2, [pc, #112]	@ (800899c <TIM_OC1_SetConfig+0xc8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d10c      	bne.n	800894a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f023 0308 	bic.w	r3, r3, #8
 8008936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 0304 	bic.w	r3, r3, #4
 8008948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a13      	ldr	r2, [pc, #76]	@ (800899c <TIM_OC1_SetConfig+0xc8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d111      	bne.n	8008976 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	621a      	str	r2, [r3, #32]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40010000 	.word	0x40010000

080089a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	f023 0210 	bic.w	r2, r3, #16
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f023 0320 	bic.w	r3, r3, #32
 80089ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008a74 <TIM_OC2_SetConfig+0xd4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10d      	bne.n	8008a1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a15      	ldr	r2, [pc, #84]	@ (8008a74 <TIM_OC2_SetConfig+0xd4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d113      	bne.n	8008a4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000

08008a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b48 <TIM_OC3_SetConfig+0xd0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d10d      	bne.n	8008af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a14      	ldr	r2, [pc, #80]	@ (8008b48 <TIM_OC3_SetConfig+0xd0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d113      	bne.n	8008b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	40010000 	.word	0x40010000

08008b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	031b      	lsls	r3, r3, #12
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a10      	ldr	r2, [pc, #64]	@ (8008be8 <TIM_OC4_SetConfig+0x9c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d109      	bne.n	8008bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	019b      	lsls	r3, r3, #6
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000

08008bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	f023 0201 	bic.w	r2, r3, #1
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 030a 	bic.w	r3, r3, #10
 8008c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b087      	sub	sp, #28
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	f023 0210 	bic.w	r2, r3, #16
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	031b      	lsls	r3, r3, #12
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	f043 0307 	orr.w	r3, r3, #7
 8008ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	609a      	str	r2, [r3, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	021a      	lsls	r2, r3, #8
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	609a      	str	r2, [r3, #8]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f003 031f 	and.w	r3, r3, #31
 8008d32:	2201      	movs	r2, #1
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a1a      	ldr	r2, [r3, #32]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	43db      	mvns	r3, r3
 8008d42:	401a      	ands	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1a      	ldr	r2, [r3, #32]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	fa01 f303 	lsl.w	r3, r1, r3
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e050      	b.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d018      	beq.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd0:	d013      	beq.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a18      	ldr	r2, [pc, #96]	@ (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00e      	beq.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a16      	ldr	r2, [pc, #88]	@ (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d009      	beq.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a15      	ldr	r2, [pc, #84]	@ (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d004      	beq.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a13      	ldr	r2, [pc, #76]	@ (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d10c      	bne.n	8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40000400 	.word	0x40000400
 8008e3c:	40000800 	.word	0x40000800
 8008e40:	40000c00 	.word	0x40000c00
 8008e44:	40014000 	.word	0x40014000

08008e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e70:	b084      	sub	sp, #16
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	f107 001c 	add.w	r0, r7, #28
 8008e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d123      	bne.n	8008ed2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d105      	bne.n	8008ec6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fae2 	bl	800a490 <USB_CoreReset>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e01b      	b.n	8008f0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 fad6 	bl	800a490 <USB_CoreReset>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ee8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	@ 0x38
 8008efc:	e005      	b.n	8008f0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f0a:	7fbb      	ldrb	r3, [r7, #30]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d10b      	bne.n	8008f28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f043 0206 	orr.w	r2, r3, #6
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f043 0220 	orr.w	r2, r3, #32
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f34:	b004      	add	sp, #16
 8008f36:	4770      	bx	lr

08008f38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d165      	bne.n	8009018 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4a41      	ldr	r2, [pc, #260]	@ (8009054 <USB_SetTurnaroundTime+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d906      	bls.n	8008f62 <USB_SetTurnaroundTime+0x2a>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4a40      	ldr	r2, [pc, #256]	@ (8009058 <USB_SetTurnaroundTime+0x120>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d202      	bcs.n	8008f62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f5c:	230f      	movs	r3, #15
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e062      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a3c      	ldr	r2, [pc, #240]	@ (8009058 <USB_SetTurnaroundTime+0x120>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d306      	bcc.n	8008f78 <USB_SetTurnaroundTime+0x40>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800905c <USB_SetTurnaroundTime+0x124>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d202      	bcs.n	8008f78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f72:	230e      	movs	r3, #14
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e057      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4a38      	ldr	r2, [pc, #224]	@ (800905c <USB_SetTurnaroundTime+0x124>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d306      	bcc.n	8008f8e <USB_SetTurnaroundTime+0x56>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a37      	ldr	r2, [pc, #220]	@ (8009060 <USB_SetTurnaroundTime+0x128>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d202      	bcs.n	8008f8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f88:	230d      	movs	r3, #13
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e04c      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4a33      	ldr	r2, [pc, #204]	@ (8009060 <USB_SetTurnaroundTime+0x128>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d306      	bcc.n	8008fa4 <USB_SetTurnaroundTime+0x6c>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a32      	ldr	r2, [pc, #200]	@ (8009064 <USB_SetTurnaroundTime+0x12c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d802      	bhi.n	8008fa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	e041      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8009064 <USB_SetTurnaroundTime+0x12c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d906      	bls.n	8008fba <USB_SetTurnaroundTime+0x82>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4a2e      	ldr	r2, [pc, #184]	@ (8009068 <USB_SetTurnaroundTime+0x130>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d802      	bhi.n	8008fba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008fb4:	230b      	movs	r3, #11
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e036      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8009068 <USB_SetTurnaroundTime+0x130>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d906      	bls.n	8008fd0 <USB_SetTurnaroundTime+0x98>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4a29      	ldr	r2, [pc, #164]	@ (800906c <USB_SetTurnaroundTime+0x134>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d802      	bhi.n	8008fd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008fca:	230a      	movs	r3, #10
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e02b      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4a26      	ldr	r2, [pc, #152]	@ (800906c <USB_SetTurnaroundTime+0x134>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d906      	bls.n	8008fe6 <USB_SetTurnaroundTime+0xae>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4a25      	ldr	r2, [pc, #148]	@ (8009070 <USB_SetTurnaroundTime+0x138>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d202      	bcs.n	8008fe6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fe0:	2309      	movs	r3, #9
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	e020      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a21      	ldr	r2, [pc, #132]	@ (8009070 <USB_SetTurnaroundTime+0x138>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d306      	bcc.n	8008ffc <USB_SetTurnaroundTime+0xc4>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4a20      	ldr	r2, [pc, #128]	@ (8009074 <USB_SetTurnaroundTime+0x13c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d802      	bhi.n	8008ffc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e015      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8009074 <USB_SetTurnaroundTime+0x13c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d906      	bls.n	8009012 <USB_SetTurnaroundTime+0xda>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4a1c      	ldr	r2, [pc, #112]	@ (8009078 <USB_SetTurnaroundTime+0x140>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d202      	bcs.n	8009012 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800900c:	2307      	movs	r3, #7
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	e00a      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009012:	2306      	movs	r3, #6
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e007      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800901e:	2309      	movs	r3, #9
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	e001      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009024:	2309      	movs	r3, #9
 8009026:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	029b      	lsls	r3, r3, #10
 800903c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009040:	431a      	orrs	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	00d8acbf 	.word	0x00d8acbf
 8009058:	00e4e1c0 	.word	0x00e4e1c0
 800905c:	00f42400 	.word	0x00f42400
 8009060:	01067380 	.word	0x01067380
 8009064:	011a499f 	.word	0x011a499f
 8009068:	01312cff 	.word	0x01312cff
 800906c:	014ca43f 	.word	0x014ca43f
 8009070:	016e3600 	.word	0x016e3600
 8009074:	01a6ab1f 	.word	0x01a6ab1f
 8009078:	01e84800 	.word	0x01e84800

0800907c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f043 0201 	orr.w	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f023 0201 	bic.w	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d115      	bne.n	800910e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090ee:	200a      	movs	r0, #10
 80090f0:	f7fa ff62 	bl	8003fb8 <HAL_Delay>
      ms += 10U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	330a      	adds	r3, #10
 80090f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 f939 	bl	800a372 <USB_GetMode>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d01e      	beq.n	8009144 <USB_SetCurrentMode+0x84>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2bc7      	cmp	r3, #199	@ 0xc7
 800910a:	d9f0      	bls.n	80090ee <USB_SetCurrentMode+0x2e>
 800910c:	e01a      	b.n	8009144 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d115      	bne.n	8009140 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009120:	200a      	movs	r0, #10
 8009122:	f7fa ff49 	bl	8003fb8 <HAL_Delay>
      ms += 10U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	330a      	adds	r3, #10
 800912a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f920 	bl	800a372 <USB_GetMode>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <USB_SetCurrentMode+0x84>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2bc7      	cmp	r3, #199	@ 0xc7
 800913c:	d9f0      	bls.n	8009120 <USB_SetCurrentMode+0x60>
 800913e:	e001      	b.n	8009144 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e005      	b.n	8009150 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2bc8      	cmp	r3, #200	@ 0xc8
 8009148:	d101      	bne.n	800914e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009158:	b084      	sub	sp, #16
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	e009      	b.n	800918c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3340      	adds	r3, #64	@ 0x40
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	2200      	movs	r2, #0
 8009184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b0e      	cmp	r3, #14
 8009190:	d9f2      	bls.n	8009178 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009192:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009196:	2b00      	cmp	r3, #0
 8009198:	d11c      	bne.n	80091d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80091d2:	e00b      	b.n	80091ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f2:	461a      	mov	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10d      	bne.n	800921c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f968 	bl	80094e0 <USB_SetDevSpeed>
 8009210:	e008      	b.n	8009224 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009212:	2101      	movs	r1, #1
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f963 	bl	80094e0 <USB_SetDevSpeed>
 800921a:	e003      	b.n	8009224 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800921c:	2103      	movs	r1, #3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f95e 	bl	80094e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009224:	2110      	movs	r1, #16
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8fa 	bl	8009420 <USB_FlushTxFifo>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f924 	bl	8009484 <USB_FlushRxFifo>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800924c:	461a      	mov	r2, r3
 800924e:	2300      	movs	r3, #0
 8009250:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009258:	461a      	mov	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009264:	461a      	mov	r2, r3
 8009266:	2300      	movs	r3, #0
 8009268:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	e043      	b.n	80092f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009286:	d118      	bne.n	80092ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e013      	b.n	80092cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e008      	b.n	80092cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c6:	461a      	mov	r2, r3
 80092c8:	2300      	movs	r3, #0
 80092ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ea:	461a      	mov	r2, r3
 80092ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092fc:	461a      	mov	r2, r3
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4293      	cmp	r3, r2
 8009302:	d3b5      	bcc.n	8009270 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009304:	2300      	movs	r3, #0
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	e043      	b.n	8009392 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800931c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009320:	d118      	bne.n	8009354 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e013      	b.n	8009366 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	461a      	mov	r2, r3
 800934c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	e008      	b.n	8009366 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009360:	461a      	mov	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009384:	461a      	mov	r2, r3
 8009386:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800938a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3301      	adds	r3, #1
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009396:	461a      	mov	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4293      	cmp	r3, r2
 800939c:	d3b5      	bcc.n	800930a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80093be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d105      	bne.n	80093d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f043 0210 	orr.w	r2, r3, #16
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699a      	ldr	r2, [r3, #24]
 80093d8:	4b10      	ldr	r3, [pc, #64]	@ (800941c <USB_DevInit+0x2c4>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f043 0208 	orr.w	r2, r3, #8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009404:	f043 0304 	orr.w	r3, r3, #4
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009418:	b004      	add	sp, #16
 800941a:	4770      	bx	lr
 800941c:	803c3800 	.word	0x803c3800

08009420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800943a:	d901      	bls.n	8009440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e01b      	b.n	8009478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	daf2      	bge.n	800942e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	019b      	lsls	r3, r3, #6
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009464:	d901      	bls.n	800946a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e006      	b.n	8009478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b20      	cmp	r3, #32
 8009474:	d0f0      	beq.n	8009458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800949c:	d901      	bls.n	80094a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e018      	b.n	80094d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	daf2      	bge.n	8009490 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2210      	movs	r2, #16
 80094b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c0:	d901      	bls.n	80094c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e006      	b.n	80094d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d0f0      	beq.n	80094b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009500:	4313      	orrs	r3, r2
 8009502:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0306 	and.w	r3, r3, #6
 800952a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
 8009536:	e00a      	b.n	800954e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d002      	beq.n	8009544 <USB_GetDevSpeed+0x32>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b06      	cmp	r3, #6
 8009542:	d102      	bne.n	800954a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009544:	2302      	movs	r3, #2
 8009546:	75fb      	strb	r3, [r7, #23]
 8009548:	e001      	b.n	800954e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800954a:	230f      	movs	r3, #15
 800954c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009550:	4618      	mov	r0, r3
 8009552:	371c      	adds	r7, #28
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d13a      	bne.n	80095ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009596:	4313      	orrs	r3, r2
 8009598:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d155      	bne.n	800965c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	059b      	lsls	r3, r3, #22
 80095d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095d4:	4313      	orrs	r3, r2
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e036      	b.n	800965c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	2101      	movs	r1, #1
 8009600:	fa01 f303 	lsl.w	r3, r1, r3
 8009604:	041b      	lsls	r3, r3, #16
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800960c:	4313      	orrs	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d11a      	bne.n	800965c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	791b      	ldrb	r3, [r3, #4]
 8009640:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009642:	430b      	orrs	r3, r1
 8009644:	4313      	orrs	r3, r2
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800965a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d161      	bne.n	800974c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800969a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800969e:	d11f      	bne.n	80096e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	2101      	movs	r1, #1
 80096f2:	fa01 f303 	lsl.w	r3, r1, r3
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	43db      	mvns	r3, r3
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009700:	4013      	ands	r3, r2
 8009702:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970a:	69da      	ldr	r2, [r3, #28]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	2101      	movs	r1, #1
 8009716:	fa01 f303 	lsl.w	r3, r1, r3
 800971a:	b29b      	uxth	r3, r3
 800971c:	43db      	mvns	r3, r3
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009724:	4013      	ands	r3, r2
 8009726:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	0159      	lsls	r1, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	440b      	add	r3, r1
 800973e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009742:	4619      	mov	r1, r3
 8009744:	4b35      	ldr	r3, [pc, #212]	@ (800981c <USB_DeactivateEndpoint+0x1b0>)
 8009746:	4013      	ands	r3, r2
 8009748:	600b      	str	r3, [r1, #0]
 800974a:	e060      	b.n	800980e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800975e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009762:	d11f      	bne.n	80097a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	0151      	lsls	r1, r2, #5
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	440a      	add	r2, r1
 800977a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800977e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009782:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	440a      	add	r2, r1
 800979a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800979e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	2101      	movs	r1, #1
 80097b6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	43db      	mvns	r3, r3
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097c4:	4013      	ands	r3, r2
 80097c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	2101      	movs	r1, #1
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	041b      	lsls	r3, r3, #16
 80097e0:	43db      	mvns	r3, r3
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097e8:	4013      	ands	r3, r2
 80097ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	0159      	lsls	r1, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	440b      	add	r3, r1
 8009802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009806:	4619      	mov	r1, r3
 8009808:	4b05      	ldr	r3, [pc, #20]	@ (8009820 <USB_DeactivateEndpoint+0x1b4>)
 800980a:	4013      	ands	r3, r2
 800980c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	ec337800 	.word	0xec337800
 8009820:	eff37800 	.word	0xeff37800

08009824 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	@ 0x28
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b01      	cmp	r3, #1
 8009842:	f040 817a 	bne.w	8009b3a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d132      	bne.n	80098b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009868:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800986c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800988c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ac:	0cdb      	lsrs	r3, r3, #19
 80098ae:	04db      	lsls	r3, r3, #19
 80098b0:	6113      	str	r3, [r2, #16]
 80098b2:	e092      	b.n	80099da <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	0151      	lsls	r1, r2, #5
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	440a      	add	r2, r1
 80098ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ce:	0cdb      	lsrs	r3, r3, #19
 80098d0:	04db      	lsls	r3, r3, #19
 80098d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80098f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d11a      	bne.n	8009934 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800992c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009930:	6113      	str	r3, [r2, #16]
 8009932:	e01b      	b.n	800996c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009940:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6919      	ldr	r1, [r3, #16]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	440b      	add	r3, r1
 800994c:	1e59      	subs	r1, r3, #1
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	fbb1 f3f3 	udiv	r3, r1, r3
 8009956:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009958:	4ba2      	ldr	r3, [pc, #648]	@ (8009be4 <USB_EPStartXfer+0x3c0>)
 800995a:	400b      	ands	r3, r1
 800995c:	69b9      	ldr	r1, [r7, #24]
 800995e:	0148      	lsls	r0, r1, #5
 8009960:	69f9      	ldr	r1, [r7, #28]
 8009962:	4401      	add	r1, r0
 8009964:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009968:	4313      	orrs	r3, r2
 800996a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009982:	69b9      	ldr	r1, [r7, #24]
 8009984:	0148      	lsls	r0, r1, #5
 8009986:	69f9      	ldr	r1, [r7, #28]
 8009988:	4401      	add	r1, r0
 800998a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800998e:	4313      	orrs	r3, r2
 8009990:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	791b      	ldrb	r3, [r3, #4]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d11f      	bne.n	80099da <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	0151      	lsls	r1, r2, #5
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	440a      	add	r2, r1
 80099b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099b4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80099b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d14b      	bne.n	8009a78 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d009      	beq.n	80099fc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f4:	461a      	mov	r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	791b      	ldrb	r3, [r3, #4]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d128      	bne.n	8009a56 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d110      	bne.n	8009a36 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	69fa      	ldr	r2, [r7, #28]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e00f      	b.n	8009a56 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	0151      	lsls	r1, r2, #5
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	440a      	add	r2, r1
 8009a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e165      	b.n	8009d44 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	791b      	ldrb	r3, [r3, #4]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d015      	beq.n	8009acc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 814d 	beq.w	8009d44 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	2101      	movs	r1, #1
 8009abc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	634b      	str	r3, [r1, #52]	@ 0x34
 8009aca:	e13b      	b.n	8009d44 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d110      	bne.n	8009afe <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009af6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	e00f      	b.n	8009b1e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	68d9      	ldr	r1, [r3, #12]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	b298      	uxth	r0, r3
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	4603      	mov	r3, r0
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f9b8 	bl	8009ea8 <USB_WritePacket>
 8009b38:	e104      	b.n	8009d44 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b54:	0cdb      	lsrs	r3, r3, #19
 8009b56:	04db      	lsls	r3, r3, #19
 8009b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	0151      	lsls	r1, r2, #5
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	440a      	add	r2, r1
 8009b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b7c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d131      	bne.n	8009be8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba8:	691a      	ldr	r2, [r3, #16]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bb2:	69b9      	ldr	r1, [r7, #24]
 8009bb4:	0148      	lsls	r0, r1, #5
 8009bb6:	69f9      	ldr	r1, [r7, #28]
 8009bb8:	4401      	add	r1, r0
 8009bba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009be0:	6113      	str	r3, [r2, #16]
 8009be2:	e061      	b.n	8009ca8 <USB_EPStartXfer+0x484>
 8009be4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d123      	bne.n	8009c38 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	0148      	lsls	r0, r1, #5
 8009c0a:	69f9      	ldr	r1, [r7, #28]
 8009c0c:	4401      	add	r1, r0
 8009c0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c12:	4313      	orrs	r3, r2
 8009c14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	0151      	lsls	r1, r2, #5
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c34:	6113      	str	r3, [r2, #16]
 8009c36:	e037      	b.n	8009ca8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	1e5a      	subs	r2, r3, #1
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	8afa      	ldrh	r2, [r7, #22]
 8009c54:	fb03 f202 	mul.w	r2, r3, r2
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c68:	691a      	ldr	r2, [r3, #16]
 8009c6a:	8afb      	ldrh	r3, [r7, #22]
 8009c6c:	04d9      	lsls	r1, r3, #19
 8009c6e:	4b38      	ldr	r3, [pc, #224]	@ (8009d50 <USB_EPStartXfer+0x52c>)
 8009c70:	400b      	ands	r3, r1
 8009c72:	69b9      	ldr	r1, [r7, #24]
 8009c74:	0148      	lsls	r0, r1, #5
 8009c76:	69f9      	ldr	r1, [r7, #28]
 8009c78:	4401      	add	r1, r0
 8009c7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8e:	691a      	ldr	r2, [r3, #16]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c98:	69b9      	ldr	r1, [r7, #24]
 8009c9a:	0148      	lsls	r0, r1, #5
 8009c9c:	69f9      	ldr	r1, [r7, #28]
 8009c9e:	4401      	add	r1, r0
 8009ca0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10d      	bne.n	8009cca <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d009      	beq.n	8009cca <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	68d9      	ldr	r1, [r3, #12]
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	791b      	ldrb	r3, [r3, #4]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d128      	bne.n	8009d24 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d110      	bne.n	8009d04 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	0151      	lsls	r1, r2, #5
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	440a      	add	r2, r1
 8009cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	e00f      	b.n	8009d24 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	0151      	lsls	r1, r2, #5
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	440a      	add	r2, r1
 8009d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	1ff80000 	.word	0x1ff80000

08009d54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d14a      	bne.n	8009e08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d8a:	f040 8086 	bne.w	8009e9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	7812      	ldrb	r2, [r2, #0]
 8009da2:	0151      	lsls	r1, r2, #5
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	440a      	add	r2, r1
 8009da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009db0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	0151      	lsls	r1, r2, #5
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	440a      	add	r2, r1
 8009dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d902      	bls.n	8009dec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dea:	e056      	b.n	8009e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e04:	d0e7      	beq.n	8009dd6 <USB_EPStopXfer+0x82>
 8009e06:	e048      	b.n	8009e9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e20:	d13b      	bne.n	8009e9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	7812      	ldrb	r2, [r2, #0]
 8009e36:	0151      	lsls	r1, r2, #5
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	440a      	add	r2, r1
 8009e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	0151      	lsls	r1, r2, #5
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	440a      	add	r2, r1
 8009e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d902      	bls.n	8009e80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7e:	e00c      	b.n	8009e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e98:	d0e7      	beq.n	8009e6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b089      	sub	sp, #36	@ 0x24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	71fb      	strb	r3, [r7, #7]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d123      	bne.n	8009f16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	3303      	adds	r3, #3
 8009ed2:	089b      	lsrs	r3, r3, #2
 8009ed4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61bb      	str	r3, [r7, #24]
 8009eda:	e018      	b.n	8009f0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	031a      	lsls	r2, r3, #12
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee8:	461a      	mov	r2, r3
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	3301      	adds	r3, #1
 8009f00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	3301      	adds	r3, #1
 8009f06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d3e2      	bcc.n	8009edc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3724      	adds	r7, #36	@ 0x24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b08b      	sub	sp, #44	@ 0x2c
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f3a:	88fb      	ldrh	r3, [r7, #6]
 8009f3c:	089b      	lsrs	r3, r3, #2
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	f003 0303 	and.w	r3, r3, #3
 8009f48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	623b      	str	r3, [r7, #32]
 8009f4e:	e014      	b.n	8009f7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5e:	3301      	adds	r3, #1
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	3301      	adds	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	3301      	adds	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	3301      	adds	r3, #1
 8009f78:	623b      	str	r3, [r7, #32]
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d3e6      	bcc.n	8009f50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f82:	8bfb      	ldrh	r3, [r7, #30]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01e      	beq.n	8009fc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f92:	461a      	mov	r2, r3
 8009f94:	f107 0310 	add.w	r3, r7, #16
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	701a      	strb	r2, [r3, #0]
      i++;
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009fba:	8bfb      	ldrh	r3, [r7, #30]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009fc0:	8bfb      	ldrh	r3, [r7, #30]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1ea      	bne.n	8009f9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	372c      	adds	r7, #44	@ 0x2c
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d12c      	bne.n	800a04a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	db12      	blt.n	800a028 <USB_EPSetStall+0x54>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00f      	beq.n	800a028 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a022:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a026:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a042:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e02b      	b.n	800a0a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db12      	blt.n	800a082 <USB_EPSetStall+0xae>
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00f      	beq.n	800a082 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	440a      	add	r2, r1
 800a078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a07c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a080:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a09c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d128      	bne.n	800a11e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	791b      	ldrb	r3, [r3, #4]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d003      	beq.n	800a0fc <USB_EPClearStall+0x4c>
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	791b      	ldrb	r3, [r3, #4]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d138      	bne.n	800a16e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	0151      	lsls	r1, r2, #5
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	440a      	add	r2, r1
 800a112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	e027      	b.n	800a16e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a138:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a13c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	791b      	ldrb	r3, [r3, #4]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d003      	beq.n	800a14e <USB_EPClearStall+0x9e>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	791b      	ldrb	r3, [r3, #4]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d10f      	bne.n	800a16e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a16c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a19a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a19e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a1b0:	68f9      	ldr	r1, [r7, #12]
 800a1b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1f6:	f023 0302 	bic.w	r3, r3, #2
 800a1fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4013      	ands	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a264:	68fb      	ldr	r3, [r7, #12]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	4013      	ands	r3, r2
 800a294:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	0c1b      	lsrs	r3, r3, #16
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	b29b      	uxth	r3, r3
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	4013      	ands	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a308:	68bb      	ldr	r3, [r7, #8]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a316:	b480      	push	{r7}
 800a318:	b087      	sub	sp, #28
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	460b      	mov	r3, r1
 800a320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a338:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	f003 030f 	and.w	r3, r3, #15
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	fa22 f303 	lsr.w	r3, r2, r3
 800a346:	01db      	lsls	r3, r3, #7
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4013      	ands	r3, r2
 800a362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a364:	68bb      	ldr	r3, [r7, #8]
}
 800a366:	4618      	mov	r0, r3
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	f003 0301 	and.w	r3, r3, #1
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a3ac:	f023 0307 	bic.w	r3, r3, #7
 800a3b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	333c      	adds	r3, #60	@ 0x3c
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4a26      	ldr	r2, [pc, #152]	@ (800a48c <USB_EP0_OutStart+0xb8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d90a      	bls.n	800a40e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a408:	d101      	bne.n	800a40e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	e037      	b.n	800a47e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a414:	461a      	mov	r2, r3
 800a416:	2300      	movs	r3, #0
 800a418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a428:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a42c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a43c:	f043 0318 	orr.w	r3, r3, #24
 800a440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a450:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a454:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a456:	7afb      	ldrb	r3, [r7, #11]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d10f      	bne.n	800a47c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a462:	461a      	mov	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a476:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a47a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	4f54300a 	.word	0x4f54300a

0800a490 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4a8:	d901      	bls.n	800a4ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e01b      	b.n	800a4e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	daf2      	bge.n	800a49c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f043 0201 	orr.w	r2, r3, #1
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4d2:	d901      	bls.n	800a4d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e006      	b.n	800a4e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d0f0      	beq.n	800a4c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a500:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a504:	f002 fc88 	bl	800ce18 <USBD_static_malloc>
 800a508:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d109      	bne.n	800a524 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	32b0      	adds	r2, #176	@ 0xb0
 800a51a:	2100      	movs	r1, #0
 800a51c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a520:	2302      	movs	r3, #2
 800a522:	e0d4      	b.n	800a6ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a524:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a528:	2100      	movs	r1, #0
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f003 fb9c 	bl	800dc68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32b0      	adds	r2, #176	@ 0xb0
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	32b0      	adds	r2, #176	@ 0xb0
 800a54a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	7c1b      	ldrb	r3, [r3, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d138      	bne.n	800a5ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a55c:	4b5e      	ldr	r3, [pc, #376]	@ (800a6d8 <USBD_CDC_Init+0x1e4>)
 800a55e:	7819      	ldrb	r1, [r3, #0]
 800a560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a564:	2202      	movs	r2, #2
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f002 fb33 	bl	800cbd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a56c:	4b5a      	ldr	r3, [pc, #360]	@ (800a6d8 <USBD_CDC_Init+0x1e4>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	f003 020f 	and.w	r2, r3, #15
 800a574:	6879      	ldr	r1, [r7, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	440b      	add	r3, r1
 800a580:	3324      	adds	r3, #36	@ 0x24
 800a582:	2201      	movs	r2, #1
 800a584:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a586:	4b55      	ldr	r3, [pc, #340]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a588:	7819      	ldrb	r1, [r3, #0]
 800a58a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a58e:	2202      	movs	r2, #2
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f002 fb1e 	bl	800cbd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a596:	4b51      	ldr	r3, [pc, #324]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f003 020f 	and.w	r2, r3, #15
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a6e0 <USBD_CDC_Init+0x1ec>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	f003 020f 	and.w	r2, r3, #15
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	3326      	adds	r3, #38	@ 0x26
 800a5c8:	2210      	movs	r2, #16
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	e035      	b.n	800a63a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5ce:	4b42      	ldr	r3, [pc, #264]	@ (800a6d8 <USBD_CDC_Init+0x1e4>)
 800a5d0:	7819      	ldrb	r1, [r3, #0]
 800a5d2:	2340      	movs	r3, #64	@ 0x40
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f002 fafb 	bl	800cbd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a6d8 <USBD_CDC_Init+0x1e4>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f003 020f 	and.w	r2, r3, #15
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	3324      	adds	r3, #36	@ 0x24
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5f6:	4b39      	ldr	r3, [pc, #228]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a5f8:	7819      	ldrb	r1, [r3, #0]
 800a5fa:	2340      	movs	r3, #64	@ 0x40
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f002 fae7 	bl	800cbd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a604:	4b35      	ldr	r3, [pc, #212]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f003 020f 	and.w	r2, r3, #15
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	440b      	add	r3, r1
 800a618:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a61c:	2201      	movs	r2, #1
 800a61e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a620:	4b2f      	ldr	r3, [pc, #188]	@ (800a6e0 <USBD_CDC_Init+0x1ec>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	440b      	add	r3, r1
 800a634:	3326      	adds	r3, #38	@ 0x26
 800a636:	2210      	movs	r2, #16
 800a638:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a63a:	4b29      	ldr	r3, [pc, #164]	@ (800a6e0 <USBD_CDC_Init+0x1ec>)
 800a63c:	7819      	ldrb	r1, [r3, #0]
 800a63e:	2308      	movs	r3, #8
 800a640:	2203      	movs	r2, #3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f002 fac5 	bl	800cbd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a648:	4b25      	ldr	r3, [pc, #148]	@ (800a6e0 <USBD_CDC_Init+0x1ec>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 020f 	and.w	r2, r3, #15
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4613      	mov	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	440b      	add	r3, r1
 800a65c:	3324      	adds	r3, #36	@ 0x24
 800a65e:	2201      	movs	r2, #1
 800a660:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	33b0      	adds	r3, #176	@ 0xb0
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a698:	2302      	movs	r3, #2
 800a69a:	e018      	b.n	800a6ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7c1b      	ldrb	r3, [r3, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a6a6:	7819      	ldrb	r1, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f002 fb7c 	bl	800cdb0 <USBD_LL_PrepareReceive>
 800a6b8:	e008      	b.n	800a6cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6ba:	4b08      	ldr	r3, [pc, #32]	@ (800a6dc <USBD_CDC_Init+0x1e8>)
 800a6bc:	7819      	ldrb	r1, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6c4:	2340      	movs	r3, #64	@ 0x40
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f002 fb72 	bl	800cdb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	2000013f 	.word	0x2000013f
 800a6dc:	20000140 	.word	0x20000140
 800a6e0:	20000141 	.word	0x20000141

0800a6e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a6f0:	4b3a      	ldr	r3, [pc, #232]	@ (800a7dc <USBD_CDC_DeInit+0xf8>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f002 fa91 	bl	800cc1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a6fc:	4b37      	ldr	r3, [pc, #220]	@ (800a7dc <USBD_CDC_DeInit+0xf8>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 020f 	and.w	r2, r3, #15
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	440b      	add	r3, r1
 800a710:	3324      	adds	r3, #36	@ 0x24
 800a712:	2200      	movs	r2, #0
 800a714:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a716:	4b32      	ldr	r3, [pc, #200]	@ (800a7e0 <USBD_CDC_DeInit+0xfc>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f002 fa7e 	bl	800cc1e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a722:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e0 <USBD_CDC_DeInit+0xfc>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a73a:	2200      	movs	r2, #0
 800a73c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a73e:	4b29      	ldr	r3, [pc, #164]	@ (800a7e4 <USBD_CDC_DeInit+0x100>)
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f002 fa6a 	bl	800cc1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a74a:	4b26      	ldr	r3, [pc, #152]	@ (800a7e4 <USBD_CDC_DeInit+0x100>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	f003 020f 	and.w	r2, r3, #15
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	440b      	add	r3, r1
 800a75e:	3324      	adds	r3, #36	@ 0x24
 800a760:	2200      	movs	r2, #0
 800a762:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a764:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e4 <USBD_CDC_DeInit+0x100>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3326      	adds	r3, #38	@ 0x26
 800a77a:	2200      	movs	r2, #0
 800a77c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	32b0      	adds	r2, #176	@ 0xb0
 800a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01f      	beq.n	800a7d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	33b0      	adds	r3, #176	@ 0xb0
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	32b0      	adds	r2, #176	@ 0xb0
 800a7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f002 fb3e 	bl	800ce34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	32b0      	adds	r2, #176	@ 0xb0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	2000013f 	.word	0x2000013f
 800a7e0:	20000140 	.word	0x20000140
 800a7e4:	20000141 	.word	0x20000141

0800a7e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	32b0      	adds	r2, #176	@ 0xb0
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	e0bf      	b.n	800a998 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a820:	2b00      	cmp	r3, #0
 800a822:	d050      	beq.n	800a8c6 <USBD_CDC_Setup+0xde>
 800a824:	2b20      	cmp	r3, #32
 800a826:	f040 80af 	bne.w	800a988 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	88db      	ldrh	r3, [r3, #6]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d03a      	beq.n	800a8a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	b25b      	sxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da1b      	bge.n	800a874 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	33b0      	adds	r3, #176	@ 0xb0
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a852:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	88d2      	ldrh	r2, [r2, #6]
 800a858:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	88db      	ldrh	r3, [r3, #6]
 800a85e:	2b07      	cmp	r3, #7
 800a860:	bf28      	it	cs
 800a862:	2307      	movcs	r3, #7
 800a864:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	89fa      	ldrh	r2, [r7, #14]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 fd87 	bl	800c380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a872:	e090      	b.n	800a996 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	785a      	ldrb	r2, [r3, #1]
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	88db      	ldrh	r3, [r3, #6]
 800a882:	2b3f      	cmp	r3, #63	@ 0x3f
 800a884:	d803      	bhi.n	800a88e <USBD_CDC_Setup+0xa6>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	88db      	ldrh	r3, [r3, #6]
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	e000      	b.n	800a890 <USBD_CDC_Setup+0xa8>
 800a88e:	2240      	movs	r2, #64	@ 0x40
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a896:	6939      	ldr	r1, [r7, #16]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 fd99 	bl	800c3d8 <USBD_CtlPrepareRx>
      break;
 800a8a6:	e076      	b.n	800a996 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	33b0      	adds	r3, #176	@ 0xb0
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	7850      	ldrb	r0, [r2, #1]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	4798      	blx	r3
      break;
 800a8c4:	e067      	b.n	800a996 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b0b      	cmp	r3, #11
 800a8cc:	d851      	bhi.n	800a972 <USBD_CDC_Setup+0x18a>
 800a8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d4 <USBD_CDC_Setup+0xec>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a905 	.word	0x0800a905
 800a8d8:	0800a981 	.word	0x0800a981
 800a8dc:	0800a973 	.word	0x0800a973
 800a8e0:	0800a973 	.word	0x0800a973
 800a8e4:	0800a973 	.word	0x0800a973
 800a8e8:	0800a973 	.word	0x0800a973
 800a8ec:	0800a973 	.word	0x0800a973
 800a8f0:	0800a973 	.word	0x0800a973
 800a8f4:	0800a973 	.word	0x0800a973
 800a8f8:	0800a973 	.word	0x0800a973
 800a8fc:	0800a92f 	.word	0x0800a92f
 800a900:	0800a959 	.word	0x0800a959
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d107      	bne.n	800a920 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a910:	f107 030a 	add.w	r3, r7, #10
 800a914:	2202      	movs	r2, #2
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 fd31 	bl	800c380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a91e:	e032      	b.n	800a986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 fcbb 	bl	800c29e <USBD_CtlError>
            ret = USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	75fb      	strb	r3, [r7, #23]
          break;
 800a92c:	e02b      	b.n	800a986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b03      	cmp	r3, #3
 800a938:	d107      	bne.n	800a94a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a93a:	f107 030d 	add.w	r3, r7, #13
 800a93e:	2201      	movs	r2, #1
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 fd1c 	bl	800c380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a948:	e01d      	b.n	800a986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 fca6 	bl	800c29e <USBD_CtlError>
            ret = USBD_FAIL;
 800a952:	2303      	movs	r3, #3
 800a954:	75fb      	strb	r3, [r7, #23]
          break;
 800a956:	e016      	b.n	800a986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b03      	cmp	r3, #3
 800a962:	d00f      	beq.n	800a984 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fc99 	bl	800c29e <USBD_CtlError>
            ret = USBD_FAIL;
 800a96c:	2303      	movs	r3, #3
 800a96e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a970:	e008      	b.n	800a984 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f001 fc92 	bl	800c29e <USBD_CtlError>
          ret = USBD_FAIL;
 800a97a:	2303      	movs	r3, #3
 800a97c:	75fb      	strb	r3, [r7, #23]
          break;
 800a97e:	e002      	b.n	800a986 <USBD_CDC_Setup+0x19e>
          break;
 800a980:	bf00      	nop
 800a982:	e008      	b.n	800a996 <USBD_CDC_Setup+0x1ae>
          break;
 800a984:	bf00      	nop
      }
      break;
 800a986:	e006      	b.n	800a996 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 fc87 	bl	800c29e <USBD_CtlError>
      ret = USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	75fb      	strb	r3, [r7, #23]
      break;
 800a994:	bf00      	nop
  }

  return (uint8_t)ret;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32b0      	adds	r2, #176	@ 0xb0
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e065      	b.n	800aa96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	32b0      	adds	r2, #176	@ 0xb0
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	f003 020f 	and.w	r2, r3, #15
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3318      	adds	r3, #24
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d02f      	beq.n	800aa54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	f003 020f 	and.w	r2, r3, #15
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	440b      	add	r3, r1
 800aa06:	3318      	adds	r3, #24
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	f003 010f 	and.w	r1, r3, #15
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	460b      	mov	r3, r1
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	440b      	add	r3, r1
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4403      	add	r3, r0
 800aa1c:	331c      	adds	r3, #28
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa24:	fb01 f303 	mul.w	r3, r1, r3
 800aa28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d112      	bne.n	800aa54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	f003 020f 	and.w	r2, r3, #15
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	440b      	add	r3, r1
 800aa40:	3318      	adds	r3, #24
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa46:	78f9      	ldrb	r1, [r7, #3]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f002 f98e 	bl	800cd6e <USBD_LL_Transmit>
 800aa52:	e01f      	b.n	800aa94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	33b0      	adds	r3, #176	@ 0xb0
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d010      	beq.n	800aa94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	33b0      	adds	r3, #176	@ 0xb0
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	32b0      	adds	r2, #176	@ 0xb0
 800aab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32b0      	adds	r2, #176	@ 0xb0
 800aac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01a      	b.n	800ab06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 f98c 	bl	800cdf2 <USBD_LL_GetRxDataSize>
 800aada:	4602      	mov	r2, r0
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	33b0      	adds	r3, #176	@ 0xb0
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab00:	4611      	mov	r1, r2
 800ab02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	32b0      	adds	r2, #176	@ 0xb0
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e024      	b.n	800ab7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	33b0      	adds	r3, #176	@ 0xb0
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d019      	beq.n	800ab78 <USBD_CDC_EP0_RxReady+0x6a>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab4a:	2bff      	cmp	r3, #255	@ 0xff
 800ab4c:	d014      	beq.n	800ab78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	33b0      	adds	r3, #176	@ 0xb0
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	22ff      	movs	r2, #255	@ 0xff
 800ab74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab8c:	2182      	movs	r1, #130	@ 0x82
 800ab8e:	4818      	ldr	r0, [pc, #96]	@ (800abf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab90:	f000 fd4f 	bl	800b632 <USBD_GetEpDesc>
 800ab94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab96:	2101      	movs	r1, #1
 800ab98:	4815      	ldr	r0, [pc, #84]	@ (800abf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab9a:	f000 fd4a 	bl	800b632 <USBD_GetEpDesc>
 800ab9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aba0:	2181      	movs	r1, #129	@ 0x81
 800aba2:	4813      	ldr	r0, [pc, #76]	@ (800abf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aba4:	f000 fd45 	bl	800b632 <USBD_GetEpDesc>
 800aba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2210      	movs	r2, #16
 800abb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d006      	beq.n	800abca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abc4:	711a      	strb	r2, [r3, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d006      	beq.n	800abde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abd8:	711a      	strb	r2, [r3, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2243      	movs	r2, #67	@ 0x43
 800abe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abe4:	4b02      	ldr	r3, [pc, #8]	@ (800abf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200000fc 	.word	0x200000fc

0800abf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abfc:	2182      	movs	r1, #130	@ 0x82
 800abfe:	4818      	ldr	r0, [pc, #96]	@ (800ac60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac00:	f000 fd17 	bl	800b632 <USBD_GetEpDesc>
 800ac04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac06:	2101      	movs	r1, #1
 800ac08:	4815      	ldr	r0, [pc, #84]	@ (800ac60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac0a:	f000 fd12 	bl	800b632 <USBD_GetEpDesc>
 800ac0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac10:	2181      	movs	r1, #129	@ 0x81
 800ac12:	4813      	ldr	r0, [pc, #76]	@ (800ac60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac14:	f000 fd0d 	bl	800b632 <USBD_GetEpDesc>
 800ac18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2210      	movs	r2, #16
 800ac24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d006      	beq.n	800ac3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	711a      	strb	r2, [r3, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f042 0202 	orr.w	r2, r2, #2
 800ac38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d006      	beq.n	800ac4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	711a      	strb	r2, [r3, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f042 0202 	orr.w	r2, r2, #2
 800ac4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2243      	movs	r2, #67	@ 0x43
 800ac52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac54:	4b02      	ldr	r3, [pc, #8]	@ (800ac60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	200000fc 	.word	0x200000fc

0800ac64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac6c:	2182      	movs	r1, #130	@ 0x82
 800ac6e:	4818      	ldr	r0, [pc, #96]	@ (800acd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac70:	f000 fcdf 	bl	800b632 <USBD_GetEpDesc>
 800ac74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac76:	2101      	movs	r1, #1
 800ac78:	4815      	ldr	r0, [pc, #84]	@ (800acd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac7a:	f000 fcda 	bl	800b632 <USBD_GetEpDesc>
 800ac7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac80:	2181      	movs	r1, #129	@ 0x81
 800ac82:	4813      	ldr	r0, [pc, #76]	@ (800acd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac84:	f000 fcd5 	bl	800b632 <USBD_GetEpDesc>
 800ac88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2210      	movs	r2, #16
 800ac94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d006      	beq.n	800acaa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aca4:	711a      	strb	r2, [r3, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d006      	beq.n	800acbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acb8:	711a      	strb	r2, [r3, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2243      	movs	r2, #67	@ 0x43
 800acc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acc4:	4b02      	ldr	r3, [pc, #8]	@ (800acd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	200000fc 	.word	0x200000fc

0800acd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	220a      	movs	r2, #10
 800ace0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ace2:	4b03      	ldr	r3, [pc, #12]	@ (800acf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	200000b8 	.word	0x200000b8

0800acf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e009      	b.n	800ad1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	33b0      	adds	r3, #176	@ 0xb0
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	32b0      	adds	r2, #176	@ 0xb0
 800ad3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad42:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e008      	b.n	800ad60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	32b0      	adds	r2, #176	@ 0xb0
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e004      	b.n	800ad9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
	...

0800ada8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	32b0      	adds	r2, #176	@ 0xb0
 800adba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800adc0:	2301      	movs	r3, #1
 800adc2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800adca:	2303      	movs	r3, #3
 800adcc:	e025      	b.n	800ae1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11f      	bne.n	800ae18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2201      	movs	r2, #1
 800addc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ade0:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <USBD_CDC_TransmitPacket+0x7c>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4403      	add	r3, r0
 800adfa:	3318      	adds	r3, #24
 800adfc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800adfe:	4b09      	ldr	r3, [pc, #36]	@ (800ae24 <USBD_CDC_TransmitPacket+0x7c>)
 800ae00:	7819      	ldrb	r1, [r3, #0]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f001 ffad 	bl	800cd6e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	2000013f 	.word	0x2000013f

0800ae28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32b0      	adds	r2, #176	@ 0xb0
 800ae3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32b0      	adds	r2, #176	@ 0xb0
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e018      	b.n	800ae88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	7c1b      	ldrb	r3, [r3, #16]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae90 <USBD_CDC_ReceivePacket+0x68>)
 800ae60:	7819      	ldrb	r1, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 ff9f 	bl	800cdb0 <USBD_LL_PrepareReceive>
 800ae72:	e008      	b.n	800ae86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae74:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <USBD_CDC_ReceivePacket+0x68>)
 800ae76:	7819      	ldrb	r1, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae7e:	2340      	movs	r3, #64	@ 0x40
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 ff95 	bl	800cdb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000140 	.word	0x20000140

0800ae94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e01f      	b.n	800aeec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	79fa      	ldrb	r2, [r7, #7]
 800aede:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f001 fe0f 	bl	800cb04 <USBD_LL_Init>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af08:	2303      	movs	r3, #3
 800af0a:	e025      	b.n	800af58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	32ae      	adds	r2, #174	@ 0xae
 800af1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00f      	beq.n	800af48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	32ae      	adds	r2, #174	@ 0xae
 800af32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af38:	f107 020e 	add.w	r2, r7, #14
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
 800af40:	4602      	mov	r2, r0
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 fe17 	bl	800cb9c <USBD_LL_Start>
 800af6e:	4603      	mov	r3, r0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	78fa      	ldrb	r2, [r7, #3]
 800afb2:	4611      	mov	r1, r2
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	460b      	mov	r3, r1
 800afd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	78fa      	ldrb	r2, [r7, #3]
 800afe0:	4611      	mov	r1, r2
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	4798      	blx	r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f90c 	bl	800c22a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b020:	461a      	mov	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b02e:	f003 031f 	and.w	r3, r3, #31
 800b032:	2b02      	cmp	r3, #2
 800b034:	d01a      	beq.n	800b06c <USBD_LL_SetupStage+0x72>
 800b036:	2b02      	cmp	r3, #2
 800b038:	d822      	bhi.n	800b080 <USBD_LL_SetupStage+0x86>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <USBD_LL_SetupStage+0x4a>
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d00a      	beq.n	800b058 <USBD_LL_SetupStage+0x5e>
 800b042:	e01d      	b.n	800b080 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fb63 	bl	800b718 <USBD_StdDevReq>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
      break;
 800b056:	e020      	b.n	800b09a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fbcb 	bl	800b7fc <USBD_StdItfReq>
 800b066:	4603      	mov	r3, r0
 800b068:	73fb      	strb	r3, [r7, #15]
      break;
 800b06a:	e016      	b.n	800b09a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fc2d 	bl	800b8d4 <USBD_StdEPReq>
 800b07a:	4603      	mov	r3, r0
 800b07c:	73fb      	strb	r3, [r7, #15]
      break;
 800b07e:	e00c      	b.n	800b09a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b086:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f001 fde4 	bl	800cc5c <USBD_LL_StallEP>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
      break;
 800b098:	bf00      	nop
  }

  return ret;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d16e      	bne.n	800b19a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b0c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	f040 8098 	bne.w	800b200 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	689a      	ldr	r2, [r3, #8]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d913      	bls.n	800b104 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bf28      	it	cs
 800b0f6:	4613      	movcs	r3, r2
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f001 f988 	bl	800c412 <USBD_CtlContinueRx>
 800b102:	e07d      	b.n	800b200 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d014      	beq.n	800b13c <USBD_LL_DataOutStage+0x98>
 800b112:	2b02      	cmp	r3, #2
 800b114:	d81d      	bhi.n	800b152 <USBD_LL_DataOutStage+0xae>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <USBD_LL_DataOutStage+0x7c>
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d003      	beq.n	800b126 <USBD_LL_DataOutStage+0x82>
 800b11e:	e018      	b.n	800b152 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b120:	2300      	movs	r3, #0
 800b122:	75bb      	strb	r3, [r7, #22]
            break;
 800b124:	e018      	b.n	800b158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 fa64 	bl	800b5fe <USBD_CoreFindIF>
 800b136:	4603      	mov	r3, r0
 800b138:	75bb      	strb	r3, [r7, #22]
            break;
 800b13a:	e00d      	b.n	800b158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b142:	b2db      	uxtb	r3, r3
 800b144:	4619      	mov	r1, r3
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fa66 	bl	800b618 <USBD_CoreFindEP>
 800b14c:	4603      	mov	r3, r0
 800b14e:	75bb      	strb	r3, [r7, #22]
            break;
 800b150:	e002      	b.n	800b158 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	75bb      	strb	r3, [r7, #22]
            break;
 800b156:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b158:	7dbb      	ldrb	r3, [r7, #22]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d119      	bne.n	800b192 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b03      	cmp	r3, #3
 800b168:	d113      	bne.n	800b192 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b16a:	7dba      	ldrb	r2, [r7, #22]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	32ae      	adds	r2, #174	@ 0xae
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00b      	beq.n	800b192 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b17a:	7dba      	ldrb	r2, [r7, #22]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b182:	7dba      	ldrb	r2, [r7, #22]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	32ae      	adds	r2, #174	@ 0xae
 800b188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f001 f94e 	bl	800c434 <USBD_CtlSendStatus>
 800b198:	e032      	b.n	800b200 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 fa37 	bl	800b618 <USBD_CoreFindEP>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1ae:	7dbb      	ldrb	r3, [r7, #22]
 800b1b0:	2bff      	cmp	r3, #255	@ 0xff
 800b1b2:	d025      	beq.n	800b200 <USBD_LL_DataOutStage+0x15c>
 800b1b4:	7dbb      	ldrb	r3, [r7, #22]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d122      	bne.n	800b200 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d117      	bne.n	800b1f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b1c6:	7dba      	ldrb	r2, [r7, #22]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	32ae      	adds	r2, #174	@ 0xae
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00f      	beq.n	800b1f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b1d6:	7dba      	ldrb	r2, [r7, #22]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b1de:	7dba      	ldrb	r2, [r7, #22]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	32ae      	adds	r2, #174	@ 0xae
 800b1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	7afa      	ldrb	r2, [r7, #11]
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	4798      	blx	r3
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	e000      	b.n	800b202 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b086      	sub	sp, #24
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	460b      	mov	r3, r1
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d16f      	bne.n	800b2fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3314      	adds	r3, #20
 800b222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d15a      	bne.n	800b2e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	429a      	cmp	r2, r3
 800b238:	d914      	bls.n	800b264 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	1ad2      	subs	r2, r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	461a      	mov	r2, r3
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f001 f8b0 	bl	800c3b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b256:	2300      	movs	r3, #0
 800b258:	2200      	movs	r2, #0
 800b25a:	2100      	movs	r1, #0
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f001 fda7 	bl	800cdb0 <USBD_LL_PrepareReceive>
 800b262:	e03f      	b.n	800b2e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d11c      	bne.n	800b2aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b278:	429a      	cmp	r2, r3
 800b27a:	d316      	bcc.n	800b2aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b286:	429a      	cmp	r2, r3
 800b288:	d20f      	bcs.n	800b2aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b28a:	2200      	movs	r2, #0
 800b28c:	2100      	movs	r1, #0
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f001 f891 	bl	800c3b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b29c:	2300      	movs	r3, #0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f001 fd84 	bl	800cdb0 <USBD_LL_PrepareReceive>
 800b2a8:	e01c      	b.n	800b2e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d10f      	bne.n	800b2d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d009      	beq.n	800b2d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2d6:	2180      	movs	r1, #128	@ 0x80
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f001 fcbf 	bl	800cc5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f001 f8bb 	bl	800c45a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d03a      	beq.n	800b364 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff fe42 	bl	800af78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b2fc:	e032      	b.n	800b364 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2fe:	7afb      	ldrb	r3, [r7, #11]
 800b300:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b304:	b2db      	uxtb	r3, r3
 800b306:	4619      	mov	r1, r3
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f000 f985 	bl	800b618 <USBD_CoreFindEP>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2bff      	cmp	r3, #255	@ 0xff
 800b316:	d025      	beq.n	800b364 <USBD_LL_DataInStage+0x15a>
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d122      	bne.n	800b364 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d11c      	bne.n	800b364 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b32a:	7dfa      	ldrb	r2, [r7, #23]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	32ae      	adds	r2, #174	@ 0xae
 800b330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d014      	beq.n	800b364 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b33a:	7dfa      	ldrb	r2, [r7, #23]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b342:	7dfa      	ldrb	r2, [r7, #23]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	32ae      	adds	r2, #174	@ 0xae
 800b348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	7afa      	ldrb	r2, [r7, #11]
 800b350:	4611      	mov	r1, r2
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	4798      	blx	r3
 800b356:	4603      	mov	r3, r0
 800b358:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b35a:	7dbb      	ldrb	r3, [r7, #22]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b360:	7dbb      	ldrb	r3, [r7, #22]
 800b362:	e000      	b.n	800b366 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d014      	beq.n	800b3d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00e      	beq.n	800b3d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6852      	ldr	r2, [r2, #4]
 800b3c2:	b2d2      	uxtb	r2, r2
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3d4:	2340      	movs	r3, #64	@ 0x40
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fbf9 	bl	800cbd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2240      	movs	r2, #64	@ 0x40
 800b3ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3f0:	2340      	movs	r3, #64	@ 0x40
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2180      	movs	r1, #128	@ 0x80
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f001 fbeb 	bl	800cbd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2240      	movs	r2, #64	@ 0x40
 800b406:	621a      	str	r2, [r3, #32]

  return ret;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b04      	cmp	r3, #4
 800b444:	d006      	beq.n	800b454 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2204      	movs	r2, #4
 800b458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b083      	sub	sp, #12
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d106      	bne.n	800b48c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b484:	b2da      	uxtb	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d110      	bne.n	800b4d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00b      	beq.n	800b4d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d005      	beq.n	800b4d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	32ae      	adds	r2, #174	@ 0xae
 800b4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d101      	bne.n	800b4fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e01c      	b.n	800b536 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b03      	cmp	r3, #3
 800b506:	d115      	bne.n	800b534 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	32ae      	adds	r2, #174	@ 0xae
 800b512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	32ae      	adds	r2, #174	@ 0xae
 800b526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	78fa      	ldrb	r2, [r7, #3]
 800b52e:	4611      	mov	r1, r2
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	460b      	mov	r3, r1
 800b548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	32ae      	adds	r2, #174	@ 0xae
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e01c      	b.n	800b59a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d115      	bne.n	800b598 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	@ 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	32ae      	adds	r2, #174	@ 0xae
 800b58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	4611      	mov	r1, r2
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00e      	beq.n	800b5f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6852      	ldr	r2, [r2, #4]
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	4798      	blx	r3
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b60a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b624:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b086      	sub	sp, #24
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	460b      	mov	r3, r1
 800b63c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	7812      	ldrb	r2, [r2, #0]
 800b654:	4293      	cmp	r3, r2
 800b656:	d91f      	bls.n	800b698 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b65e:	e013      	b.n	800b688 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b660:	f107 030a 	add.w	r3, r7, #10
 800b664:	4619      	mov	r1, r3
 800b666:	6978      	ldr	r0, [r7, #20]
 800b668:	f000 f81b 	bl	800b6a2 <USBD_GetNextDesc>
 800b66c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	2b05      	cmp	r3, #5
 800b674:	d108      	bne.n	800b688 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	789b      	ldrb	r3, [r3, #2]
 800b67e:	78fa      	ldrb	r2, [r7, #3]
 800b680:	429a      	cmp	r2, r3
 800b682:	d008      	beq.n	800b696 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b684:	2300      	movs	r3, #0
 800b686:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	885b      	ldrh	r3, [r3, #2]
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	897b      	ldrh	r3, [r7, #10]
 800b690:	429a      	cmp	r2, r3
 800b692:	d8e5      	bhi.n	800b660 <USBD_GetEpDesc+0x2e>
 800b694:	e000      	b.n	800b698 <USBD_GetEpDesc+0x66>
          break;
 800b696:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b698:	693b      	ldr	r3, [r7, #16]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b085      	sub	sp, #20
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b087      	sub	sp, #28
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6f8:	8a3b      	ldrh	r3, [r7, #16]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	b21a      	sxth	r2, r3
 800b6fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b702:	4313      	orrs	r3, r2
 800b704:	b21b      	sxth	r3, r3
 800b706:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b708:	89fb      	ldrh	r3, [r7, #14]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
	...

0800b718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b72e:	2b40      	cmp	r3, #64	@ 0x40
 800b730:	d005      	beq.n	800b73e <USBD_StdDevReq+0x26>
 800b732:	2b40      	cmp	r3, #64	@ 0x40
 800b734:	d857      	bhi.n	800b7e6 <USBD_StdDevReq+0xce>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00f      	beq.n	800b75a <USBD_StdDevReq+0x42>
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d153      	bne.n	800b7e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	32ae      	adds	r2, #174	@ 0xae
 800b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	4798      	blx	r3
 800b754:	4603      	mov	r3, r0
 800b756:	73fb      	strb	r3, [r7, #15]
      break;
 800b758:	e04a      	b.n	800b7f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b09      	cmp	r3, #9
 800b760:	d83b      	bhi.n	800b7da <USBD_StdDevReq+0xc2>
 800b762:	a201      	add	r2, pc, #4	@ (adr r2, 800b768 <USBD_StdDevReq+0x50>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b7bd 	.word	0x0800b7bd
 800b76c:	0800b7d1 	.word	0x0800b7d1
 800b770:	0800b7db 	.word	0x0800b7db
 800b774:	0800b7c7 	.word	0x0800b7c7
 800b778:	0800b7db 	.word	0x0800b7db
 800b77c:	0800b79b 	.word	0x0800b79b
 800b780:	0800b791 	.word	0x0800b791
 800b784:	0800b7db 	.word	0x0800b7db
 800b788:	0800b7b3 	.word	0x0800b7b3
 800b78c:	0800b7a5 	.word	0x0800b7a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa3c 	bl	800bc10 <USBD_GetDescriptor>
          break;
 800b798:	e024      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fba1 	bl	800bee4 <USBD_SetAddress>
          break;
 800b7a2:	e01f      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fbe0 	bl	800bf6c <USBD_SetConfig>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73fb      	strb	r3, [r7, #15]
          break;
 800b7b0:	e018      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fc83 	bl	800c0c0 <USBD_GetConfig>
          break;
 800b7ba:	e013      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fcb4 	bl	800c12c <USBD_GetStatus>
          break;
 800b7c4:	e00e      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fce3 	bl	800c194 <USBD_SetFeature>
          break;
 800b7ce:	e009      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fd07 	bl	800c1e6 <USBD_ClrFeature>
          break;
 800b7d8:	e004      	b.n	800b7e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fd5e 	bl	800c29e <USBD_CtlError>
          break;
 800b7e2:	bf00      	nop
      }
      break;
 800b7e4:	e004      	b.n	800b7f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fd58 	bl	800c29e <USBD_CtlError>
      break;
 800b7ee:	bf00      	nop
  }

  return ret;
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop

0800b7fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b812:	2b40      	cmp	r3, #64	@ 0x40
 800b814:	d005      	beq.n	800b822 <USBD_StdItfReq+0x26>
 800b816:	2b40      	cmp	r3, #64	@ 0x40
 800b818:	d852      	bhi.n	800b8c0 <USBD_StdItfReq+0xc4>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <USBD_StdItfReq+0x26>
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d14e      	bne.n	800b8c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	3b01      	subs	r3, #1
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d840      	bhi.n	800b8b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	889b      	ldrh	r3, [r3, #4]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b01      	cmp	r3, #1
 800b838:	d836      	bhi.n	800b8a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	889b      	ldrh	r3, [r3, #4]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff fedb 	bl	800b5fe <USBD_CoreFindIF>
 800b848:	4603      	mov	r3, r0
 800b84a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	2bff      	cmp	r3, #255	@ 0xff
 800b850:	d01d      	beq.n	800b88e <USBD_StdItfReq+0x92>
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d11a      	bne.n	800b88e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b858:	7bba      	ldrb	r2, [r7, #14]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	32ae      	adds	r2, #174	@ 0xae
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00f      	beq.n	800b888 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b868:	7bba      	ldrb	r2, [r7, #14]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b870:	7bba      	ldrb	r2, [r7, #14]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	32ae      	adds	r2, #174	@ 0xae
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b886:	e004      	b.n	800b892 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b888:	2303      	movs	r3, #3
 800b88a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b88c:	e001      	b.n	800b892 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b88e:	2303      	movs	r3, #3
 800b890:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	88db      	ldrh	r3, [r3, #6]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d110      	bne.n	800b8bc <USBD_StdItfReq+0xc0>
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10d      	bne.n	800b8bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fdc7 	bl	800c434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8a6:	e009      	b.n	800b8bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fcf7 	bl	800c29e <USBD_CtlError>
          break;
 800b8b0:	e004      	b.n	800b8bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fcf2 	bl	800c29e <USBD_CtlError>
          break;
 800b8ba:	e000      	b.n	800b8be <USBD_StdItfReq+0xc2>
          break;
 800b8bc:	bf00      	nop
      }
      break;
 800b8be:	e004      	b.n	800b8ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fceb 	bl	800c29e <USBD_CtlError>
      break;
 800b8c8:	bf00      	nop
  }

  return ret;
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	889b      	ldrh	r3, [r3, #4]
 800b8e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8f0:	2b40      	cmp	r3, #64	@ 0x40
 800b8f2:	d007      	beq.n	800b904 <USBD_StdEPReq+0x30>
 800b8f4:	2b40      	cmp	r3, #64	@ 0x40
 800b8f6:	f200 817f 	bhi.w	800bbf8 <USBD_StdEPReq+0x324>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d02a      	beq.n	800b954 <USBD_StdEPReq+0x80>
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	f040 817a 	bne.w	800bbf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b904:	7bbb      	ldrb	r3, [r7, #14]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff fe85 	bl	800b618 <USBD_CoreFindEP>
 800b90e:	4603      	mov	r3, r0
 800b910:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b912:	7b7b      	ldrb	r3, [r7, #13]
 800b914:	2bff      	cmp	r3, #255	@ 0xff
 800b916:	f000 8174 	beq.w	800bc02 <USBD_StdEPReq+0x32e>
 800b91a:	7b7b      	ldrb	r3, [r7, #13]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f040 8170 	bne.w	800bc02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b922:	7b7a      	ldrb	r2, [r7, #13]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b92a:	7b7a      	ldrb	r2, [r7, #13]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	32ae      	adds	r2, #174	@ 0xae
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 8163 	beq.w	800bc02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b93c:	7b7a      	ldrb	r2, [r7, #13]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	32ae      	adds	r2, #174	@ 0xae
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	4798      	blx	r3
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b952:	e156      	b.n	800bc02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d008      	beq.n	800b96e <USBD_StdEPReq+0x9a>
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	f300 8145 	bgt.w	800bbec <USBD_StdEPReq+0x318>
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 809b 	beq.w	800ba9e <USBD_StdEPReq+0x1ca>
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d03c      	beq.n	800b9e6 <USBD_StdEPReq+0x112>
 800b96c:	e13e      	b.n	800bbec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d002      	beq.n	800b980 <USBD_StdEPReq+0xac>
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d016      	beq.n	800b9ac <USBD_StdEPReq+0xd8>
 800b97e:	e02c      	b.n	800b9da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00d      	beq.n	800b9a2 <USBD_StdEPReq+0xce>
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	2b80      	cmp	r3, #128	@ 0x80
 800b98a:	d00a      	beq.n	800b9a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 f963 	bl	800cc5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b996:	2180      	movs	r1, #128	@ 0x80
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 f95f 	bl	800cc5c <USBD_LL_StallEP>
 800b99e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9a0:	e020      	b.n	800b9e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fc7a 	bl	800c29e <USBD_CtlError>
              break;
 800b9aa:	e01b      	b.n	800b9e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	885b      	ldrh	r3, [r3, #2]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10e      	bne.n	800b9d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00b      	beq.n	800b9d2 <USBD_StdEPReq+0xfe>
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b80      	cmp	r3, #128	@ 0x80
 800b9be:	d008      	beq.n	800b9d2 <USBD_StdEPReq+0xfe>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	88db      	ldrh	r3, [r3, #6]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 f945 	bl	800cc5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fd2e 	bl	800c434 <USBD_CtlSendStatus>

              break;
 800b9d8:	e004      	b.n	800b9e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fc5e 	bl	800c29e <USBD_CtlError>
              break;
 800b9e2:	bf00      	nop
          }
          break;
 800b9e4:	e107      	b.n	800bbf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d002      	beq.n	800b9f8 <USBD_StdEPReq+0x124>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d016      	beq.n	800ba24 <USBD_StdEPReq+0x150>
 800b9f6:	e04b      	b.n	800ba90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00d      	beq.n	800ba1a <USBD_StdEPReq+0x146>
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	2b80      	cmp	r3, #128	@ 0x80
 800ba02:	d00a      	beq.n	800ba1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 f927 	bl	800cc5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba0e:	2180      	movs	r1, #128	@ 0x80
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 f923 	bl	800cc5c <USBD_LL_StallEP>
 800ba16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba18:	e040      	b.n	800ba9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fc3e 	bl	800c29e <USBD_CtlError>
              break;
 800ba22:	e03b      	b.n	800ba9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d136      	bne.n	800ba9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 f92d 	bl	800cc9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fcf7 	bl	800c434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff fde4 	bl	800b618 <USBD_CoreFindEP>
 800ba50:	4603      	mov	r3, r0
 800ba52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba54:	7b7b      	ldrb	r3, [r7, #13]
 800ba56:	2bff      	cmp	r3, #255	@ 0xff
 800ba58:	d01f      	beq.n	800ba9a <USBD_StdEPReq+0x1c6>
 800ba5a:	7b7b      	ldrb	r3, [r7, #13]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d11c      	bne.n	800ba9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba60:	7b7a      	ldrb	r2, [r7, #13]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba68:	7b7a      	ldrb	r2, [r7, #13]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	32ae      	adds	r2, #174	@ 0xae
 800ba6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d010      	beq.n	800ba9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba78:	7b7a      	ldrb	r2, [r7, #13]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	32ae      	adds	r2, #174	@ 0xae
 800ba7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba8e:	e004      	b.n	800ba9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fc03 	bl	800c29e <USBD_CtlError>
              break;
 800ba98:	e000      	b.n	800ba9c <USBD_StdEPReq+0x1c8>
              break;
 800ba9a:	bf00      	nop
          }
          break;
 800ba9c:	e0ab      	b.n	800bbf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d002      	beq.n	800bab0 <USBD_StdEPReq+0x1dc>
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d032      	beq.n	800bb14 <USBD_StdEPReq+0x240>
 800baae:	e097      	b.n	800bbe0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d007      	beq.n	800bac6 <USBD_StdEPReq+0x1f2>
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b80      	cmp	r3, #128	@ 0x80
 800baba:	d004      	beq.n	800bac6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fbed 	bl	800c29e <USBD_CtlError>
                break;
 800bac4:	e091      	b.n	800bbea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da0b      	bge.n	800bae6 <USBD_StdEPReq+0x212>
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	3310      	adds	r3, #16
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	3304      	adds	r3, #4
 800bae4:	e00b      	b.n	800bafe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	3304      	adds	r3, #4
 800bafe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fc37 	bl	800c380 <USBD_CtlSendData>
              break;
 800bb12:	e06a      	b.n	800bbea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da11      	bge.n	800bb40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	f003 020f 	and.w	r2, r3, #15
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3324      	adds	r3, #36	@ 0x24
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d117      	bne.n	800bb66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fbb0 	bl	800c29e <USBD_CtlError>
                  break;
 800bb3e:	e054      	b.n	800bbea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	f003 020f 	and.w	r2, r3, #15
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	440b      	add	r3, r1
 800bb52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d104      	bne.n	800bb66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fb9d 	bl	800c29e <USBD_CtlError>
                  break;
 800bb64:	e041      	b.n	800bbea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da0b      	bge.n	800bb86 <USBD_StdEPReq+0x2b2>
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	3310      	adds	r3, #16
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4413      	add	r3, r2
 800bb82:	3304      	adds	r3, #4
 800bb84:	e00b      	b.n	800bb9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <USBD_StdEPReq+0x2d8>
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	2b80      	cmp	r3, #128	@ 0x80
 800bbaa:	d103      	bne.n	800bbb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	e00e      	b.n	800bbd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f001 f88d 	bl	800ccd8 <USBD_LL_IsStallEP>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	e002      	b.n	800bbd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fbd1 	bl	800c380 <USBD_CtlSendData>
              break;
 800bbde:	e004      	b.n	800bbea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fb5b 	bl	800c29e <USBD_CtlError>
              break;
 800bbe8:	bf00      	nop
          }
          break;
 800bbea:	e004      	b.n	800bbf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fb55 	bl	800c29e <USBD_CtlError>
          break;
 800bbf4:	bf00      	nop
      }
      break;
 800bbf6:	e005      	b.n	800bc04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fb4f 	bl	800c29e <USBD_CtlError>
      break;
 800bc00:	e000      	b.n	800bc04 <USBD_StdEPReq+0x330>
      break;
 800bc02:	bf00      	nop
  }

  return ret;
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc22:	2300      	movs	r3, #0
 800bc24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	885b      	ldrh	r3, [r3, #2]
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b06      	cmp	r3, #6
 800bc32:	f200 8128 	bhi.w	800be86 <USBD_GetDescriptor+0x276>
 800bc36:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <USBD_GetDescriptor+0x2c>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc59 	.word	0x0800bc59
 800bc40:	0800bc71 	.word	0x0800bc71
 800bc44:	0800bcb1 	.word	0x0800bcb1
 800bc48:	0800be87 	.word	0x0800be87
 800bc4c:	0800be87 	.word	0x0800be87
 800bc50:	0800be27 	.word	0x0800be27
 800bc54:	0800be53 	.word	0x0800be53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	7c12      	ldrb	r2, [r2, #16]
 800bc64:	f107 0108 	add.w	r1, r7, #8
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
 800bc6c:	60f8      	str	r0, [r7, #12]
      break;
 800bc6e:	e112      	b.n	800be96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	7c1b      	ldrb	r3, [r3, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10d      	bne.n	800bc94 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc80:	f107 0208 	add.w	r2, r7, #8
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	2202      	movs	r2, #2
 800bc90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc92:	e100      	b.n	800be96 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9c:	f107 0208 	add.w	r2, r7, #8
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	2202      	movs	r2, #2
 800bcac:	701a      	strb	r2, [r3, #0]
      break;
 800bcae:	e0f2      	b.n	800be96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	885b      	ldrh	r3, [r3, #2]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b05      	cmp	r3, #5
 800bcb8:	f200 80ac 	bhi.w	800be14 <USBD_GetDescriptor+0x204>
 800bcbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc4 <USBD_GetDescriptor+0xb4>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bd11 	.word	0x0800bd11
 800bccc:	0800bd45 	.word	0x0800bd45
 800bcd0:	0800bd79 	.word	0x0800bd79
 800bcd4:	0800bdad 	.word	0x0800bdad
 800bcd8:	0800bde1 	.word	0x0800bde1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00b      	beq.n	800bd00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	7c12      	ldrb	r2, [r2, #16]
 800bcf4:	f107 0108 	add.w	r1, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfe:	e091      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 facb 	bl	800c29e <USBD_CtlError>
            err++;
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd0e:	e089      	b.n	800be24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	7c12      	ldrb	r2, [r2, #16]
 800bd28:	f107 0108 	add.w	r1, r7, #8
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd32:	e077      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fab1 	bl	800c29e <USBD_CtlError>
            err++;
 800bd3c:	7afb      	ldrb	r3, [r7, #11]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	72fb      	strb	r3, [r7, #11]
          break;
 800bd42:	e06f      	b.n	800be24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	7c12      	ldrb	r2, [r2, #16]
 800bd5c:	f107 0108 	add.w	r1, r7, #8
 800bd60:	4610      	mov	r0, r2
 800bd62:	4798      	blx	r3
 800bd64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd66:	e05d      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa97 	bl	800c29e <USBD_CtlError>
            err++;
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	3301      	adds	r3, #1
 800bd74:	72fb      	strb	r3, [r7, #11]
          break;
 800bd76:	e055      	b.n	800be24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00b      	beq.n	800bd9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	7c12      	ldrb	r2, [r2, #16]
 800bd90:	f107 0108 	add.w	r1, r7, #8
 800bd94:	4610      	mov	r0, r2
 800bd96:	4798      	blx	r3
 800bd98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9a:	e043      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa7d 	bl	800c29e <USBD_CtlError>
            err++;
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	3301      	adds	r3, #1
 800bda8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdaa:	e03b      	b.n	800be24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	7c12      	ldrb	r2, [r2, #16]
 800bdc4:	f107 0108 	add.w	r1, r7, #8
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4798      	blx	r3
 800bdcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdce:	e029      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fa63 	bl	800c29e <USBD_CtlError>
            err++;
 800bdd8:	7afb      	ldrb	r3, [r7, #11]
 800bdda:	3301      	adds	r3, #1
 800bddc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdde:	e021      	b.n	800be24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00b      	beq.n	800be04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	7c12      	ldrb	r2, [r2, #16]
 800bdf8:	f107 0108 	add.w	r1, r7, #8
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be02:	e00f      	b.n	800be24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fa49 	bl	800c29e <USBD_CtlError>
            err++;
 800be0c:	7afb      	ldrb	r3, [r7, #11]
 800be0e:	3301      	adds	r3, #1
 800be10:	72fb      	strb	r3, [r7, #11]
          break;
 800be12:	e007      	b.n	800be24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa41 	bl	800c29e <USBD_CtlError>
          err++;
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	3301      	adds	r3, #1
 800be20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be22:	bf00      	nop
      }
      break;
 800be24:	e037      	b.n	800be96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7c1b      	ldrb	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be36:	f107 0208 	add.w	r2, r7, #8
 800be3a:	4610      	mov	r0, r2
 800be3c:	4798      	blx	r3
 800be3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be40:	e029      	b.n	800be96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa2a 	bl	800c29e <USBD_CtlError>
        err++;
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	3301      	adds	r3, #1
 800be4e:	72fb      	strb	r3, [r7, #11]
      break;
 800be50:	e021      	b.n	800be96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7c1b      	ldrb	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10d      	bne.n	800be76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be62:	f107 0208 	add.w	r2, r7, #8
 800be66:	4610      	mov	r0, r2
 800be68:	4798      	blx	r3
 800be6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	2207      	movs	r2, #7
 800be72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be74:	e00f      	b.n	800be96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fa10 	bl	800c29e <USBD_CtlError>
        err++;
 800be7e:	7afb      	ldrb	r3, [r7, #11]
 800be80:	3301      	adds	r3, #1
 800be82:	72fb      	strb	r3, [r7, #11]
      break;
 800be84:	e007      	b.n	800be96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fa08 	bl	800c29e <USBD_CtlError>
      err++;
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	3301      	adds	r3, #1
 800be92:	72fb      	strb	r3, [r7, #11]
      break;
 800be94:	bf00      	nop
  }

  if (err != 0U)
 800be96:	7afb      	ldrb	r3, [r7, #11]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d11e      	bne.n	800beda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	88db      	ldrh	r3, [r3, #6]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d016      	beq.n	800bed2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bea4:	893b      	ldrh	r3, [r7, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00e      	beq.n	800bec8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	88da      	ldrh	r2, [r3, #6]
 800beae:	893b      	ldrh	r3, [r7, #8]
 800beb0:	4293      	cmp	r3, r2
 800beb2:	bf28      	it	cs
 800beb4:	4613      	movcs	r3, r2
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	461a      	mov	r2, r3
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fa5d 	bl	800c380 <USBD_CtlSendData>
 800bec6:	e009      	b.n	800bedc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f9e7 	bl	800c29e <USBD_CtlError>
 800bed0:	e004      	b.n	800bedc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 faae 	bl	800c434 <USBD_CtlSendStatus>
 800bed8:	e000      	b.n	800bedc <USBD_GetDescriptor+0x2cc>
    return;
 800beda:	bf00      	nop
  }
}
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop

0800bee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	889b      	ldrh	r3, [r3, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d131      	bne.n	800bf5a <USBD_SetAddress+0x76>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	88db      	ldrh	r3, [r3, #6]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d12d      	bne.n	800bf5a <USBD_SetAddress+0x76>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	885b      	ldrh	r3, [r3, #2]
 800bf02:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf04:	d829      	bhi.n	800bf5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	885b      	ldrh	r3, [r3, #2]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d104      	bne.n	800bf28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f9bc 	bl	800c29e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf26:	e01d      	b.n	800bf64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	7bfa      	ldrb	r2, [r7, #15]
 800bf2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fefb 	bl	800cd30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa7a 	bl	800c434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf4e:	e009      	b.n	800bf64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf58:	e004      	b.n	800bf64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f99e 	bl	800c29e <USBD_CtlError>
  }
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	885b      	ldrh	r3, [r3, #2]
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	4b4e      	ldr	r3, [pc, #312]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bf82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf84:	4b4d      	ldr	r3, [pc, #308]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d905      	bls.n	800bf98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f985 	bl	800c29e <USBD_CtlError>
    return USBD_FAIL;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e08c      	b.n	800c0b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d002      	beq.n	800bfaa <USBD_SetConfig+0x3e>
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d029      	beq.n	800bffc <USBD_SetConfig+0x90>
 800bfa8:	e075      	b.n	800c096 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfaa:	4b44      	ldr	r3, [pc, #272]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d020      	beq.n	800bff4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bfb2:	4b42      	ldr	r3, [pc, #264]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfbc:	4b3f      	ldr	r3, [pc, #252]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7fe ffe3 	bl	800af8e <USBD_SetClassConfig>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d008      	beq.n	800bfe4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f962 	bl	800c29e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2202      	movs	r2, #2
 800bfde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfe2:	e065      	b.n	800c0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fa25 	bl	800c434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2203      	movs	r2, #3
 800bfee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bff2:	e05d      	b.n	800c0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa1d 	bl	800c434 <USBD_CtlSendStatus>
      break;
 800bffa:	e059      	b.n	800c0b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bffc:	4b2f      	ldr	r3, [pc, #188]	@ (800c0bc <USBD_SetConfig+0x150>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d112      	bne.n	800c02a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2202      	movs	r2, #2
 800c008:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c00c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	461a      	mov	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c016:	4b29      	ldr	r3, [pc, #164]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7fe ffd2 	bl	800afc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fa06 	bl	800c434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c028:	e042      	b.n	800c0b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c02a:	4b24      	ldr	r3, [pc, #144]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d02a      	beq.n	800c08e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7fe ffc0 	bl	800afc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c046:	4b1d      	ldr	r3, [pc, #116]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c050:	4b1a      	ldr	r3, [pc, #104]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7fe ff99 	bl	800af8e <USBD_SetClassConfig>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00f      	beq.n	800c086 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f918 	bl	800c29e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7fe ffa5 	bl	800afc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2202      	movs	r2, #2
 800c080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c084:	e014      	b.n	800c0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f9d4 	bl	800c434 <USBD_CtlSendStatus>
      break;
 800c08c:	e010      	b.n	800c0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f9d0 	bl	800c434 <USBD_CtlSendStatus>
      break;
 800c094:	e00c      	b.n	800c0b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f900 	bl	800c29e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c09e:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <USBD_SetConfig+0x150>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7fe ff8e 	bl	800afc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ae:	bf00      	nop
  }

  return ret;
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000a88 	.word	0x20000a88

0800c0c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	88db      	ldrh	r3, [r3, #6]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d004      	beq.n	800c0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f8e2 	bl	800c29e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0da:	e023      	b.n	800c124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	dc02      	bgt.n	800c0ee <USBD_GetConfig+0x2e>
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc03      	bgt.n	800c0f4 <USBD_GetConfig+0x34>
 800c0ec:	e015      	b.n	800c11a <USBD_GetConfig+0x5a>
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d00b      	beq.n	800c10a <USBD_GetConfig+0x4a>
 800c0f2:	e012      	b.n	800c11a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	2201      	movs	r2, #1
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f93c 	bl	800c380 <USBD_CtlSendData>
        break;
 800c108:	e00c      	b.n	800c124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3304      	adds	r3, #4
 800c10e:	2201      	movs	r2, #1
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f934 	bl	800c380 <USBD_CtlSendData>
        break;
 800c118:	e004      	b.n	800c124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f8be 	bl	800c29e <USBD_CtlError>
        break;
 800c122:	bf00      	nop
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	2b02      	cmp	r3, #2
 800c142:	d81e      	bhi.n	800c182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	88db      	ldrh	r3, [r3, #6]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d004      	beq.n	800c156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f8a5 	bl	800c29e <USBD_CtlError>
        break;
 800c154:	e01a      	b.n	800c18c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c162:	2b00      	cmp	r3, #0
 800c164:	d005      	beq.n	800c172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f043 0202 	orr.w	r2, r3, #2
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	330c      	adds	r3, #12
 800c176:	2202      	movs	r2, #2
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f900 	bl	800c380 <USBD_CtlSendData>
      break;
 800c180:	e004      	b.n	800c18c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f88a 	bl	800c29e <USBD_CtlError>
      break;
 800c18a:	bf00      	nop
  }
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	885b      	ldrh	r3, [r3, #2]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d107      	bne.n	800c1b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f940 	bl	800c434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c1b4:	e013      	b.n	800c1de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d10b      	bne.n	800c1d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	889b      	ldrh	r3, [r3, #4]
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f930 	bl	800c434 <USBD_CtlSendStatus>
}
 800c1d4:	e003      	b.n	800c1de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f860 	bl	800c29e <USBD_CtlError>
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d80b      	bhi.n	800c216 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d10c      	bne.n	800c220 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f910 	bl	800c434 <USBD_CtlSendStatus>
      }
      break;
 800c214:	e004      	b.n	800c220 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f840 	bl	800c29e <USBD_CtlError>
      break;
 800c21e:	e000      	b.n	800c222 <USBD_ClrFeature+0x3c>
      break;
 800c220:	bf00      	nop
  }
}
 800c222:	bf00      	nop
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	781a      	ldrb	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3301      	adds	r3, #1
 800c244:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	781a      	ldrb	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7ff fa40 	bl	800b6da <SWAPBYTE>
 800c25a:	4603      	mov	r3, r0
 800c25c:	461a      	mov	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7ff fa33 	bl	800b6da <SWAPBYTE>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	3301      	adds	r3, #1
 800c280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff fa26 	bl	800b6da <SWAPBYTE>
 800c28e:	4603      	mov	r3, r0
 800c290:	461a      	mov	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	80da      	strh	r2, [r3, #6]
}
 800c296:	bf00      	nop
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b082      	sub	sp, #8
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2a8:	2180      	movs	r1, #128	@ 0x80
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fcd6 	bl	800cc5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fcd2 	bl	800cc5c <USBD_LL_StallEP>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d036      	beq.n	800c344 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f000 f836 	bl	800c34c <USBD_GetLen>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7812      	ldrb	r2, [r2, #0]
 800c2f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	4413      	add	r3, r2
 800c306:	2203      	movs	r2, #3
 800c308:	701a      	strb	r2, [r3, #0]
  idx++;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	3301      	adds	r3, #1
 800c30e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c310:	e013      	b.n	800c33a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	4413      	add	r3, r2
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	7812      	ldrb	r2, [r2, #0]
 800c31c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	3301      	adds	r3, #1
 800c322:	613b      	str	r3, [r7, #16]
    idx++;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	3301      	adds	r3, #1
 800c328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	4413      	add	r3, r2
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
    idx++;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	3301      	adds	r3, #1
 800c338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1e7      	bne.n	800c312 <USBD_GetString+0x52>
 800c342:	e000      	b.n	800c346 <USBD_GetString+0x86>
    return;
 800c344:	bf00      	nop
  }
}
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c354:	2300      	movs	r3, #0
 800c356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c35c:	e005      	b.n	800c36a <USBD_GetLen+0x1e>
  {
    len++;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	3301      	adds	r3, #1
 800c362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	3301      	adds	r3, #1
 800c368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1f5      	bne.n	800c35e <USBD_GetLen+0x12>
  }

  return len;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2202      	movs	r2, #2
 800c390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 fce1 	bl	800cd6e <USBD_LL_Transmit>

  return USBD_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	60f8      	str	r0, [r7, #12]
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 fcd0 	bl	800cd6e <USBD_LL_Transmit>

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2203      	movs	r2, #3
 800c3e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	2100      	movs	r1, #0
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 fcd4 	bl	800cdb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	2100      	movs	r1, #0
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 fcc3 	bl	800cdb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2204      	movs	r2, #4
 800c440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c444:	2300      	movs	r3, #0
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fc8f 	bl	800cd6e <USBD_LL_Transmit>

  return USBD_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2205      	movs	r2, #5
 800c466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c46a:	2300      	movs	r3, #0
 800c46c:	2200      	movs	r2, #0
 800c46e:	2100      	movs	r1, #0
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fc9d 	bl	800cdb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c484:	2200      	movs	r2, #0
 800c486:	4912      	ldr	r1, [pc, #72]	@ (800c4d0 <MX_USB_DEVICE_Init+0x50>)
 800c488:	4812      	ldr	r0, [pc, #72]	@ (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c48a:	f7fe fd03 	bl	800ae94 <USBD_Init>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c494:	f7f6 fc6a 	bl	8002d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c498:	490f      	ldr	r1, [pc, #60]	@ (800c4d8 <MX_USB_DEVICE_Init+0x58>)
 800c49a:	480e      	ldr	r0, [pc, #56]	@ (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c49c:	f7fe fd2a 	bl	800aef4 <USBD_RegisterClass>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4a6:	f7f6 fc61 	bl	8002d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4aa:	490c      	ldr	r1, [pc, #48]	@ (800c4dc <MX_USB_DEVICE_Init+0x5c>)
 800c4ac:	4809      	ldr	r0, [pc, #36]	@ (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c4ae:	f7fe fc21 	bl	800acf4 <USBD_CDC_RegisterInterface>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4b8:	f7f6 fc58 	bl	8002d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4bc:	4805      	ldr	r0, [pc, #20]	@ (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c4be:	f7fe fd4f 	bl	800af60 <USBD_Start>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4c8:	f7f6 fc50 	bl	8002d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4cc:	bf00      	nop
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20000158 	.word	0x20000158
 800c4d4:	20000a8c 	.word	0x20000a8c
 800c4d8:	200000c4 	.word	0x200000c4
 800c4dc:	20000144 	.word	0x20000144

0800c4e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4905      	ldr	r1, [pc, #20]	@ (800c4fc <CDC_Init_FS+0x1c>)
 800c4e8:	4805      	ldr	r0, [pc, #20]	@ (800c500 <CDC_Init_FS+0x20>)
 800c4ea:	f7fe fc1d 	bl	800ad28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4ee:	4905      	ldr	r1, [pc, #20]	@ (800c504 <CDC_Init_FS+0x24>)
 800c4f0:	4803      	ldr	r0, [pc, #12]	@ (800c500 <CDC_Init_FS+0x20>)
 800c4f2:	f7fe fc3b 	bl	800ad6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20001568 	.word	0x20001568
 800c500:	20000a8c 	.word	0x20000a8c
 800c504:	20000d68 	.word	0x20000d68

0800c508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c50c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c50e:	4618      	mov	r0, r3
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
 800c524:	4613      	mov	r3, r2
 800c526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	2b23      	cmp	r3, #35	@ 0x23
 800c52c:	d84a      	bhi.n	800c5c4 <CDC_Control_FS+0xac>
 800c52e:	a201      	add	r2, pc, #4	@ (adr r2, 800c534 <CDC_Control_FS+0x1c>)
 800c530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c534:	0800c5c5 	.word	0x0800c5c5
 800c538:	0800c5c5 	.word	0x0800c5c5
 800c53c:	0800c5c5 	.word	0x0800c5c5
 800c540:	0800c5c5 	.word	0x0800c5c5
 800c544:	0800c5c5 	.word	0x0800c5c5
 800c548:	0800c5c5 	.word	0x0800c5c5
 800c54c:	0800c5c5 	.word	0x0800c5c5
 800c550:	0800c5c5 	.word	0x0800c5c5
 800c554:	0800c5c5 	.word	0x0800c5c5
 800c558:	0800c5c5 	.word	0x0800c5c5
 800c55c:	0800c5c5 	.word	0x0800c5c5
 800c560:	0800c5c5 	.word	0x0800c5c5
 800c564:	0800c5c5 	.word	0x0800c5c5
 800c568:	0800c5c5 	.word	0x0800c5c5
 800c56c:	0800c5c5 	.word	0x0800c5c5
 800c570:	0800c5c5 	.word	0x0800c5c5
 800c574:	0800c5c5 	.word	0x0800c5c5
 800c578:	0800c5c5 	.word	0x0800c5c5
 800c57c:	0800c5c5 	.word	0x0800c5c5
 800c580:	0800c5c5 	.word	0x0800c5c5
 800c584:	0800c5c5 	.word	0x0800c5c5
 800c588:	0800c5c5 	.word	0x0800c5c5
 800c58c:	0800c5c5 	.word	0x0800c5c5
 800c590:	0800c5c5 	.word	0x0800c5c5
 800c594:	0800c5c5 	.word	0x0800c5c5
 800c598:	0800c5c5 	.word	0x0800c5c5
 800c59c:	0800c5c5 	.word	0x0800c5c5
 800c5a0:	0800c5c5 	.word	0x0800c5c5
 800c5a4:	0800c5c5 	.word	0x0800c5c5
 800c5a8:	0800c5c5 	.word	0x0800c5c5
 800c5ac:	0800c5c5 	.word	0x0800c5c5
 800c5b0:	0800c5c5 	.word	0x0800c5c5
 800c5b4:	0800c5c5 	.word	0x0800c5c5
 800c5b8:	0800c5c5 	.word	0x0800c5c5
 800c5bc:	0800c5c5 	.word	0x0800c5c5
 800c5c0:	0800c5c5 	.word	0x0800c5c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5c4:	bf00      	nop
  }

  return (USBD_OK);
 800c5c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	4805      	ldr	r0, [pc, #20]	@ (800c5f8 <CDC_Receive_FS+0x24>)
 800c5e2:	f7fe fbc3 	bl	800ad6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5e6:	4804      	ldr	r0, [pc, #16]	@ (800c5f8 <CDC_Receive_FS+0x24>)
 800c5e8:	f7fe fc1e 	bl	800ae28 <USBD_CDC_ReceivePacket>
 /* uint16_t len = *Len;
  CDC_Transmit_FS(Buf, len);*/
  return (USBD_OK);
 800c5ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000a8c 	.word	0x20000a8c

0800c5fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	460b      	mov	r3, r1
 800c606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c60c:	4b0d      	ldr	r3, [pc, #52]	@ (800c644 <CDC_Transmit_FS+0x48>)
 800c60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c61e:	2301      	movs	r3, #1
 800c620:	e00b      	b.n	800c63a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c622:	887b      	ldrh	r3, [r7, #2]
 800c624:	461a      	mov	r2, r3
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	4806      	ldr	r0, [pc, #24]	@ (800c644 <CDC_Transmit_FS+0x48>)
 800c62a:	f7fe fb7d 	bl	800ad28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c62e:	4805      	ldr	r0, [pc, #20]	@ (800c644 <CDC_Transmit_FS+0x48>)
 800c630:	f7fe fbba 	bl	800ada8 <USBD_CDC_TransmitPacket>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c638:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000a8c 	.word	0x20000a8c

0800c648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2212      	movs	r2, #18
 800c67c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c67e:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	20000174 	.word	0x20000174

0800c690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2204      	movs	r2, #4
 800c6a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6a2:	4b03      	ldr	r3, [pc, #12]	@ (800c6b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	20000188 	.word	0x20000188

0800c6b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d105      	bne.n	800c6d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	4907      	ldr	r1, [pc, #28]	@ (800c6e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ca:	4808      	ldr	r0, [pc, #32]	@ (800c6ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c6cc:	f7ff fdf8 	bl	800c2c0 <USBD_GetString>
 800c6d0:	e004      	b.n	800c6dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	4904      	ldr	r1, [pc, #16]	@ (800c6e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6d6:	4805      	ldr	r0, [pc, #20]	@ (800c6ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c6d8:	f7ff fdf2 	bl	800c2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6dc:	4b02      	ldr	r3, [pc, #8]	@ (800c6e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20001d68 	.word	0x20001d68
 800c6ec:	08010b08 	.word	0x08010b08

0800c6f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	4904      	ldr	r1, [pc, #16]	@ (800c710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c700:	4804      	ldr	r0, [pc, #16]	@ (800c714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c702:	f7ff fddd 	bl	800c2c0 <USBD_GetString>
  return USBD_StrDesc;
 800c706:	4b02      	ldr	r3, [pc, #8]	@ (800c710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20001d68 	.word	0x20001d68
 800c714:	08010b20 	.word	0x08010b20

0800c718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	221a      	movs	r2, #26
 800c728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c72a:	f000 f843 	bl	800c7b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c72e:	4b02      	ldr	r3, [pc, #8]	@ (800c738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2000018c 	.word	0x2000018c

0800c73c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	6039      	str	r1, [r7, #0]
 800c746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d105      	bne.n	800c75a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	4907      	ldr	r1, [pc, #28]	@ (800c770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c752:	4808      	ldr	r0, [pc, #32]	@ (800c774 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c754:	f7ff fdb4 	bl	800c2c0 <USBD_GetString>
 800c758:	e004      	b.n	800c764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	4904      	ldr	r1, [pc, #16]	@ (800c770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c75e:	4805      	ldr	r0, [pc, #20]	@ (800c774 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c760:	f7ff fdae 	bl	800c2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c764:	4b02      	ldr	r3, [pc, #8]	@ (800c770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c766:	4618      	mov	r0, r3
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20001d68 	.word	0x20001d68
 800c774:	08010b34 	.word	0x08010b34

0800c778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	6039      	str	r1, [r7, #0]
 800c782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	4907      	ldr	r1, [pc, #28]	@ (800c7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c78e:	4808      	ldr	r0, [pc, #32]	@ (800c7b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c790:	f7ff fd96 	bl	800c2c0 <USBD_GetString>
 800c794:	e004      	b.n	800c7a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	4904      	ldr	r1, [pc, #16]	@ (800c7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c79a:	4805      	ldr	r0, [pc, #20]	@ (800c7b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c79c:	f7ff fd90 	bl	800c2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7a0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20001d68 	.word	0x20001d68
 800c7b0:	08010b40 	.word	0x08010b40

0800c7b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f8 <Get_SerialNum+0x44>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c7fc <Get_SerialNum+0x48>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c800 <Get_SerialNum+0x4c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d009      	beq.n	800c7ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7da:	2208      	movs	r2, #8
 800c7dc:	4909      	ldr	r1, [pc, #36]	@ (800c804 <Get_SerialNum+0x50>)
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f000 f814 	bl	800c80c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7e4:	2204      	movs	r2, #4
 800c7e6:	4908      	ldr	r1, [pc, #32]	@ (800c808 <Get_SerialNum+0x54>)
 800c7e8:	68b8      	ldr	r0, [r7, #8]
 800c7ea:	f000 f80f 	bl	800c80c <IntToUnicode>
  }
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	1fff7a10 	.word	0x1fff7a10
 800c7fc:	1fff7a14 	.word	0x1fff7a14
 800c800:	1fff7a18 	.word	0x1fff7a18
 800c804:	2000018e 	.word	0x2000018e
 800c808:	2000019e 	.word	0x2000019e

0800c80c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b087      	sub	sp, #28
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	4613      	mov	r3, r2
 800c818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c81e:	2300      	movs	r3, #0
 800c820:	75fb      	strb	r3, [r7, #23]
 800c822:	e027      	b.n	800c874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	0f1b      	lsrs	r3, r3, #28
 800c828:	2b09      	cmp	r3, #9
 800c82a:	d80b      	bhi.n	800c844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	0f1b      	lsrs	r3, r3, #28
 800c830:	b2da      	uxtb	r2, r3
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	4619      	mov	r1, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	440b      	add	r3, r1
 800c83c:	3230      	adds	r2, #48	@ 0x30
 800c83e:	b2d2      	uxtb	r2, r2
 800c840:	701a      	strb	r2, [r3, #0]
 800c842:	e00a      	b.n	800c85a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	0f1b      	lsrs	r3, r3, #28
 800c848:	b2da      	uxtb	r2, r3
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	4619      	mov	r1, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	440b      	add	r3, r1
 800c854:	3237      	adds	r2, #55	@ 0x37
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	011b      	lsls	r3, r3, #4
 800c85e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	3301      	adds	r3, #1
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	4413      	add	r3, r2
 800c86a:	2200      	movs	r2, #0
 800c86c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	3301      	adds	r3, #1
 800c872:	75fb      	strb	r3, [r7, #23]
 800c874:	7dfa      	ldrb	r2, [r7, #23]
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d3d3      	bcc.n	800c824 <IntToUnicode+0x18>
  }
}
 800c87c:	bf00      	nop
 800c87e:	bf00      	nop
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
	...

0800c88c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08a      	sub	sp, #40	@ 0x28
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c894:	f107 0314 	add.w	r3, r7, #20
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	605a      	str	r2, [r3, #4]
 800c89e:	609a      	str	r2, [r3, #8]
 800c8a0:	60da      	str	r2, [r3, #12]
 800c8a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8ac:	d13a      	bne.n	800c924 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b6:	4a1d      	ldr	r2, [pc, #116]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8b8:	f043 0301 	orr.w	r3, r3, #1
 800c8bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c8be:	4b1b      	ldr	r3, [pc, #108]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c8ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8dc:	230a      	movs	r3, #10
 800c8de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8e0:	f107 0314 	add.w	r3, r7, #20
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4812      	ldr	r0, [pc, #72]	@ (800c930 <HAL_PCD_MspInit+0xa4>)
 800c8e8:	f7f8 fa1a 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f0:	4a0e      	ldr	r2, [pc, #56]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f6:	6353      	str	r3, [r2, #52]	@ 0x34
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c8fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c900:	4a0a      	ldr	r2, [pc, #40]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c906:	6453      	str	r3, [r2, #68]	@ 0x44
 800c908:	4b08      	ldr	r3, [pc, #32]	@ (800c92c <HAL_PCD_MspInit+0xa0>)
 800c90a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800c914:	2200      	movs	r2, #0
 800c916:	2102      	movs	r1, #2
 800c918:	2043      	movs	r0, #67	@ 0x43
 800c91a:	f7f7 fc4c 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c91e:	2043      	movs	r0, #67	@ 0x43
 800c920:	f7f7 fc65 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c924:	bf00      	nop
 800c926:	3728      	adds	r7, #40	@ 0x28
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	40023800 	.word	0x40023800
 800c930:	40020000 	.word	0x40020000

0800c934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c948:	4619      	mov	r1, r3
 800c94a:	4610      	mov	r0, r2
 800c94c:	f7fe fb55 	bl	800affa <USBD_LL_SetupStage>
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c96a:	78fa      	ldrb	r2, [r7, #3]
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	78fb      	ldrb	r3, [r7, #3]
 800c980:	4619      	mov	r1, r3
 800c982:	f7fe fb8f 	bl	800b0a4 <USBD_LL_DataOutStage>
}
 800c986:	bf00      	nop
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	460b      	mov	r3, r1
 800c998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c9a0:	78fa      	ldrb	r2, [r7, #3]
 800c9a2:	6879      	ldr	r1, [r7, #4]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	440b      	add	r3, r1
 800c9ae:	3320      	adds	r3, #32
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f7fe fc28 	bl	800b20a <USBD_LL_DataInStage>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fd62 	bl	800b49a <USBD_LL_SOF>
}
 800c9d6:	bf00      	nop
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	79db      	ldrb	r3, [r3, #7]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d001      	beq.n	800c9f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9f2:	f7f6 f9bb 	bl	8002d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9fc:	7bfa      	ldrb	r2, [r7, #15]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe fd06 	bl	800b412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fcae 	bl	800b36e <USBD_LL_Reset>
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fd01 	bl	800b432 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	6812      	ldr	r2, [r2, #0]
 800ca3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7adb      	ldrb	r3, [r3, #11]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca50:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <HAL_PCD_SuspendCallback+0x48>)
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	4a03      	ldr	r2, [pc, #12]	@ (800ca64 <HAL_PCD_SuspendCallback+0x48>)
 800ca56:	f043 0306 	orr.w	r3, r3, #6
 800ca5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fcf7 	bl	800b46a <USBD_LL_Resume>
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca96:	78fa      	ldrb	r2, [r7, #3]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fd4f 	bl	800b53e <USBD_LL_IsoOUTIncomplete>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caba:	78fa      	ldrb	r2, [r7, #3]
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe fd0b 	bl	800b4da <USBD_LL_IsoINIncomplete>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fd61 	bl	800b5a2 <USBD_LL_DevConnected>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe fd5e 	bl	800b5b8 <USBD_LL_DevDisconnected>
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d13c      	bne.n	800cb8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb14:	4a20      	ldr	r2, [pc, #128]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a1e      	ldr	r2, [pc, #120]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb24:	4b1c      	ldr	r3, [pc, #112]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cb2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb2c:	4b1a      	ldr	r3, [pc, #104]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb2e:	2204      	movs	r2, #4
 800cb30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb32:	4b19      	ldr	r3, [pc, #100]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb34:	2202      	movs	r2, #2
 800cb36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb38:	4b17      	ldr	r3, [pc, #92]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb3e:	4b16      	ldr	r3, [pc, #88]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb40:	2202      	movs	r2, #2
 800cb42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb44:	4b14      	ldr	r3, [pc, #80]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb4a:	4b13      	ldr	r3, [pc, #76]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb50:	4b11      	ldr	r3, [pc, #68]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb56:	4b10      	ldr	r3, [pc, #64]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb5c:	4b0e      	ldr	r3, [pc, #56]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb62:	480d      	ldr	r0, [pc, #52]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb64:	f7f8 faac 	bl	80050c0 <HAL_PCD_Init>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb6e:	f7f6 f8fd 	bl	8002d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb72:	2180      	movs	r1, #128	@ 0x80
 800cb74:	4808      	ldr	r0, [pc, #32]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb76:	f7f9 fcd6 	bl	8006526 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb7a:	2240      	movs	r2, #64	@ 0x40
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4806      	ldr	r0, [pc, #24]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb80:	f7f9 fc8a 	bl	8006498 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb84:	2280      	movs	r2, #128	@ 0x80
 800cb86:	2101      	movs	r1, #1
 800cb88:	4803      	ldr	r0, [pc, #12]	@ (800cb98 <USBD_LL_Init+0x94>)
 800cb8a:	f7f9 fc85 	bl	8006498 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20001f68 	.word	0x20001f68

0800cb9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f8 fb93 	bl	80052de <HAL_PCD_Start>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbbc:	7bfb      	ldrb	r3, [r7, #15]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 f942 	bl	800ce48 <USBD_Get_USB_Status>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b084      	sub	sp, #16
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	4608      	mov	r0, r1
 800cbdc:	4611      	mov	r1, r2
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	70fb      	strb	r3, [r7, #3]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70bb      	strb	r3, [r7, #2]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cbfa:	78bb      	ldrb	r3, [r7, #2]
 800cbfc:	883a      	ldrh	r2, [r7, #0]
 800cbfe:	78f9      	ldrb	r1, [r7, #3]
 800cc00:	f7f9 f867 	bl	8005cd2 <HAL_PCD_EP_Open>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f91c 	bl	800ce48 <USBD_Get_USB_Status>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc38:	78fa      	ldrb	r2, [r7, #3]
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7f9 f8b0 	bl	8005da2 <HAL_PCD_EP_Close>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 f8fd 	bl	800ce48 <USBD_Get_USB_Status>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc52:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc76:	78fa      	ldrb	r2, [r7, #3]
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f9 f968 	bl	8005f50 <HAL_PCD_EP_SetStall>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f8de 	bl	800ce48 <USBD_Get_USB_Status>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f9 f9ac 	bl	8006016 <HAL_PCD_EP_ClrStall>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f8bf 	bl	800ce48 <USBD_Get_USB_Status>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	da0b      	bge.n	800cd0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccfa:	68f9      	ldr	r1, [r7, #12]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	4413      	add	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	440b      	add	r3, r1
 800cd06:	3316      	adds	r3, #22
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	e00b      	b.n	800cd24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	4613      	mov	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	440b      	add	r3, r1
 800cd1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cd22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f8 ff9b 	bl	8005c8a <HAL_PCD_SetAddress>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f874 	bl	800ce48 <USBD_Get_USB_Status>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b086      	sub	sp, #24
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	603b      	str	r3, [r7, #0]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd8c:	7af9      	ldrb	r1, [r7, #11]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	f7f9 f8a3 	bl	8005edc <HAL_PCD_EP_Transmit>
 800cd96:	4603      	mov	r3, r0
 800cd98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 f853 	bl	800ce48 <USBD_Get_USB_Status>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cda6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	607a      	str	r2, [r7, #4]
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdce:	7af9      	ldrb	r1, [r7, #11]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	f7f9 f82f 	bl	8005e36 <HAL_PCD_EP_Receive>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cddc:	7dfb      	ldrb	r3, [r7, #23]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 f832 	bl	800ce48 <USBD_Get_USB_Status>
 800cde4:	4603      	mov	r3, r0
 800cde6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cde8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce04:	78fa      	ldrb	r2, [r7, #3]
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7f9 f84f 	bl	8005eac <HAL_PCD_EP_GetRxCount>
 800ce0e:	4603      	mov	r3, r0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce20:	4b03      	ldr	r3, [pc, #12]	@ (800ce30 <USBD_static_malloc+0x18>)
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	2000244c 	.word	0x2000244c

0800ce34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]

}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	2b03      	cmp	r3, #3
 800ce5a:	d817      	bhi.n	800ce8c <USBD_Get_USB_Status+0x44>
 800ce5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <USBD_Get_USB_Status+0x1c>)
 800ce5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce62:	bf00      	nop
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce7b 	.word	0x0800ce7b
 800ce6c:	0800ce81 	.word	0x0800ce81
 800ce70:	0800ce87 	.word	0x0800ce87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	73fb      	strb	r3, [r7, #15]
    break;
 800ce78:	e00b      	b.n	800ce92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7e:	e008      	b.n	800ce92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce80:	2301      	movs	r3, #1
 800ce82:	73fb      	strb	r3, [r7, #15]
    break;
 800ce84:	e005      	b.n	800ce92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce86:	2303      	movs	r3, #3
 800ce88:	73fb      	strb	r3, [r7, #15]
    break;
 800ce8a:	e002      	b.n	800ce92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce90:	bf00      	nop
  }
  return usb_status;
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <malloc>:
 800cea0:	4b02      	ldr	r3, [pc, #8]	@ (800ceac <malloc+0xc>)
 800cea2:	4601      	mov	r1, r0
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	f000 b82d 	b.w	800cf04 <_malloc_r>
 800ceaa:	bf00      	nop
 800ceac:	200001b4 	.word	0x200001b4

0800ceb0 <free>:
 800ceb0:	4b02      	ldr	r3, [pc, #8]	@ (800cebc <free+0xc>)
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	f001 bdb3 	b.w	800ea20 <_free_r>
 800ceba:	bf00      	nop
 800cebc:	200001b4 	.word	0x200001b4

0800cec0 <sbrk_aligned>:
 800cec0:	b570      	push	{r4, r5, r6, lr}
 800cec2:	4e0f      	ldr	r6, [pc, #60]	@ (800cf00 <sbrk_aligned+0x40>)
 800cec4:	460c      	mov	r4, r1
 800cec6:	6831      	ldr	r1, [r6, #0]
 800cec8:	4605      	mov	r5, r0
 800ceca:	b911      	cbnz	r1, 800ced2 <sbrk_aligned+0x12>
 800cecc:	f000 ff0c 	bl	800dce8 <_sbrk_r>
 800ced0:	6030      	str	r0, [r6, #0]
 800ced2:	4621      	mov	r1, r4
 800ced4:	4628      	mov	r0, r5
 800ced6:	f000 ff07 	bl	800dce8 <_sbrk_r>
 800ceda:	1c43      	adds	r3, r0, #1
 800cedc:	d103      	bne.n	800cee6 <sbrk_aligned+0x26>
 800cede:	f04f 34ff 	mov.w	r4, #4294967295
 800cee2:	4620      	mov	r0, r4
 800cee4:	bd70      	pop	{r4, r5, r6, pc}
 800cee6:	1cc4      	adds	r4, r0, #3
 800cee8:	f024 0403 	bic.w	r4, r4, #3
 800ceec:	42a0      	cmp	r0, r4
 800ceee:	d0f8      	beq.n	800cee2 <sbrk_aligned+0x22>
 800cef0:	1a21      	subs	r1, r4, r0
 800cef2:	4628      	mov	r0, r5
 800cef4:	f000 fef8 	bl	800dce8 <_sbrk_r>
 800cef8:	3001      	adds	r0, #1
 800cefa:	d1f2      	bne.n	800cee2 <sbrk_aligned+0x22>
 800cefc:	e7ef      	b.n	800cede <sbrk_aligned+0x1e>
 800cefe:	bf00      	nop
 800cf00:	2000266c 	.word	0x2000266c

0800cf04 <_malloc_r>:
 800cf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf08:	1ccd      	adds	r5, r1, #3
 800cf0a:	f025 0503 	bic.w	r5, r5, #3
 800cf0e:	3508      	adds	r5, #8
 800cf10:	2d0c      	cmp	r5, #12
 800cf12:	bf38      	it	cc
 800cf14:	250c      	movcc	r5, #12
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	4606      	mov	r6, r0
 800cf1a:	db01      	blt.n	800cf20 <_malloc_r+0x1c>
 800cf1c:	42a9      	cmp	r1, r5
 800cf1e:	d904      	bls.n	800cf2a <_malloc_r+0x26>
 800cf20:	230c      	movs	r3, #12
 800cf22:	6033      	str	r3, [r6, #0]
 800cf24:	2000      	movs	r0, #0
 800cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d000 <_malloc_r+0xfc>
 800cf2e:	f000 f869 	bl	800d004 <__malloc_lock>
 800cf32:	f8d8 3000 	ldr.w	r3, [r8]
 800cf36:	461c      	mov	r4, r3
 800cf38:	bb44      	cbnz	r4, 800cf8c <_malloc_r+0x88>
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7ff ffbf 	bl	800cec0 <sbrk_aligned>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	4604      	mov	r4, r0
 800cf46:	d158      	bne.n	800cffa <_malloc_r+0xf6>
 800cf48:	f8d8 4000 	ldr.w	r4, [r8]
 800cf4c:	4627      	mov	r7, r4
 800cf4e:	2f00      	cmp	r7, #0
 800cf50:	d143      	bne.n	800cfda <_malloc_r+0xd6>
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	d04b      	beq.n	800cfee <_malloc_r+0xea>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	4639      	mov	r1, r7
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	eb04 0903 	add.w	r9, r4, r3
 800cf60:	f000 fec2 	bl	800dce8 <_sbrk_r>
 800cf64:	4581      	cmp	r9, r0
 800cf66:	d142      	bne.n	800cfee <_malloc_r+0xea>
 800cf68:	6821      	ldr	r1, [r4, #0]
 800cf6a:	1a6d      	subs	r5, r5, r1
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7ff ffa6 	bl	800cec0 <sbrk_aligned>
 800cf74:	3001      	adds	r0, #1
 800cf76:	d03a      	beq.n	800cfee <_malloc_r+0xea>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	442b      	add	r3, r5
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	bb62      	cbnz	r2, 800cfe0 <_malloc_r+0xdc>
 800cf86:	f8c8 7000 	str.w	r7, [r8]
 800cf8a:	e00f      	b.n	800cfac <_malloc_r+0xa8>
 800cf8c:	6822      	ldr	r2, [r4, #0]
 800cf8e:	1b52      	subs	r2, r2, r5
 800cf90:	d420      	bmi.n	800cfd4 <_malloc_r+0xd0>
 800cf92:	2a0b      	cmp	r2, #11
 800cf94:	d917      	bls.n	800cfc6 <_malloc_r+0xc2>
 800cf96:	1961      	adds	r1, r4, r5
 800cf98:	42a3      	cmp	r3, r4
 800cf9a:	6025      	str	r5, [r4, #0]
 800cf9c:	bf18      	it	ne
 800cf9e:	6059      	strne	r1, [r3, #4]
 800cfa0:	6863      	ldr	r3, [r4, #4]
 800cfa2:	bf08      	it	eq
 800cfa4:	f8c8 1000 	streq.w	r1, [r8]
 800cfa8:	5162      	str	r2, [r4, r5]
 800cfaa:	604b      	str	r3, [r1, #4]
 800cfac:	4630      	mov	r0, r6
 800cfae:	f000 f82f 	bl	800d010 <__malloc_unlock>
 800cfb2:	f104 000b 	add.w	r0, r4, #11
 800cfb6:	1d23      	adds	r3, r4, #4
 800cfb8:	f020 0007 	bic.w	r0, r0, #7
 800cfbc:	1ac2      	subs	r2, r0, r3
 800cfbe:	bf1c      	itt	ne
 800cfc0:	1a1b      	subne	r3, r3, r0
 800cfc2:	50a3      	strne	r3, [r4, r2]
 800cfc4:	e7af      	b.n	800cf26 <_malloc_r+0x22>
 800cfc6:	6862      	ldr	r2, [r4, #4]
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	bf0c      	ite	eq
 800cfcc:	f8c8 2000 	streq.w	r2, [r8]
 800cfd0:	605a      	strne	r2, [r3, #4]
 800cfd2:	e7eb      	b.n	800cfac <_malloc_r+0xa8>
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	6864      	ldr	r4, [r4, #4]
 800cfd8:	e7ae      	b.n	800cf38 <_malloc_r+0x34>
 800cfda:	463c      	mov	r4, r7
 800cfdc:	687f      	ldr	r7, [r7, #4]
 800cfde:	e7b6      	b.n	800cf4e <_malloc_r+0x4a>
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d1fb      	bne.n	800cfe0 <_malloc_r+0xdc>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	6053      	str	r3, [r2, #4]
 800cfec:	e7de      	b.n	800cfac <_malloc_r+0xa8>
 800cfee:	230c      	movs	r3, #12
 800cff0:	6033      	str	r3, [r6, #0]
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f80c 	bl	800d010 <__malloc_unlock>
 800cff8:	e794      	b.n	800cf24 <_malloc_r+0x20>
 800cffa:	6005      	str	r5, [r0, #0]
 800cffc:	e7d6      	b.n	800cfac <_malloc_r+0xa8>
 800cffe:	bf00      	nop
 800d000:	20002670 	.word	0x20002670

0800d004 <__malloc_lock>:
 800d004:	4801      	ldr	r0, [pc, #4]	@ (800d00c <__malloc_lock+0x8>)
 800d006:	f000 bebc 	b.w	800dd82 <__retarget_lock_acquire_recursive>
 800d00a:	bf00      	nop
 800d00c:	200027b4 	.word	0x200027b4

0800d010 <__malloc_unlock>:
 800d010:	4801      	ldr	r0, [pc, #4]	@ (800d018 <__malloc_unlock+0x8>)
 800d012:	f000 beb7 	b.w	800dd84 <__retarget_lock_release_recursive>
 800d016:	bf00      	nop
 800d018:	200027b4 	.word	0x200027b4

0800d01c <__cvt>:
 800d01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d020:	ec57 6b10 	vmov	r6, r7, d0
 800d024:	2f00      	cmp	r7, #0
 800d026:	460c      	mov	r4, r1
 800d028:	4619      	mov	r1, r3
 800d02a:	463b      	mov	r3, r7
 800d02c:	bfbb      	ittet	lt
 800d02e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d032:	461f      	movlt	r7, r3
 800d034:	2300      	movge	r3, #0
 800d036:	232d      	movlt	r3, #45	@ 0x2d
 800d038:	700b      	strb	r3, [r1, #0]
 800d03a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d03c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d040:	4691      	mov	r9, r2
 800d042:	f023 0820 	bic.w	r8, r3, #32
 800d046:	bfbc      	itt	lt
 800d048:	4632      	movlt	r2, r6
 800d04a:	4616      	movlt	r6, r2
 800d04c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d050:	d005      	beq.n	800d05e <__cvt+0x42>
 800d052:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d056:	d100      	bne.n	800d05a <__cvt+0x3e>
 800d058:	3401      	adds	r4, #1
 800d05a:	2102      	movs	r1, #2
 800d05c:	e000      	b.n	800d060 <__cvt+0x44>
 800d05e:	2103      	movs	r1, #3
 800d060:	ab03      	add	r3, sp, #12
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	ab02      	add	r3, sp, #8
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	ec47 6b10 	vmov	d0, r6, r7
 800d06c:	4653      	mov	r3, sl
 800d06e:	4622      	mov	r2, r4
 800d070:	f000 ff12 	bl	800de98 <_dtoa_r>
 800d074:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d078:	4605      	mov	r5, r0
 800d07a:	d119      	bne.n	800d0b0 <__cvt+0x94>
 800d07c:	f019 0f01 	tst.w	r9, #1
 800d080:	d00e      	beq.n	800d0a0 <__cvt+0x84>
 800d082:	eb00 0904 	add.w	r9, r0, r4
 800d086:	2200      	movs	r2, #0
 800d088:	2300      	movs	r3, #0
 800d08a:	4630      	mov	r0, r6
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 800d092:	b108      	cbz	r0, 800d098 <__cvt+0x7c>
 800d094:	f8cd 900c 	str.w	r9, [sp, #12]
 800d098:	2230      	movs	r2, #48	@ 0x30
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	454b      	cmp	r3, r9
 800d09e:	d31e      	bcc.n	800d0de <__cvt+0xc2>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0a4:	1b5b      	subs	r3, r3, r5
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	6013      	str	r3, [r2, #0]
 800d0aa:	b004      	add	sp, #16
 800d0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0b4:	eb00 0904 	add.w	r9, r0, r4
 800d0b8:	d1e5      	bne.n	800d086 <__cvt+0x6a>
 800d0ba:	7803      	ldrb	r3, [r0, #0]
 800d0bc:	2b30      	cmp	r3, #48	@ 0x30
 800d0be:	d10a      	bne.n	800d0d6 <__cvt+0xba>
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f7f3 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0cc:	b918      	cbnz	r0, 800d0d6 <__cvt+0xba>
 800d0ce:	f1c4 0401 	rsb	r4, r4, #1
 800d0d2:	f8ca 4000 	str.w	r4, [sl]
 800d0d6:	f8da 3000 	ldr.w	r3, [sl]
 800d0da:	4499      	add	r9, r3
 800d0dc:	e7d3      	b.n	800d086 <__cvt+0x6a>
 800d0de:	1c59      	adds	r1, r3, #1
 800d0e0:	9103      	str	r1, [sp, #12]
 800d0e2:	701a      	strb	r2, [r3, #0]
 800d0e4:	e7d9      	b.n	800d09a <__cvt+0x7e>

0800d0e6 <__exponent>:
 800d0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	bfba      	itte	lt
 800d0ec:	4249      	neglt	r1, r1
 800d0ee:	232d      	movlt	r3, #45	@ 0x2d
 800d0f0:	232b      	movge	r3, #43	@ 0x2b
 800d0f2:	2909      	cmp	r1, #9
 800d0f4:	7002      	strb	r2, [r0, #0]
 800d0f6:	7043      	strb	r3, [r0, #1]
 800d0f8:	dd29      	ble.n	800d14e <__exponent+0x68>
 800d0fa:	f10d 0307 	add.w	r3, sp, #7
 800d0fe:	461d      	mov	r5, r3
 800d100:	270a      	movs	r7, #10
 800d102:	461a      	mov	r2, r3
 800d104:	fbb1 f6f7 	udiv	r6, r1, r7
 800d108:	fb07 1416 	mls	r4, r7, r6, r1
 800d10c:	3430      	adds	r4, #48	@ 0x30
 800d10e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d112:	460c      	mov	r4, r1
 800d114:	2c63      	cmp	r4, #99	@ 0x63
 800d116:	f103 33ff 	add.w	r3, r3, #4294967295
 800d11a:	4631      	mov	r1, r6
 800d11c:	dcf1      	bgt.n	800d102 <__exponent+0x1c>
 800d11e:	3130      	adds	r1, #48	@ 0x30
 800d120:	1e94      	subs	r4, r2, #2
 800d122:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d126:	1c41      	adds	r1, r0, #1
 800d128:	4623      	mov	r3, r4
 800d12a:	42ab      	cmp	r3, r5
 800d12c:	d30a      	bcc.n	800d144 <__exponent+0x5e>
 800d12e:	f10d 0309 	add.w	r3, sp, #9
 800d132:	1a9b      	subs	r3, r3, r2
 800d134:	42ac      	cmp	r4, r5
 800d136:	bf88      	it	hi
 800d138:	2300      	movhi	r3, #0
 800d13a:	3302      	adds	r3, #2
 800d13c:	4403      	add	r3, r0
 800d13e:	1a18      	subs	r0, r3, r0
 800d140:	b003      	add	sp, #12
 800d142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d144:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d148:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d14c:	e7ed      	b.n	800d12a <__exponent+0x44>
 800d14e:	2330      	movs	r3, #48	@ 0x30
 800d150:	3130      	adds	r1, #48	@ 0x30
 800d152:	7083      	strb	r3, [r0, #2]
 800d154:	70c1      	strb	r1, [r0, #3]
 800d156:	1d03      	adds	r3, r0, #4
 800d158:	e7f1      	b.n	800d13e <__exponent+0x58>
	...

0800d15c <_printf_float>:
 800d15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	b08d      	sub	sp, #52	@ 0x34
 800d162:	460c      	mov	r4, r1
 800d164:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d168:	4616      	mov	r6, r2
 800d16a:	461f      	mov	r7, r3
 800d16c:	4605      	mov	r5, r0
 800d16e:	f000 fd83 	bl	800dc78 <_localeconv_r>
 800d172:	6803      	ldr	r3, [r0, #0]
 800d174:	9304      	str	r3, [sp, #16]
 800d176:	4618      	mov	r0, r3
 800d178:	f7f3 f882 	bl	8000280 <strlen>
 800d17c:	2300      	movs	r3, #0
 800d17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d180:	f8d8 3000 	ldr.w	r3, [r8]
 800d184:	9005      	str	r0, [sp, #20]
 800d186:	3307      	adds	r3, #7
 800d188:	f023 0307 	bic.w	r3, r3, #7
 800d18c:	f103 0208 	add.w	r2, r3, #8
 800d190:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d194:	f8d4 b000 	ldr.w	fp, [r4]
 800d198:	f8c8 2000 	str.w	r2, [r8]
 800d19c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d1a4:	9307      	str	r3, [sp, #28]
 800d1a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d1aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d1ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1b2:	4b9c      	ldr	r3, [pc, #624]	@ (800d424 <_printf_float+0x2c8>)
 800d1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b8:	f7f3 fcc0 	bl	8000b3c <__aeabi_dcmpun>
 800d1bc:	bb70      	cbnz	r0, 800d21c <_printf_float+0xc0>
 800d1be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1c2:	4b98      	ldr	r3, [pc, #608]	@ (800d424 <_printf_float+0x2c8>)
 800d1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c8:	f7f3 fc9a 	bl	8000b00 <__aeabi_dcmple>
 800d1cc:	bb30      	cbnz	r0, 800d21c <_printf_float+0xc0>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	f7f3 fc89 	bl	8000aec <__aeabi_dcmplt>
 800d1da:	b110      	cbz	r0, 800d1e2 <_printf_float+0x86>
 800d1dc:	232d      	movs	r3, #45	@ 0x2d
 800d1de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1e2:	4a91      	ldr	r2, [pc, #580]	@ (800d428 <_printf_float+0x2cc>)
 800d1e4:	4b91      	ldr	r3, [pc, #580]	@ (800d42c <_printf_float+0x2d0>)
 800d1e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d1ea:	bf94      	ite	ls
 800d1ec:	4690      	movls	r8, r2
 800d1ee:	4698      	movhi	r8, r3
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	f02b 0304 	bic.w	r3, fp, #4
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	9700      	str	r7, [sp, #0]
 800d200:	4633      	mov	r3, r6
 800d202:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d204:	4621      	mov	r1, r4
 800d206:	4628      	mov	r0, r5
 800d208:	f000 f9d2 	bl	800d5b0 <_printf_common>
 800d20c:	3001      	adds	r0, #1
 800d20e:	f040 808d 	bne.w	800d32c <_printf_float+0x1d0>
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	b00d      	add	sp, #52	@ 0x34
 800d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21c:	4642      	mov	r2, r8
 800d21e:	464b      	mov	r3, r9
 800d220:	4640      	mov	r0, r8
 800d222:	4649      	mov	r1, r9
 800d224:	f7f3 fc8a 	bl	8000b3c <__aeabi_dcmpun>
 800d228:	b140      	cbz	r0, 800d23c <_printf_float+0xe0>
 800d22a:	464b      	mov	r3, r9
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfbc      	itt	lt
 800d230:	232d      	movlt	r3, #45	@ 0x2d
 800d232:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d236:	4a7e      	ldr	r2, [pc, #504]	@ (800d430 <_printf_float+0x2d4>)
 800d238:	4b7e      	ldr	r3, [pc, #504]	@ (800d434 <_printf_float+0x2d8>)
 800d23a:	e7d4      	b.n	800d1e6 <_printf_float+0x8a>
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d242:	9206      	str	r2, [sp, #24]
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	d13b      	bne.n	800d2c0 <_printf_float+0x164>
 800d248:	2306      	movs	r3, #6
 800d24a:	6063      	str	r3, [r4, #4]
 800d24c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d250:	2300      	movs	r3, #0
 800d252:	6022      	str	r2, [r4, #0]
 800d254:	9303      	str	r3, [sp, #12]
 800d256:	ab0a      	add	r3, sp, #40	@ 0x28
 800d258:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d25c:	ab09      	add	r3, sp, #36	@ 0x24
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	6861      	ldr	r1, [r4, #4]
 800d262:	ec49 8b10 	vmov	d0, r8, r9
 800d266:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d26a:	4628      	mov	r0, r5
 800d26c:	f7ff fed6 	bl	800d01c <__cvt>
 800d270:	9b06      	ldr	r3, [sp, #24]
 800d272:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d274:	2b47      	cmp	r3, #71	@ 0x47
 800d276:	4680      	mov	r8, r0
 800d278:	d129      	bne.n	800d2ce <_printf_float+0x172>
 800d27a:	1cc8      	adds	r0, r1, #3
 800d27c:	db02      	blt.n	800d284 <_printf_float+0x128>
 800d27e:	6863      	ldr	r3, [r4, #4]
 800d280:	4299      	cmp	r1, r3
 800d282:	dd41      	ble.n	800d308 <_printf_float+0x1ac>
 800d284:	f1aa 0a02 	sub.w	sl, sl, #2
 800d288:	fa5f fa8a 	uxtb.w	sl, sl
 800d28c:	3901      	subs	r1, #1
 800d28e:	4652      	mov	r2, sl
 800d290:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d294:	9109      	str	r1, [sp, #36]	@ 0x24
 800d296:	f7ff ff26 	bl	800d0e6 <__exponent>
 800d29a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d29c:	1813      	adds	r3, r2, r0
 800d29e:	2a01      	cmp	r2, #1
 800d2a0:	4681      	mov	r9, r0
 800d2a2:	6123      	str	r3, [r4, #16]
 800d2a4:	dc02      	bgt.n	800d2ac <_printf_float+0x150>
 800d2a6:	6822      	ldr	r2, [r4, #0]
 800d2a8:	07d2      	lsls	r2, r2, #31
 800d2aa:	d501      	bpl.n	800d2b0 <_printf_float+0x154>
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	6123      	str	r3, [r4, #16]
 800d2b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0a2      	beq.n	800d1fe <_printf_float+0xa2>
 800d2b8:	232d      	movs	r3, #45	@ 0x2d
 800d2ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2be:	e79e      	b.n	800d1fe <_printf_float+0xa2>
 800d2c0:	9a06      	ldr	r2, [sp, #24]
 800d2c2:	2a47      	cmp	r2, #71	@ 0x47
 800d2c4:	d1c2      	bne.n	800d24c <_printf_float+0xf0>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1c0      	bne.n	800d24c <_printf_float+0xf0>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e7bd      	b.n	800d24a <_printf_float+0xee>
 800d2ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2d2:	d9db      	bls.n	800d28c <_printf_float+0x130>
 800d2d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d2d8:	d118      	bne.n	800d30c <_printf_float+0x1b0>
 800d2da:	2900      	cmp	r1, #0
 800d2dc:	6863      	ldr	r3, [r4, #4]
 800d2de:	dd0b      	ble.n	800d2f8 <_printf_float+0x19c>
 800d2e0:	6121      	str	r1, [r4, #16]
 800d2e2:	b913      	cbnz	r3, 800d2ea <_printf_float+0x18e>
 800d2e4:	6822      	ldr	r2, [r4, #0]
 800d2e6:	07d0      	lsls	r0, r2, #31
 800d2e8:	d502      	bpl.n	800d2f0 <_printf_float+0x194>
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	440b      	add	r3, r1
 800d2ee:	6123      	str	r3, [r4, #16]
 800d2f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d2f2:	f04f 0900 	mov.w	r9, #0
 800d2f6:	e7db      	b.n	800d2b0 <_printf_float+0x154>
 800d2f8:	b913      	cbnz	r3, 800d300 <_printf_float+0x1a4>
 800d2fa:	6822      	ldr	r2, [r4, #0]
 800d2fc:	07d2      	lsls	r2, r2, #31
 800d2fe:	d501      	bpl.n	800d304 <_printf_float+0x1a8>
 800d300:	3302      	adds	r3, #2
 800d302:	e7f4      	b.n	800d2ee <_printf_float+0x192>
 800d304:	2301      	movs	r3, #1
 800d306:	e7f2      	b.n	800d2ee <_printf_float+0x192>
 800d308:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d30e:	4299      	cmp	r1, r3
 800d310:	db05      	blt.n	800d31e <_printf_float+0x1c2>
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	6121      	str	r1, [r4, #16]
 800d316:	07d8      	lsls	r0, r3, #31
 800d318:	d5ea      	bpl.n	800d2f0 <_printf_float+0x194>
 800d31a:	1c4b      	adds	r3, r1, #1
 800d31c:	e7e7      	b.n	800d2ee <_printf_float+0x192>
 800d31e:	2900      	cmp	r1, #0
 800d320:	bfd4      	ite	le
 800d322:	f1c1 0202 	rsble	r2, r1, #2
 800d326:	2201      	movgt	r2, #1
 800d328:	4413      	add	r3, r2
 800d32a:	e7e0      	b.n	800d2ee <_printf_float+0x192>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	055a      	lsls	r2, r3, #21
 800d330:	d407      	bmi.n	800d342 <_printf_float+0x1e6>
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	4642      	mov	r2, r8
 800d336:	4631      	mov	r1, r6
 800d338:	4628      	mov	r0, r5
 800d33a:	47b8      	blx	r7
 800d33c:	3001      	adds	r0, #1
 800d33e:	d12b      	bne.n	800d398 <_printf_float+0x23c>
 800d340:	e767      	b.n	800d212 <_printf_float+0xb6>
 800d342:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d346:	f240 80dd 	bls.w	800d504 <_printf_float+0x3a8>
 800d34a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d34e:	2200      	movs	r2, #0
 800d350:	2300      	movs	r3, #0
 800d352:	f7f3 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d356:	2800      	cmp	r0, #0
 800d358:	d033      	beq.n	800d3c2 <_printf_float+0x266>
 800d35a:	4a37      	ldr	r2, [pc, #220]	@ (800d438 <_printf_float+0x2dc>)
 800d35c:	2301      	movs	r3, #1
 800d35e:	4631      	mov	r1, r6
 800d360:	4628      	mov	r0, r5
 800d362:	47b8      	blx	r7
 800d364:	3001      	adds	r0, #1
 800d366:	f43f af54 	beq.w	800d212 <_printf_float+0xb6>
 800d36a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d36e:	4543      	cmp	r3, r8
 800d370:	db02      	blt.n	800d378 <_printf_float+0x21c>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	07d8      	lsls	r0, r3, #31
 800d376:	d50f      	bpl.n	800d398 <_printf_float+0x23c>
 800d378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d37c:	4631      	mov	r1, r6
 800d37e:	4628      	mov	r0, r5
 800d380:	47b8      	blx	r7
 800d382:	3001      	adds	r0, #1
 800d384:	f43f af45 	beq.w	800d212 <_printf_float+0xb6>
 800d388:	f04f 0900 	mov.w	r9, #0
 800d38c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d390:	f104 0a1a 	add.w	sl, r4, #26
 800d394:	45c8      	cmp	r8, r9
 800d396:	dc09      	bgt.n	800d3ac <_printf_float+0x250>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	079b      	lsls	r3, r3, #30
 800d39c:	f100 8103 	bmi.w	800d5a6 <_printf_float+0x44a>
 800d3a0:	68e0      	ldr	r0, [r4, #12]
 800d3a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3a4:	4298      	cmp	r0, r3
 800d3a6:	bfb8      	it	lt
 800d3a8:	4618      	movlt	r0, r3
 800d3aa:	e734      	b.n	800d216 <_printf_float+0xba>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4652      	mov	r2, sl
 800d3b0:	4631      	mov	r1, r6
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	47b8      	blx	r7
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	f43f af2b 	beq.w	800d212 <_printf_float+0xb6>
 800d3bc:	f109 0901 	add.w	r9, r9, #1
 800d3c0:	e7e8      	b.n	800d394 <_printf_float+0x238>
 800d3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dc39      	bgt.n	800d43c <_printf_float+0x2e0>
 800d3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d438 <_printf_float+0x2dc>)
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	4631      	mov	r1, r6
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	47b8      	blx	r7
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	f43f af1d 	beq.w	800d212 <_printf_float+0xb6>
 800d3d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d3dc:	ea59 0303 	orrs.w	r3, r9, r3
 800d3e0:	d102      	bne.n	800d3e8 <_printf_float+0x28c>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	07d9      	lsls	r1, r3, #31
 800d3e6:	d5d7      	bpl.n	800d398 <_printf_float+0x23c>
 800d3e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	47b8      	blx	r7
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	f43f af0d 	beq.w	800d212 <_printf_float+0xb6>
 800d3f8:	f04f 0a00 	mov.w	sl, #0
 800d3fc:	f104 0b1a 	add.w	fp, r4, #26
 800d400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d402:	425b      	negs	r3, r3
 800d404:	4553      	cmp	r3, sl
 800d406:	dc01      	bgt.n	800d40c <_printf_float+0x2b0>
 800d408:	464b      	mov	r3, r9
 800d40a:	e793      	b.n	800d334 <_printf_float+0x1d8>
 800d40c:	2301      	movs	r3, #1
 800d40e:	465a      	mov	r2, fp
 800d410:	4631      	mov	r1, r6
 800d412:	4628      	mov	r0, r5
 800d414:	47b8      	blx	r7
 800d416:	3001      	adds	r0, #1
 800d418:	f43f aefb 	beq.w	800d212 <_printf_float+0xb6>
 800d41c:	f10a 0a01 	add.w	sl, sl, #1
 800d420:	e7ee      	b.n	800d400 <_printf_float+0x2a4>
 800d422:	bf00      	nop
 800d424:	7fefffff 	.word	0x7fefffff
 800d428:	08012b6c 	.word	0x08012b6c
 800d42c:	08012b70 	.word	0x08012b70
 800d430:	08012b74 	.word	0x08012b74
 800d434:	08012b78 	.word	0x08012b78
 800d438:	08012b7c 	.word	0x08012b7c
 800d43c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d43e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d442:	4553      	cmp	r3, sl
 800d444:	bfa8      	it	ge
 800d446:	4653      	movge	r3, sl
 800d448:	2b00      	cmp	r3, #0
 800d44a:	4699      	mov	r9, r3
 800d44c:	dc36      	bgt.n	800d4bc <_printf_float+0x360>
 800d44e:	f04f 0b00 	mov.w	fp, #0
 800d452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d456:	f104 021a 	add.w	r2, r4, #26
 800d45a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d45c:	9306      	str	r3, [sp, #24]
 800d45e:	eba3 0309 	sub.w	r3, r3, r9
 800d462:	455b      	cmp	r3, fp
 800d464:	dc31      	bgt.n	800d4ca <_printf_float+0x36e>
 800d466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d468:	459a      	cmp	sl, r3
 800d46a:	dc3a      	bgt.n	800d4e2 <_printf_float+0x386>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	07da      	lsls	r2, r3, #31
 800d470:	d437      	bmi.n	800d4e2 <_printf_float+0x386>
 800d472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d474:	ebaa 0903 	sub.w	r9, sl, r3
 800d478:	9b06      	ldr	r3, [sp, #24]
 800d47a:	ebaa 0303 	sub.w	r3, sl, r3
 800d47e:	4599      	cmp	r9, r3
 800d480:	bfa8      	it	ge
 800d482:	4699      	movge	r9, r3
 800d484:	f1b9 0f00 	cmp.w	r9, #0
 800d488:	dc33      	bgt.n	800d4f2 <_printf_float+0x396>
 800d48a:	f04f 0800 	mov.w	r8, #0
 800d48e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d492:	f104 0b1a 	add.w	fp, r4, #26
 800d496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d498:	ebaa 0303 	sub.w	r3, sl, r3
 800d49c:	eba3 0309 	sub.w	r3, r3, r9
 800d4a0:	4543      	cmp	r3, r8
 800d4a2:	f77f af79 	ble.w	800d398 <_printf_float+0x23c>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	465a      	mov	r2, fp
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	47b8      	blx	r7
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	f43f aeae 	beq.w	800d212 <_printf_float+0xb6>
 800d4b6:	f108 0801 	add.w	r8, r8, #1
 800d4ba:	e7ec      	b.n	800d496 <_printf_float+0x33a>
 800d4bc:	4642      	mov	r2, r8
 800d4be:	4631      	mov	r1, r6
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	47b8      	blx	r7
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d1c2      	bne.n	800d44e <_printf_float+0x2f2>
 800d4c8:	e6a3      	b.n	800d212 <_printf_float+0xb6>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	9206      	str	r2, [sp, #24]
 800d4d2:	47b8      	blx	r7
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	f43f ae9c 	beq.w	800d212 <_printf_float+0xb6>
 800d4da:	9a06      	ldr	r2, [sp, #24]
 800d4dc:	f10b 0b01 	add.w	fp, fp, #1
 800d4e0:	e7bb      	b.n	800d45a <_printf_float+0x2fe>
 800d4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d1c0      	bne.n	800d472 <_printf_float+0x316>
 800d4f0:	e68f      	b.n	800d212 <_printf_float+0xb6>
 800d4f2:	9a06      	ldr	r2, [sp, #24]
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	4442      	add	r2, r8
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	d1c3      	bne.n	800d48a <_printf_float+0x32e>
 800d502:	e686      	b.n	800d212 <_printf_float+0xb6>
 800d504:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d508:	f1ba 0f01 	cmp.w	sl, #1
 800d50c:	dc01      	bgt.n	800d512 <_printf_float+0x3b6>
 800d50e:	07db      	lsls	r3, r3, #31
 800d510:	d536      	bpl.n	800d580 <_printf_float+0x424>
 800d512:	2301      	movs	r3, #1
 800d514:	4642      	mov	r2, r8
 800d516:	4631      	mov	r1, r6
 800d518:	4628      	mov	r0, r5
 800d51a:	47b8      	blx	r7
 800d51c:	3001      	adds	r0, #1
 800d51e:	f43f ae78 	beq.w	800d212 <_printf_float+0xb6>
 800d522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d526:	4631      	mov	r1, r6
 800d528:	4628      	mov	r0, r5
 800d52a:	47b8      	blx	r7
 800d52c:	3001      	adds	r0, #1
 800d52e:	f43f ae70 	beq.w	800d212 <_printf_float+0xb6>
 800d532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d53e:	f7f3 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 800d542:	b9c0      	cbnz	r0, 800d576 <_printf_float+0x41a>
 800d544:	4653      	mov	r3, sl
 800d546:	f108 0201 	add.w	r2, r8, #1
 800d54a:	4631      	mov	r1, r6
 800d54c:	4628      	mov	r0, r5
 800d54e:	47b8      	blx	r7
 800d550:	3001      	adds	r0, #1
 800d552:	d10c      	bne.n	800d56e <_printf_float+0x412>
 800d554:	e65d      	b.n	800d212 <_printf_float+0xb6>
 800d556:	2301      	movs	r3, #1
 800d558:	465a      	mov	r2, fp
 800d55a:	4631      	mov	r1, r6
 800d55c:	4628      	mov	r0, r5
 800d55e:	47b8      	blx	r7
 800d560:	3001      	adds	r0, #1
 800d562:	f43f ae56 	beq.w	800d212 <_printf_float+0xb6>
 800d566:	f108 0801 	add.w	r8, r8, #1
 800d56a:	45d0      	cmp	r8, sl
 800d56c:	dbf3      	blt.n	800d556 <_printf_float+0x3fa>
 800d56e:	464b      	mov	r3, r9
 800d570:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d574:	e6df      	b.n	800d336 <_printf_float+0x1da>
 800d576:	f04f 0800 	mov.w	r8, #0
 800d57a:	f104 0b1a 	add.w	fp, r4, #26
 800d57e:	e7f4      	b.n	800d56a <_printf_float+0x40e>
 800d580:	2301      	movs	r3, #1
 800d582:	4642      	mov	r2, r8
 800d584:	e7e1      	b.n	800d54a <_printf_float+0x3ee>
 800d586:	2301      	movs	r3, #1
 800d588:	464a      	mov	r2, r9
 800d58a:	4631      	mov	r1, r6
 800d58c:	4628      	mov	r0, r5
 800d58e:	47b8      	blx	r7
 800d590:	3001      	adds	r0, #1
 800d592:	f43f ae3e 	beq.w	800d212 <_printf_float+0xb6>
 800d596:	f108 0801 	add.w	r8, r8, #1
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d59e:	1a5b      	subs	r3, r3, r1
 800d5a0:	4543      	cmp	r3, r8
 800d5a2:	dcf0      	bgt.n	800d586 <_printf_float+0x42a>
 800d5a4:	e6fc      	b.n	800d3a0 <_printf_float+0x244>
 800d5a6:	f04f 0800 	mov.w	r8, #0
 800d5aa:	f104 0919 	add.w	r9, r4, #25
 800d5ae:	e7f4      	b.n	800d59a <_printf_float+0x43e>

0800d5b0 <_printf_common>:
 800d5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	4616      	mov	r6, r2
 800d5b6:	4698      	mov	r8, r3
 800d5b8:	688a      	ldr	r2, [r1, #8]
 800d5ba:	690b      	ldr	r3, [r1, #16]
 800d5bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	bfb8      	it	lt
 800d5c4:	4613      	movlt	r3, r2
 800d5c6:	6033      	str	r3, [r6, #0]
 800d5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5cc:	4607      	mov	r7, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	b10a      	cbz	r2, 800d5d6 <_printf_common+0x26>
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	6033      	str	r3, [r6, #0]
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	0699      	lsls	r1, r3, #26
 800d5da:	bf42      	ittt	mi
 800d5dc:	6833      	ldrmi	r3, [r6, #0]
 800d5de:	3302      	addmi	r3, #2
 800d5e0:	6033      	strmi	r3, [r6, #0]
 800d5e2:	6825      	ldr	r5, [r4, #0]
 800d5e4:	f015 0506 	ands.w	r5, r5, #6
 800d5e8:	d106      	bne.n	800d5f8 <_printf_common+0x48>
 800d5ea:	f104 0a19 	add.w	sl, r4, #25
 800d5ee:	68e3      	ldr	r3, [r4, #12]
 800d5f0:	6832      	ldr	r2, [r6, #0]
 800d5f2:	1a9b      	subs	r3, r3, r2
 800d5f4:	42ab      	cmp	r3, r5
 800d5f6:	dc26      	bgt.n	800d646 <_printf_common+0x96>
 800d5f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5fc:	6822      	ldr	r2, [r4, #0]
 800d5fe:	3b00      	subs	r3, #0
 800d600:	bf18      	it	ne
 800d602:	2301      	movne	r3, #1
 800d604:	0692      	lsls	r2, r2, #26
 800d606:	d42b      	bmi.n	800d660 <_printf_common+0xb0>
 800d608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d60c:	4641      	mov	r1, r8
 800d60e:	4638      	mov	r0, r7
 800d610:	47c8      	blx	r9
 800d612:	3001      	adds	r0, #1
 800d614:	d01e      	beq.n	800d654 <_printf_common+0xa4>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	6922      	ldr	r2, [r4, #16]
 800d61a:	f003 0306 	and.w	r3, r3, #6
 800d61e:	2b04      	cmp	r3, #4
 800d620:	bf02      	ittt	eq
 800d622:	68e5      	ldreq	r5, [r4, #12]
 800d624:	6833      	ldreq	r3, [r6, #0]
 800d626:	1aed      	subeq	r5, r5, r3
 800d628:	68a3      	ldr	r3, [r4, #8]
 800d62a:	bf0c      	ite	eq
 800d62c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d630:	2500      	movne	r5, #0
 800d632:	4293      	cmp	r3, r2
 800d634:	bfc4      	itt	gt
 800d636:	1a9b      	subgt	r3, r3, r2
 800d638:	18ed      	addgt	r5, r5, r3
 800d63a:	2600      	movs	r6, #0
 800d63c:	341a      	adds	r4, #26
 800d63e:	42b5      	cmp	r5, r6
 800d640:	d11a      	bne.n	800d678 <_printf_common+0xc8>
 800d642:	2000      	movs	r0, #0
 800d644:	e008      	b.n	800d658 <_printf_common+0xa8>
 800d646:	2301      	movs	r3, #1
 800d648:	4652      	mov	r2, sl
 800d64a:	4641      	mov	r1, r8
 800d64c:	4638      	mov	r0, r7
 800d64e:	47c8      	blx	r9
 800d650:	3001      	adds	r0, #1
 800d652:	d103      	bne.n	800d65c <_printf_common+0xac>
 800d654:	f04f 30ff 	mov.w	r0, #4294967295
 800d658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65c:	3501      	adds	r5, #1
 800d65e:	e7c6      	b.n	800d5ee <_printf_common+0x3e>
 800d660:	18e1      	adds	r1, r4, r3
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	2030      	movs	r0, #48	@ 0x30
 800d666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d66a:	4422      	add	r2, r4
 800d66c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d674:	3302      	adds	r3, #2
 800d676:	e7c7      	b.n	800d608 <_printf_common+0x58>
 800d678:	2301      	movs	r3, #1
 800d67a:	4622      	mov	r2, r4
 800d67c:	4641      	mov	r1, r8
 800d67e:	4638      	mov	r0, r7
 800d680:	47c8      	blx	r9
 800d682:	3001      	adds	r0, #1
 800d684:	d0e6      	beq.n	800d654 <_printf_common+0xa4>
 800d686:	3601      	adds	r6, #1
 800d688:	e7d9      	b.n	800d63e <_printf_common+0x8e>
	...

0800d68c <_printf_i>:
 800d68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d690:	7e0f      	ldrb	r7, [r1, #24]
 800d692:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d694:	2f78      	cmp	r7, #120	@ 0x78
 800d696:	4691      	mov	r9, r2
 800d698:	4680      	mov	r8, r0
 800d69a:	460c      	mov	r4, r1
 800d69c:	469a      	mov	sl, r3
 800d69e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6a2:	d807      	bhi.n	800d6b4 <_printf_i+0x28>
 800d6a4:	2f62      	cmp	r7, #98	@ 0x62
 800d6a6:	d80a      	bhi.n	800d6be <_printf_i+0x32>
 800d6a8:	2f00      	cmp	r7, #0
 800d6aa:	f000 80d2 	beq.w	800d852 <_printf_i+0x1c6>
 800d6ae:	2f58      	cmp	r7, #88	@ 0x58
 800d6b0:	f000 80b9 	beq.w	800d826 <_printf_i+0x19a>
 800d6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6bc:	e03a      	b.n	800d734 <_printf_i+0xa8>
 800d6be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6c2:	2b15      	cmp	r3, #21
 800d6c4:	d8f6      	bhi.n	800d6b4 <_printf_i+0x28>
 800d6c6:	a101      	add	r1, pc, #4	@ (adr r1, 800d6cc <_printf_i+0x40>)
 800d6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6cc:	0800d725 	.word	0x0800d725
 800d6d0:	0800d739 	.word	0x0800d739
 800d6d4:	0800d6b5 	.word	0x0800d6b5
 800d6d8:	0800d6b5 	.word	0x0800d6b5
 800d6dc:	0800d6b5 	.word	0x0800d6b5
 800d6e0:	0800d6b5 	.word	0x0800d6b5
 800d6e4:	0800d739 	.word	0x0800d739
 800d6e8:	0800d6b5 	.word	0x0800d6b5
 800d6ec:	0800d6b5 	.word	0x0800d6b5
 800d6f0:	0800d6b5 	.word	0x0800d6b5
 800d6f4:	0800d6b5 	.word	0x0800d6b5
 800d6f8:	0800d839 	.word	0x0800d839
 800d6fc:	0800d763 	.word	0x0800d763
 800d700:	0800d7f3 	.word	0x0800d7f3
 800d704:	0800d6b5 	.word	0x0800d6b5
 800d708:	0800d6b5 	.word	0x0800d6b5
 800d70c:	0800d85b 	.word	0x0800d85b
 800d710:	0800d6b5 	.word	0x0800d6b5
 800d714:	0800d763 	.word	0x0800d763
 800d718:	0800d6b5 	.word	0x0800d6b5
 800d71c:	0800d6b5 	.word	0x0800d6b5
 800d720:	0800d7fb 	.word	0x0800d7fb
 800d724:	6833      	ldr	r3, [r6, #0]
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6032      	str	r2, [r6, #0]
 800d72c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d734:	2301      	movs	r3, #1
 800d736:	e09d      	b.n	800d874 <_printf_i+0x1e8>
 800d738:	6833      	ldr	r3, [r6, #0]
 800d73a:	6820      	ldr	r0, [r4, #0]
 800d73c:	1d19      	adds	r1, r3, #4
 800d73e:	6031      	str	r1, [r6, #0]
 800d740:	0606      	lsls	r6, r0, #24
 800d742:	d501      	bpl.n	800d748 <_printf_i+0xbc>
 800d744:	681d      	ldr	r5, [r3, #0]
 800d746:	e003      	b.n	800d750 <_printf_i+0xc4>
 800d748:	0645      	lsls	r5, r0, #25
 800d74a:	d5fb      	bpl.n	800d744 <_printf_i+0xb8>
 800d74c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d750:	2d00      	cmp	r5, #0
 800d752:	da03      	bge.n	800d75c <_printf_i+0xd0>
 800d754:	232d      	movs	r3, #45	@ 0x2d
 800d756:	426d      	negs	r5, r5
 800d758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d75c:	4859      	ldr	r0, [pc, #356]	@ (800d8c4 <_printf_i+0x238>)
 800d75e:	230a      	movs	r3, #10
 800d760:	e011      	b.n	800d786 <_printf_i+0xfa>
 800d762:	6821      	ldr	r1, [r4, #0]
 800d764:	6833      	ldr	r3, [r6, #0]
 800d766:	0608      	lsls	r0, r1, #24
 800d768:	f853 5b04 	ldr.w	r5, [r3], #4
 800d76c:	d402      	bmi.n	800d774 <_printf_i+0xe8>
 800d76e:	0649      	lsls	r1, r1, #25
 800d770:	bf48      	it	mi
 800d772:	b2ad      	uxthmi	r5, r5
 800d774:	2f6f      	cmp	r7, #111	@ 0x6f
 800d776:	4853      	ldr	r0, [pc, #332]	@ (800d8c4 <_printf_i+0x238>)
 800d778:	6033      	str	r3, [r6, #0]
 800d77a:	bf14      	ite	ne
 800d77c:	230a      	movne	r3, #10
 800d77e:	2308      	moveq	r3, #8
 800d780:	2100      	movs	r1, #0
 800d782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d786:	6866      	ldr	r6, [r4, #4]
 800d788:	60a6      	str	r6, [r4, #8]
 800d78a:	2e00      	cmp	r6, #0
 800d78c:	bfa2      	ittt	ge
 800d78e:	6821      	ldrge	r1, [r4, #0]
 800d790:	f021 0104 	bicge.w	r1, r1, #4
 800d794:	6021      	strge	r1, [r4, #0]
 800d796:	b90d      	cbnz	r5, 800d79c <_printf_i+0x110>
 800d798:	2e00      	cmp	r6, #0
 800d79a:	d04b      	beq.n	800d834 <_printf_i+0x1a8>
 800d79c:	4616      	mov	r6, r2
 800d79e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7a2:	fb03 5711 	mls	r7, r3, r1, r5
 800d7a6:	5dc7      	ldrb	r7, [r0, r7]
 800d7a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7ac:	462f      	mov	r7, r5
 800d7ae:	42bb      	cmp	r3, r7
 800d7b0:	460d      	mov	r5, r1
 800d7b2:	d9f4      	bls.n	800d79e <_printf_i+0x112>
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d10b      	bne.n	800d7d0 <_printf_i+0x144>
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	07df      	lsls	r7, r3, #31
 800d7bc:	d508      	bpl.n	800d7d0 <_printf_i+0x144>
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	6861      	ldr	r1, [r4, #4]
 800d7c2:	4299      	cmp	r1, r3
 800d7c4:	bfde      	ittt	le
 800d7c6:	2330      	movle	r3, #48	@ 0x30
 800d7c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7d0:	1b92      	subs	r2, r2, r6
 800d7d2:	6122      	str	r2, [r4, #16]
 800d7d4:	f8cd a000 	str.w	sl, [sp]
 800d7d8:	464b      	mov	r3, r9
 800d7da:	aa03      	add	r2, sp, #12
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f7ff fee6 	bl	800d5b0 <_printf_common>
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	d14a      	bne.n	800d87e <_printf_i+0x1f2>
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ec:	b004      	add	sp, #16
 800d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	f043 0320 	orr.w	r3, r3, #32
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	4833      	ldr	r0, [pc, #204]	@ (800d8c8 <_printf_i+0x23c>)
 800d7fc:	2778      	movs	r7, #120	@ 0x78
 800d7fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	6831      	ldr	r1, [r6, #0]
 800d806:	061f      	lsls	r7, r3, #24
 800d808:	f851 5b04 	ldr.w	r5, [r1], #4
 800d80c:	d402      	bmi.n	800d814 <_printf_i+0x188>
 800d80e:	065f      	lsls	r7, r3, #25
 800d810:	bf48      	it	mi
 800d812:	b2ad      	uxthmi	r5, r5
 800d814:	6031      	str	r1, [r6, #0]
 800d816:	07d9      	lsls	r1, r3, #31
 800d818:	bf44      	itt	mi
 800d81a:	f043 0320 	orrmi.w	r3, r3, #32
 800d81e:	6023      	strmi	r3, [r4, #0]
 800d820:	b11d      	cbz	r5, 800d82a <_printf_i+0x19e>
 800d822:	2310      	movs	r3, #16
 800d824:	e7ac      	b.n	800d780 <_printf_i+0xf4>
 800d826:	4827      	ldr	r0, [pc, #156]	@ (800d8c4 <_printf_i+0x238>)
 800d828:	e7e9      	b.n	800d7fe <_printf_i+0x172>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	f023 0320 	bic.w	r3, r3, #32
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	e7f6      	b.n	800d822 <_printf_i+0x196>
 800d834:	4616      	mov	r6, r2
 800d836:	e7bd      	b.n	800d7b4 <_printf_i+0x128>
 800d838:	6833      	ldr	r3, [r6, #0]
 800d83a:	6825      	ldr	r5, [r4, #0]
 800d83c:	6961      	ldr	r1, [r4, #20]
 800d83e:	1d18      	adds	r0, r3, #4
 800d840:	6030      	str	r0, [r6, #0]
 800d842:	062e      	lsls	r6, r5, #24
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	d501      	bpl.n	800d84c <_printf_i+0x1c0>
 800d848:	6019      	str	r1, [r3, #0]
 800d84a:	e002      	b.n	800d852 <_printf_i+0x1c6>
 800d84c:	0668      	lsls	r0, r5, #25
 800d84e:	d5fb      	bpl.n	800d848 <_printf_i+0x1bc>
 800d850:	8019      	strh	r1, [r3, #0]
 800d852:	2300      	movs	r3, #0
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	4616      	mov	r6, r2
 800d858:	e7bc      	b.n	800d7d4 <_printf_i+0x148>
 800d85a:	6833      	ldr	r3, [r6, #0]
 800d85c:	1d1a      	adds	r2, r3, #4
 800d85e:	6032      	str	r2, [r6, #0]
 800d860:	681e      	ldr	r6, [r3, #0]
 800d862:	6862      	ldr	r2, [r4, #4]
 800d864:	2100      	movs	r1, #0
 800d866:	4630      	mov	r0, r6
 800d868:	f7f2 fcba 	bl	80001e0 <memchr>
 800d86c:	b108      	cbz	r0, 800d872 <_printf_i+0x1e6>
 800d86e:	1b80      	subs	r0, r0, r6
 800d870:	6060      	str	r0, [r4, #4]
 800d872:	6863      	ldr	r3, [r4, #4]
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	2300      	movs	r3, #0
 800d878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d87c:	e7aa      	b.n	800d7d4 <_printf_i+0x148>
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	4632      	mov	r2, r6
 800d882:	4649      	mov	r1, r9
 800d884:	4640      	mov	r0, r8
 800d886:	47d0      	blx	sl
 800d888:	3001      	adds	r0, #1
 800d88a:	d0ad      	beq.n	800d7e8 <_printf_i+0x15c>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	079b      	lsls	r3, r3, #30
 800d890:	d413      	bmi.n	800d8ba <_printf_i+0x22e>
 800d892:	68e0      	ldr	r0, [r4, #12]
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	4298      	cmp	r0, r3
 800d898:	bfb8      	it	lt
 800d89a:	4618      	movlt	r0, r3
 800d89c:	e7a6      	b.n	800d7ec <_printf_i+0x160>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	4640      	mov	r0, r8
 800d8a6:	47d0      	blx	sl
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d09d      	beq.n	800d7e8 <_printf_i+0x15c>
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	68e3      	ldr	r3, [r4, #12]
 800d8b0:	9903      	ldr	r1, [sp, #12]
 800d8b2:	1a5b      	subs	r3, r3, r1
 800d8b4:	42ab      	cmp	r3, r5
 800d8b6:	dcf2      	bgt.n	800d89e <_printf_i+0x212>
 800d8b8:	e7eb      	b.n	800d892 <_printf_i+0x206>
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	f104 0619 	add.w	r6, r4, #25
 800d8c0:	e7f5      	b.n	800d8ae <_printf_i+0x222>
 800d8c2:	bf00      	nop
 800d8c4:	08012b7e 	.word	0x08012b7e
 800d8c8:	08012b8f 	.word	0x08012b8f

0800d8cc <std>:
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	e9c0 3300 	strd	r3, r3, [r0]
 800d8d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8da:	6083      	str	r3, [r0, #8]
 800d8dc:	8181      	strh	r1, [r0, #12]
 800d8de:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8e0:	81c2      	strh	r2, [r0, #14]
 800d8e2:	6183      	str	r3, [r0, #24]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	2208      	movs	r2, #8
 800d8e8:	305c      	adds	r0, #92	@ 0x5c
 800d8ea:	f000 f9bd 	bl	800dc68 <memset>
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d924 <std+0x58>)
 800d8f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <std+0x5c>)
 800d8f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d92c <std+0x60>)
 800d8f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d930 <std+0x64>)
 800d8fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d934 <std+0x68>)
 800d900:	6224      	str	r4, [r4, #32]
 800d902:	429c      	cmp	r4, r3
 800d904:	d006      	beq.n	800d914 <std+0x48>
 800d906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d90a:	4294      	cmp	r4, r2
 800d90c:	d002      	beq.n	800d914 <std+0x48>
 800d90e:	33d0      	adds	r3, #208	@ 0xd0
 800d910:	429c      	cmp	r4, r3
 800d912:	d105      	bne.n	800d920 <std+0x54>
 800d914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d91c:	f000 ba30 	b.w	800dd80 <__retarget_lock_init_recursive>
 800d920:	bd10      	pop	{r4, pc}
 800d922:	bf00      	nop
 800d924:	0800dab9 	.word	0x0800dab9
 800d928:	0800dadb 	.word	0x0800dadb
 800d92c:	0800db13 	.word	0x0800db13
 800d930:	0800db37 	.word	0x0800db37
 800d934:	20002674 	.word	0x20002674

0800d938 <stdio_exit_handler>:
 800d938:	4a02      	ldr	r2, [pc, #8]	@ (800d944 <stdio_exit_handler+0xc>)
 800d93a:	4903      	ldr	r1, [pc, #12]	@ (800d948 <stdio_exit_handler+0x10>)
 800d93c:	4803      	ldr	r0, [pc, #12]	@ (800d94c <stdio_exit_handler+0x14>)
 800d93e:	f000 b869 	b.w	800da14 <_fwalk_sglue>
 800d942:	bf00      	nop
 800d944:	200001a8 	.word	0x200001a8
 800d948:	0800f571 	.word	0x0800f571
 800d94c:	200001b8 	.word	0x200001b8

0800d950 <cleanup_stdio>:
 800d950:	6841      	ldr	r1, [r0, #4]
 800d952:	4b0c      	ldr	r3, [pc, #48]	@ (800d984 <cleanup_stdio+0x34>)
 800d954:	4299      	cmp	r1, r3
 800d956:	b510      	push	{r4, lr}
 800d958:	4604      	mov	r4, r0
 800d95a:	d001      	beq.n	800d960 <cleanup_stdio+0x10>
 800d95c:	f001 fe08 	bl	800f570 <_fflush_r>
 800d960:	68a1      	ldr	r1, [r4, #8]
 800d962:	4b09      	ldr	r3, [pc, #36]	@ (800d988 <cleanup_stdio+0x38>)
 800d964:	4299      	cmp	r1, r3
 800d966:	d002      	beq.n	800d96e <cleanup_stdio+0x1e>
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 fe01 	bl	800f570 <_fflush_r>
 800d96e:	68e1      	ldr	r1, [r4, #12]
 800d970:	4b06      	ldr	r3, [pc, #24]	@ (800d98c <cleanup_stdio+0x3c>)
 800d972:	4299      	cmp	r1, r3
 800d974:	d004      	beq.n	800d980 <cleanup_stdio+0x30>
 800d976:	4620      	mov	r0, r4
 800d978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d97c:	f001 bdf8 	b.w	800f570 <_fflush_r>
 800d980:	bd10      	pop	{r4, pc}
 800d982:	bf00      	nop
 800d984:	20002674 	.word	0x20002674
 800d988:	200026dc 	.word	0x200026dc
 800d98c:	20002744 	.word	0x20002744

0800d990 <global_stdio_init.part.0>:
 800d990:	b510      	push	{r4, lr}
 800d992:	4b0b      	ldr	r3, [pc, #44]	@ (800d9c0 <global_stdio_init.part.0+0x30>)
 800d994:	4c0b      	ldr	r4, [pc, #44]	@ (800d9c4 <global_stdio_init.part.0+0x34>)
 800d996:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c8 <global_stdio_init.part.0+0x38>)
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	4620      	mov	r0, r4
 800d99c:	2200      	movs	r2, #0
 800d99e:	2104      	movs	r1, #4
 800d9a0:	f7ff ff94 	bl	800d8cc <std>
 800d9a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	2109      	movs	r1, #9
 800d9ac:	f7ff ff8e 	bl	800d8cc <std>
 800d9b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ba:	2112      	movs	r1, #18
 800d9bc:	f7ff bf86 	b.w	800d8cc <std>
 800d9c0:	200027ac 	.word	0x200027ac
 800d9c4:	20002674 	.word	0x20002674
 800d9c8:	0800d939 	.word	0x0800d939

0800d9cc <__sfp_lock_acquire>:
 800d9cc:	4801      	ldr	r0, [pc, #4]	@ (800d9d4 <__sfp_lock_acquire+0x8>)
 800d9ce:	f000 b9d8 	b.w	800dd82 <__retarget_lock_acquire_recursive>
 800d9d2:	bf00      	nop
 800d9d4:	200027b5 	.word	0x200027b5

0800d9d8 <__sfp_lock_release>:
 800d9d8:	4801      	ldr	r0, [pc, #4]	@ (800d9e0 <__sfp_lock_release+0x8>)
 800d9da:	f000 b9d3 	b.w	800dd84 <__retarget_lock_release_recursive>
 800d9de:	bf00      	nop
 800d9e0:	200027b5 	.word	0x200027b5

0800d9e4 <__sinit>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	f7ff fff0 	bl	800d9cc <__sfp_lock_acquire>
 800d9ec:	6a23      	ldr	r3, [r4, #32]
 800d9ee:	b11b      	cbz	r3, 800d9f8 <__sinit+0x14>
 800d9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9f4:	f7ff bff0 	b.w	800d9d8 <__sfp_lock_release>
 800d9f8:	4b04      	ldr	r3, [pc, #16]	@ (800da0c <__sinit+0x28>)
 800d9fa:	6223      	str	r3, [r4, #32]
 800d9fc:	4b04      	ldr	r3, [pc, #16]	@ (800da10 <__sinit+0x2c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1f5      	bne.n	800d9f0 <__sinit+0xc>
 800da04:	f7ff ffc4 	bl	800d990 <global_stdio_init.part.0>
 800da08:	e7f2      	b.n	800d9f0 <__sinit+0xc>
 800da0a:	bf00      	nop
 800da0c:	0800d951 	.word	0x0800d951
 800da10:	200027ac 	.word	0x200027ac

0800da14 <_fwalk_sglue>:
 800da14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da18:	4607      	mov	r7, r0
 800da1a:	4688      	mov	r8, r1
 800da1c:	4614      	mov	r4, r2
 800da1e:	2600      	movs	r6, #0
 800da20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da24:	f1b9 0901 	subs.w	r9, r9, #1
 800da28:	d505      	bpl.n	800da36 <_fwalk_sglue+0x22>
 800da2a:	6824      	ldr	r4, [r4, #0]
 800da2c:	2c00      	cmp	r4, #0
 800da2e:	d1f7      	bne.n	800da20 <_fwalk_sglue+0xc>
 800da30:	4630      	mov	r0, r6
 800da32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d907      	bls.n	800da4c <_fwalk_sglue+0x38>
 800da3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da40:	3301      	adds	r3, #1
 800da42:	d003      	beq.n	800da4c <_fwalk_sglue+0x38>
 800da44:	4629      	mov	r1, r5
 800da46:	4638      	mov	r0, r7
 800da48:	47c0      	blx	r8
 800da4a:	4306      	orrs	r6, r0
 800da4c:	3568      	adds	r5, #104	@ 0x68
 800da4e:	e7e9      	b.n	800da24 <_fwalk_sglue+0x10>

0800da50 <sniprintf>:
 800da50:	b40c      	push	{r2, r3}
 800da52:	b530      	push	{r4, r5, lr}
 800da54:	4b17      	ldr	r3, [pc, #92]	@ (800dab4 <sniprintf+0x64>)
 800da56:	1e0c      	subs	r4, r1, #0
 800da58:	681d      	ldr	r5, [r3, #0]
 800da5a:	b09d      	sub	sp, #116	@ 0x74
 800da5c:	da08      	bge.n	800da70 <sniprintf+0x20>
 800da5e:	238b      	movs	r3, #139	@ 0x8b
 800da60:	602b      	str	r3, [r5, #0]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295
 800da66:	b01d      	add	sp, #116	@ 0x74
 800da68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da6c:	b002      	add	sp, #8
 800da6e:	4770      	bx	lr
 800da70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da78:	bf14      	ite	ne
 800da7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da7e:	4623      	moveq	r3, r4
 800da80:	9304      	str	r3, [sp, #16]
 800da82:	9307      	str	r3, [sp, #28]
 800da84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da88:	9002      	str	r0, [sp, #8]
 800da8a:	9006      	str	r0, [sp, #24]
 800da8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da92:	ab21      	add	r3, sp, #132	@ 0x84
 800da94:	a902      	add	r1, sp, #8
 800da96:	4628      	mov	r0, r5
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	f001 fbe9 	bl	800f270 <_svfiprintf_r>
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	bfbc      	itt	lt
 800daa2:	238b      	movlt	r3, #139	@ 0x8b
 800daa4:	602b      	strlt	r3, [r5, #0]
 800daa6:	2c00      	cmp	r4, #0
 800daa8:	d0dd      	beq.n	800da66 <sniprintf+0x16>
 800daaa:	9b02      	ldr	r3, [sp, #8]
 800daac:	2200      	movs	r2, #0
 800daae:	701a      	strb	r2, [r3, #0]
 800dab0:	e7d9      	b.n	800da66 <sniprintf+0x16>
 800dab2:	bf00      	nop
 800dab4:	200001b4 	.word	0x200001b4

0800dab8 <__sread>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	460c      	mov	r4, r1
 800dabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac0:	f000 f900 	bl	800dcc4 <_read_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	bfab      	itete	ge
 800dac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800daca:	89a3      	ldrhlt	r3, [r4, #12]
 800dacc:	181b      	addge	r3, r3, r0
 800dace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dad2:	bfac      	ite	ge
 800dad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dad6:	81a3      	strhlt	r3, [r4, #12]
 800dad8:	bd10      	pop	{r4, pc}

0800dada <__swrite>:
 800dada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dade:	461f      	mov	r7, r3
 800dae0:	898b      	ldrh	r3, [r1, #12]
 800dae2:	05db      	lsls	r3, r3, #23
 800dae4:	4605      	mov	r5, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	4616      	mov	r6, r2
 800daea:	d505      	bpl.n	800daf8 <__swrite+0x1e>
 800daec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf0:	2302      	movs	r3, #2
 800daf2:	2200      	movs	r2, #0
 800daf4:	f000 f8d4 	bl	800dca0 <_lseek_r>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dafe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	4632      	mov	r2, r6
 800db06:	463b      	mov	r3, r7
 800db08:	4628      	mov	r0, r5
 800db0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db0e:	f000 b8fb 	b.w	800dd08 <_write_r>

0800db12 <__sseek>:
 800db12:	b510      	push	{r4, lr}
 800db14:	460c      	mov	r4, r1
 800db16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1a:	f000 f8c1 	bl	800dca0 <_lseek_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	89a3      	ldrh	r3, [r4, #12]
 800db22:	bf15      	itete	ne
 800db24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db2e:	81a3      	strheq	r3, [r4, #12]
 800db30:	bf18      	it	ne
 800db32:	81a3      	strhne	r3, [r4, #12]
 800db34:	bd10      	pop	{r4, pc}

0800db36 <__sclose>:
 800db36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3a:	f000 b8a1 	b.w	800dc80 <_close_r>

0800db3e <__swbuf_r>:
 800db3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db40:	460e      	mov	r6, r1
 800db42:	4614      	mov	r4, r2
 800db44:	4605      	mov	r5, r0
 800db46:	b118      	cbz	r0, 800db50 <__swbuf_r+0x12>
 800db48:	6a03      	ldr	r3, [r0, #32]
 800db4a:	b90b      	cbnz	r3, 800db50 <__swbuf_r+0x12>
 800db4c:	f7ff ff4a 	bl	800d9e4 <__sinit>
 800db50:	69a3      	ldr	r3, [r4, #24]
 800db52:	60a3      	str	r3, [r4, #8]
 800db54:	89a3      	ldrh	r3, [r4, #12]
 800db56:	071a      	lsls	r2, r3, #28
 800db58:	d501      	bpl.n	800db5e <__swbuf_r+0x20>
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	b943      	cbnz	r3, 800db70 <__swbuf_r+0x32>
 800db5e:	4621      	mov	r1, r4
 800db60:	4628      	mov	r0, r5
 800db62:	f000 f82b 	bl	800dbbc <__swsetup_r>
 800db66:	b118      	cbz	r0, 800db70 <__swbuf_r+0x32>
 800db68:	f04f 37ff 	mov.w	r7, #4294967295
 800db6c:	4638      	mov	r0, r7
 800db6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	6922      	ldr	r2, [r4, #16]
 800db74:	1a98      	subs	r0, r3, r2
 800db76:	6963      	ldr	r3, [r4, #20]
 800db78:	b2f6      	uxtb	r6, r6
 800db7a:	4283      	cmp	r3, r0
 800db7c:	4637      	mov	r7, r6
 800db7e:	dc05      	bgt.n	800db8c <__swbuf_r+0x4e>
 800db80:	4621      	mov	r1, r4
 800db82:	4628      	mov	r0, r5
 800db84:	f001 fcf4 	bl	800f570 <_fflush_r>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d1ed      	bne.n	800db68 <__swbuf_r+0x2a>
 800db8c:	68a3      	ldr	r3, [r4, #8]
 800db8e:	3b01      	subs	r3, #1
 800db90:	60a3      	str	r3, [r4, #8]
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	1c5a      	adds	r2, r3, #1
 800db96:	6022      	str	r2, [r4, #0]
 800db98:	701e      	strb	r6, [r3, #0]
 800db9a:	6962      	ldr	r2, [r4, #20]
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d004      	beq.n	800dbac <__swbuf_r+0x6e>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	07db      	lsls	r3, r3, #31
 800dba6:	d5e1      	bpl.n	800db6c <__swbuf_r+0x2e>
 800dba8:	2e0a      	cmp	r6, #10
 800dbaa:	d1df      	bne.n	800db6c <__swbuf_r+0x2e>
 800dbac:	4621      	mov	r1, r4
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f001 fcde 	bl	800f570 <_fflush_r>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d0d9      	beq.n	800db6c <__swbuf_r+0x2e>
 800dbb8:	e7d6      	b.n	800db68 <__swbuf_r+0x2a>
	...

0800dbbc <__swsetup_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4b29      	ldr	r3, [pc, #164]	@ (800dc64 <__swsetup_r+0xa8>)
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	b118      	cbz	r0, 800dbd0 <__swsetup_r+0x14>
 800dbc8:	6a03      	ldr	r3, [r0, #32]
 800dbca:	b90b      	cbnz	r3, 800dbd0 <__swsetup_r+0x14>
 800dbcc:	f7ff ff0a 	bl	800d9e4 <__sinit>
 800dbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd4:	0719      	lsls	r1, r3, #28
 800dbd6:	d422      	bmi.n	800dc1e <__swsetup_r+0x62>
 800dbd8:	06da      	lsls	r2, r3, #27
 800dbda:	d407      	bmi.n	800dbec <__swsetup_r+0x30>
 800dbdc:	2209      	movs	r2, #9
 800dbde:	602a      	str	r2, [r5, #0]
 800dbe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbea:	e033      	b.n	800dc54 <__swsetup_r+0x98>
 800dbec:	0758      	lsls	r0, r3, #29
 800dbee:	d512      	bpl.n	800dc16 <__swsetup_r+0x5a>
 800dbf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbf2:	b141      	cbz	r1, 800dc06 <__swsetup_r+0x4a>
 800dbf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbf8:	4299      	cmp	r1, r3
 800dbfa:	d002      	beq.n	800dc02 <__swsetup_r+0x46>
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	f000 ff0f 	bl	800ea20 <_free_r>
 800dc02:	2300      	movs	r3, #0
 800dc04:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	6063      	str	r3, [r4, #4]
 800dc12:	6923      	ldr	r3, [r4, #16]
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	f043 0308 	orr.w	r3, r3, #8
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	b94b      	cbnz	r3, 800dc36 <__swsetup_r+0x7a>
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc2c:	d003      	beq.n	800dc36 <__swsetup_r+0x7a>
 800dc2e:	4621      	mov	r1, r4
 800dc30:	4628      	mov	r0, r5
 800dc32:	f001 fceb 	bl	800f60c <__smakebuf_r>
 800dc36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc3a:	f013 0201 	ands.w	r2, r3, #1
 800dc3e:	d00a      	beq.n	800dc56 <__swsetup_r+0x9a>
 800dc40:	2200      	movs	r2, #0
 800dc42:	60a2      	str	r2, [r4, #8]
 800dc44:	6962      	ldr	r2, [r4, #20]
 800dc46:	4252      	negs	r2, r2
 800dc48:	61a2      	str	r2, [r4, #24]
 800dc4a:	6922      	ldr	r2, [r4, #16]
 800dc4c:	b942      	cbnz	r2, 800dc60 <__swsetup_r+0xa4>
 800dc4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc52:	d1c5      	bne.n	800dbe0 <__swsetup_r+0x24>
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	0799      	lsls	r1, r3, #30
 800dc58:	bf58      	it	pl
 800dc5a:	6962      	ldrpl	r2, [r4, #20]
 800dc5c:	60a2      	str	r2, [r4, #8]
 800dc5e:	e7f4      	b.n	800dc4a <__swsetup_r+0x8e>
 800dc60:	2000      	movs	r0, #0
 800dc62:	e7f7      	b.n	800dc54 <__swsetup_r+0x98>
 800dc64:	200001b4 	.word	0x200001b4

0800dc68 <memset>:
 800dc68:	4402      	add	r2, r0
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d100      	bne.n	800dc72 <memset+0xa>
 800dc70:	4770      	bx	lr
 800dc72:	f803 1b01 	strb.w	r1, [r3], #1
 800dc76:	e7f9      	b.n	800dc6c <memset+0x4>

0800dc78 <_localeconv_r>:
 800dc78:	4800      	ldr	r0, [pc, #0]	@ (800dc7c <_localeconv_r+0x4>)
 800dc7a:	4770      	bx	lr
 800dc7c:	200002f4 	.word	0x200002f4

0800dc80 <_close_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d06      	ldr	r5, [pc, #24]	@ (800dc9c <_close_r+0x1c>)
 800dc84:	2300      	movs	r3, #0
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	602b      	str	r3, [r5, #0]
 800dc8c:	f7f5 fc20 	bl	80034d0 <_close>
 800dc90:	1c43      	adds	r3, r0, #1
 800dc92:	d102      	bne.n	800dc9a <_close_r+0x1a>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	b103      	cbz	r3, 800dc9a <_close_r+0x1a>
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	bd38      	pop	{r3, r4, r5, pc}
 800dc9c:	200027b0 	.word	0x200027b0

0800dca0 <_lseek_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4d07      	ldr	r5, [pc, #28]	@ (800dcc0 <_lseek_r+0x20>)
 800dca4:	4604      	mov	r4, r0
 800dca6:	4608      	mov	r0, r1
 800dca8:	4611      	mov	r1, r2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	602a      	str	r2, [r5, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f7f5 fc35 	bl	800351e <_lseek>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_lseek_r+0x1e>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_lseek_r+0x1e>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	200027b0 	.word	0x200027b0

0800dcc4 <_read_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d07      	ldr	r5, [pc, #28]	@ (800dce4 <_read_r+0x20>)
 800dcc8:	4604      	mov	r4, r0
 800dcca:	4608      	mov	r0, r1
 800dccc:	4611      	mov	r1, r2
 800dcce:	2200      	movs	r2, #0
 800dcd0:	602a      	str	r2, [r5, #0]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f7f5 fbc3 	bl	800345e <_read>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_read_r+0x1e>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_read_r+0x1e>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	200027b0 	.word	0x200027b0

0800dce8 <_sbrk_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	@ (800dd04 <_sbrk_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f5 fc20 	bl	8003538 <_sbrk>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_sbrk_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_sbrk_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	200027b0 	.word	0x200027b0

0800dd08 <_write_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d07      	ldr	r5, [pc, #28]	@ (800dd28 <_write_r+0x20>)
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	4608      	mov	r0, r1
 800dd10:	4611      	mov	r1, r2
 800dd12:	2200      	movs	r2, #0
 800dd14:	602a      	str	r2, [r5, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	f7f5 fbbe 	bl	8003498 <_write>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_write_r+0x1e>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_write_r+0x1e>
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	200027b0 	.word	0x200027b0

0800dd2c <__errno>:
 800dd2c:	4b01      	ldr	r3, [pc, #4]	@ (800dd34 <__errno+0x8>)
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	200001b4 	.word	0x200001b4

0800dd38 <__libc_init_array>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd70 <__libc_init_array+0x38>)
 800dd3c:	4c0d      	ldr	r4, [pc, #52]	@ (800dd74 <__libc_init_array+0x3c>)
 800dd3e:	1b64      	subs	r4, r4, r5
 800dd40:	10a4      	asrs	r4, r4, #2
 800dd42:	2600      	movs	r6, #0
 800dd44:	42a6      	cmp	r6, r4
 800dd46:	d109      	bne.n	800dd5c <__libc_init_array+0x24>
 800dd48:	4d0b      	ldr	r5, [pc, #44]	@ (800dd78 <__libc_init_array+0x40>)
 800dd4a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd7c <__libc_init_array+0x44>)
 800dd4c:	f002 fe6a 	bl	8010a24 <_init>
 800dd50:	1b64      	subs	r4, r4, r5
 800dd52:	10a4      	asrs	r4, r4, #2
 800dd54:	2600      	movs	r6, #0
 800dd56:	42a6      	cmp	r6, r4
 800dd58:	d105      	bne.n	800dd66 <__libc_init_array+0x2e>
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}
 800dd5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd60:	4798      	blx	r3
 800dd62:	3601      	adds	r6, #1
 800dd64:	e7ee      	b.n	800dd44 <__libc_init_array+0xc>
 800dd66:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd6a:	4798      	blx	r3
 800dd6c:	3601      	adds	r6, #1
 800dd6e:	e7f2      	b.n	800dd56 <__libc_init_array+0x1e>
 800dd70:	08012f18 	.word	0x08012f18
 800dd74:	08012f18 	.word	0x08012f18
 800dd78:	08012f18 	.word	0x08012f18
 800dd7c:	08012f1c 	.word	0x08012f1c

0800dd80 <__retarget_lock_init_recursive>:
 800dd80:	4770      	bx	lr

0800dd82 <__retarget_lock_acquire_recursive>:
 800dd82:	4770      	bx	lr

0800dd84 <__retarget_lock_release_recursive>:
 800dd84:	4770      	bx	lr

0800dd86 <quorem>:
 800dd86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	6903      	ldr	r3, [r0, #16]
 800dd8c:	690c      	ldr	r4, [r1, #16]
 800dd8e:	42a3      	cmp	r3, r4
 800dd90:	4607      	mov	r7, r0
 800dd92:	db7e      	blt.n	800de92 <quorem+0x10c>
 800dd94:	3c01      	subs	r4, #1
 800dd96:	f101 0814 	add.w	r8, r1, #20
 800dd9a:	00a3      	lsls	r3, r4, #2
 800dd9c:	f100 0514 	add.w	r5, r0, #20
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dda6:	9301      	str	r3, [sp, #4]
 800dda8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddbc:	d32e      	bcc.n	800de1c <quorem+0x96>
 800ddbe:	f04f 0a00 	mov.w	sl, #0
 800ddc2:	46c4      	mov	ip, r8
 800ddc4:	46ae      	mov	lr, r5
 800ddc6:	46d3      	mov	fp, sl
 800ddc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ddcc:	b298      	uxth	r0, r3
 800ddce:	fb06 a000 	mla	r0, r6, r0, sl
 800ddd2:	0c02      	lsrs	r2, r0, #16
 800ddd4:	0c1b      	lsrs	r3, r3, #16
 800ddd6:	fb06 2303 	mla	r3, r6, r3, r2
 800ddda:	f8de 2000 	ldr.w	r2, [lr]
 800ddde:	b280      	uxth	r0, r0
 800dde0:	b292      	uxth	r2, r2
 800dde2:	1a12      	subs	r2, r2, r0
 800dde4:	445a      	add	r2, fp
 800dde6:	f8de 0000 	ldr.w	r0, [lr]
 800ddea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ddf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ddf8:	b292      	uxth	r2, r2
 800ddfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddfe:	45e1      	cmp	r9, ip
 800de00:	f84e 2b04 	str.w	r2, [lr], #4
 800de04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de08:	d2de      	bcs.n	800ddc8 <quorem+0x42>
 800de0a:	9b00      	ldr	r3, [sp, #0]
 800de0c:	58eb      	ldr	r3, [r5, r3]
 800de0e:	b92b      	cbnz	r3, 800de1c <quorem+0x96>
 800de10:	9b01      	ldr	r3, [sp, #4]
 800de12:	3b04      	subs	r3, #4
 800de14:	429d      	cmp	r5, r3
 800de16:	461a      	mov	r2, r3
 800de18:	d32f      	bcc.n	800de7a <quorem+0xf4>
 800de1a:	613c      	str	r4, [r7, #16]
 800de1c:	4638      	mov	r0, r7
 800de1e:	f001 f8c3 	bl	800efa8 <__mcmp>
 800de22:	2800      	cmp	r0, #0
 800de24:	db25      	blt.n	800de72 <quorem+0xec>
 800de26:	4629      	mov	r1, r5
 800de28:	2000      	movs	r0, #0
 800de2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800de2e:	f8d1 c000 	ldr.w	ip, [r1]
 800de32:	fa1f fe82 	uxth.w	lr, r2
 800de36:	fa1f f38c 	uxth.w	r3, ip
 800de3a:	eba3 030e 	sub.w	r3, r3, lr
 800de3e:	4403      	add	r3, r0
 800de40:	0c12      	lsrs	r2, r2, #16
 800de42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de50:	45c1      	cmp	r9, r8
 800de52:	f841 3b04 	str.w	r3, [r1], #4
 800de56:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de5a:	d2e6      	bcs.n	800de2a <quorem+0xa4>
 800de5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de64:	b922      	cbnz	r2, 800de70 <quorem+0xea>
 800de66:	3b04      	subs	r3, #4
 800de68:	429d      	cmp	r5, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	d30b      	bcc.n	800de86 <quorem+0x100>
 800de6e:	613c      	str	r4, [r7, #16]
 800de70:	3601      	adds	r6, #1
 800de72:	4630      	mov	r0, r6
 800de74:	b003      	add	sp, #12
 800de76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7a:	6812      	ldr	r2, [r2, #0]
 800de7c:	3b04      	subs	r3, #4
 800de7e:	2a00      	cmp	r2, #0
 800de80:	d1cb      	bne.n	800de1a <quorem+0x94>
 800de82:	3c01      	subs	r4, #1
 800de84:	e7c6      	b.n	800de14 <quorem+0x8e>
 800de86:	6812      	ldr	r2, [r2, #0]
 800de88:	3b04      	subs	r3, #4
 800de8a:	2a00      	cmp	r2, #0
 800de8c:	d1ef      	bne.n	800de6e <quorem+0xe8>
 800de8e:	3c01      	subs	r4, #1
 800de90:	e7ea      	b.n	800de68 <quorem+0xe2>
 800de92:	2000      	movs	r0, #0
 800de94:	e7ee      	b.n	800de74 <quorem+0xee>
	...

0800de98 <_dtoa_r>:
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	69c7      	ldr	r7, [r0, #28]
 800de9e:	b099      	sub	sp, #100	@ 0x64
 800dea0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800deaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800deac:	4683      	mov	fp, r0
 800deae:	920e      	str	r2, [sp, #56]	@ 0x38
 800deb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800deb2:	b97f      	cbnz	r7, 800ded4 <_dtoa_r+0x3c>
 800deb4:	2010      	movs	r0, #16
 800deb6:	f7fe fff3 	bl	800cea0 <malloc>
 800deba:	4602      	mov	r2, r0
 800debc:	f8cb 001c 	str.w	r0, [fp, #28]
 800dec0:	b920      	cbnz	r0, 800decc <_dtoa_r+0x34>
 800dec2:	4ba7      	ldr	r3, [pc, #668]	@ (800e160 <_dtoa_r+0x2c8>)
 800dec4:	21ef      	movs	r1, #239	@ 0xef
 800dec6:	48a7      	ldr	r0, [pc, #668]	@ (800e164 <_dtoa_r+0x2cc>)
 800dec8:	f001 fc26 	bl	800f718 <__assert_func>
 800decc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ded0:	6007      	str	r7, [r0, #0]
 800ded2:	60c7      	str	r7, [r0, #12]
 800ded4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ded8:	6819      	ldr	r1, [r3, #0]
 800deda:	b159      	cbz	r1, 800def4 <_dtoa_r+0x5c>
 800dedc:	685a      	ldr	r2, [r3, #4]
 800dede:	604a      	str	r2, [r1, #4]
 800dee0:	2301      	movs	r3, #1
 800dee2:	4093      	lsls	r3, r2
 800dee4:	608b      	str	r3, [r1, #8]
 800dee6:	4658      	mov	r0, fp
 800dee8:	f000 fe24 	bl	800eb34 <_Bfree>
 800deec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	1e2b      	subs	r3, r5, #0
 800def6:	bfb9      	ittee	lt
 800def8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800defc:	9303      	strlt	r3, [sp, #12]
 800defe:	2300      	movge	r3, #0
 800df00:	6033      	strge	r3, [r6, #0]
 800df02:	9f03      	ldr	r7, [sp, #12]
 800df04:	4b98      	ldr	r3, [pc, #608]	@ (800e168 <_dtoa_r+0x2d0>)
 800df06:	bfbc      	itt	lt
 800df08:	2201      	movlt	r2, #1
 800df0a:	6032      	strlt	r2, [r6, #0]
 800df0c:	43bb      	bics	r3, r7
 800df0e:	d112      	bne.n	800df36 <_dtoa_r+0x9e>
 800df10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df12:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df1c:	4323      	orrs	r3, r4
 800df1e:	f000 854d 	beq.w	800e9bc <_dtoa_r+0xb24>
 800df22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e17c <_dtoa_r+0x2e4>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 854f 	beq.w	800e9cc <_dtoa_r+0xb34>
 800df2e:	f10a 0303 	add.w	r3, sl, #3
 800df32:	f000 bd49 	b.w	800e9c8 <_dtoa_r+0xb30>
 800df36:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df3a:	2200      	movs	r2, #0
 800df3c:	ec51 0b17 	vmov	r0, r1, d7
 800df40:	2300      	movs	r3, #0
 800df42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df46:	f7f2 fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800df4a:	4680      	mov	r8, r0
 800df4c:	b158      	cbz	r0, 800df66 <_dtoa_r+0xce>
 800df4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df50:	2301      	movs	r3, #1
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df56:	b113      	cbz	r3, 800df5e <_dtoa_r+0xc6>
 800df58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df5a:	4b84      	ldr	r3, [pc, #528]	@ (800e16c <_dtoa_r+0x2d4>)
 800df5c:	6013      	str	r3, [r2, #0]
 800df5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e180 <_dtoa_r+0x2e8>
 800df62:	f000 bd33 	b.w	800e9cc <_dtoa_r+0xb34>
 800df66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df6a:	aa16      	add	r2, sp, #88	@ 0x58
 800df6c:	a917      	add	r1, sp, #92	@ 0x5c
 800df6e:	4658      	mov	r0, fp
 800df70:	f001 f8ca 	bl	800f108 <__d2b>
 800df74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df78:	4681      	mov	r9, r0
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	d077      	beq.n	800e06e <_dtoa_r+0x1d6>
 800df7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800df84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df98:	4619      	mov	r1, r3
 800df9a:	2200      	movs	r2, #0
 800df9c:	4b74      	ldr	r3, [pc, #464]	@ (800e170 <_dtoa_r+0x2d8>)
 800df9e:	f7f2 f97b 	bl	8000298 <__aeabi_dsub>
 800dfa2:	a369      	add	r3, pc, #420	@ (adr r3, 800e148 <_dtoa_r+0x2b0>)
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f7f2 fb2e 	bl	8000608 <__aeabi_dmul>
 800dfac:	a368      	add	r3, pc, #416	@ (adr r3, 800e150 <_dtoa_r+0x2b8>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f973 	bl	800029c <__adddf3>
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	4630      	mov	r0, r6
 800dfba:	460d      	mov	r5, r1
 800dfbc:	f7f2 faba 	bl	8000534 <__aeabi_i2d>
 800dfc0:	a365      	add	r3, pc, #404	@ (adr r3, 800e158 <_dtoa_r+0x2c0>)
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	f7f2 fb1f 	bl	8000608 <__aeabi_dmul>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 f963 	bl	800029c <__adddf3>
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	f7f2 fdc5 	bl	8000b68 <__aeabi_d2iz>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fd80 	bl	8000aec <__aeabi_dcmplt>
 800dfec:	b140      	cbz	r0, 800e000 <_dtoa_r+0x168>
 800dfee:	4638      	mov	r0, r7
 800dff0:	f7f2 faa0 	bl	8000534 <__aeabi_i2d>
 800dff4:	4622      	mov	r2, r4
 800dff6:	462b      	mov	r3, r5
 800dff8:	f7f2 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800dffc:	b900      	cbnz	r0, 800e000 <_dtoa_r+0x168>
 800dffe:	3f01      	subs	r7, #1
 800e000:	2f16      	cmp	r7, #22
 800e002:	d851      	bhi.n	800e0a8 <_dtoa_r+0x210>
 800e004:	4b5b      	ldr	r3, [pc, #364]	@ (800e174 <_dtoa_r+0x2dc>)
 800e006:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e012:	f7f2 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800e016:	2800      	cmp	r0, #0
 800e018:	d048      	beq.n	800e0ac <_dtoa_r+0x214>
 800e01a:	3f01      	subs	r7, #1
 800e01c:	2300      	movs	r3, #0
 800e01e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e020:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e022:	1b9b      	subs	r3, r3, r6
 800e024:	1e5a      	subs	r2, r3, #1
 800e026:	bf44      	itt	mi
 800e028:	f1c3 0801 	rsbmi	r8, r3, #1
 800e02c:	2300      	movmi	r3, #0
 800e02e:	9208      	str	r2, [sp, #32]
 800e030:	bf54      	ite	pl
 800e032:	f04f 0800 	movpl.w	r8, #0
 800e036:	9308      	strmi	r3, [sp, #32]
 800e038:	2f00      	cmp	r7, #0
 800e03a:	db39      	blt.n	800e0b0 <_dtoa_r+0x218>
 800e03c:	9b08      	ldr	r3, [sp, #32]
 800e03e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e040:	443b      	add	r3, r7
 800e042:	9308      	str	r3, [sp, #32]
 800e044:	2300      	movs	r3, #0
 800e046:	930a      	str	r3, [sp, #40]	@ 0x28
 800e048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e04a:	2b09      	cmp	r3, #9
 800e04c:	d864      	bhi.n	800e118 <_dtoa_r+0x280>
 800e04e:	2b05      	cmp	r3, #5
 800e050:	bfc4      	itt	gt
 800e052:	3b04      	subgt	r3, #4
 800e054:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e058:	f1a3 0302 	sub.w	r3, r3, #2
 800e05c:	bfcc      	ite	gt
 800e05e:	2400      	movgt	r4, #0
 800e060:	2401      	movle	r4, #1
 800e062:	2b03      	cmp	r3, #3
 800e064:	d863      	bhi.n	800e12e <_dtoa_r+0x296>
 800e066:	e8df f003 	tbb	[pc, r3]
 800e06a:	372a      	.short	0x372a
 800e06c:	5535      	.short	0x5535
 800e06e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e072:	441e      	add	r6, r3
 800e074:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e078:	2b20      	cmp	r3, #32
 800e07a:	bfc1      	itttt	gt
 800e07c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e080:	409f      	lslgt	r7, r3
 800e082:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e086:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e08a:	bfd6      	itet	le
 800e08c:	f1c3 0320 	rsble	r3, r3, #32
 800e090:	ea47 0003 	orrgt.w	r0, r7, r3
 800e094:	fa04 f003 	lslle.w	r0, r4, r3
 800e098:	f7f2 fa3c 	bl	8000514 <__aeabi_ui2d>
 800e09c:	2201      	movs	r2, #1
 800e09e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e0a2:	3e01      	subs	r6, #1
 800e0a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e0a6:	e777      	b.n	800df98 <_dtoa_r+0x100>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e7b8      	b.n	800e01e <_dtoa_r+0x186>
 800e0ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800e0ae:	e7b7      	b.n	800e020 <_dtoa_r+0x188>
 800e0b0:	427b      	negs	r3, r7
 800e0b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	eba8 0807 	sub.w	r8, r8, r7
 800e0ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0bc:	e7c4      	b.n	800e048 <_dtoa_r+0x1b0>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	dc35      	bgt.n	800e134 <_dtoa_r+0x29c>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	9307      	str	r3, [sp, #28]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0d2:	e00b      	b.n	800e0ec <_dtoa_r+0x254>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e7f3      	b.n	800e0c0 <_dtoa_r+0x228>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0de:	18fb      	adds	r3, r7, r3
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	9307      	str	r3, [sp, #28]
 800e0e8:	bfb8      	it	lt
 800e0ea:	2301      	movlt	r3, #1
 800e0ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	2204      	movs	r2, #4
 800e0f4:	f102 0514 	add.w	r5, r2, #20
 800e0f8:	429d      	cmp	r5, r3
 800e0fa:	d91f      	bls.n	800e13c <_dtoa_r+0x2a4>
 800e0fc:	6041      	str	r1, [r0, #4]
 800e0fe:	4658      	mov	r0, fp
 800e100:	f000 fcd8 	bl	800eab4 <_Balloc>
 800e104:	4682      	mov	sl, r0
 800e106:	2800      	cmp	r0, #0
 800e108:	d13c      	bne.n	800e184 <_dtoa_r+0x2ec>
 800e10a:	4b1b      	ldr	r3, [pc, #108]	@ (800e178 <_dtoa_r+0x2e0>)
 800e10c:	4602      	mov	r2, r0
 800e10e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e112:	e6d8      	b.n	800dec6 <_dtoa_r+0x2e>
 800e114:	2301      	movs	r3, #1
 800e116:	e7e0      	b.n	800e0da <_dtoa_r+0x242>
 800e118:	2401      	movs	r4, #1
 800e11a:	2300      	movs	r3, #0
 800e11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e120:	f04f 33ff 	mov.w	r3, #4294967295
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	9307      	str	r3, [sp, #28]
 800e128:	2200      	movs	r2, #0
 800e12a:	2312      	movs	r3, #18
 800e12c:	e7d0      	b.n	800e0d0 <_dtoa_r+0x238>
 800e12e:	2301      	movs	r3, #1
 800e130:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e132:	e7f5      	b.n	800e120 <_dtoa_r+0x288>
 800e134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	9307      	str	r3, [sp, #28]
 800e13a:	e7d7      	b.n	800e0ec <_dtoa_r+0x254>
 800e13c:	3101      	adds	r1, #1
 800e13e:	0052      	lsls	r2, r2, #1
 800e140:	e7d8      	b.n	800e0f4 <_dtoa_r+0x25c>
 800e142:	bf00      	nop
 800e144:	f3af 8000 	nop.w
 800e148:	636f4361 	.word	0x636f4361
 800e14c:	3fd287a7 	.word	0x3fd287a7
 800e150:	8b60c8b3 	.word	0x8b60c8b3
 800e154:	3fc68a28 	.word	0x3fc68a28
 800e158:	509f79fb 	.word	0x509f79fb
 800e15c:	3fd34413 	.word	0x3fd34413
 800e160:	08012bad 	.word	0x08012bad
 800e164:	08012bc4 	.word	0x08012bc4
 800e168:	7ff00000 	.word	0x7ff00000
 800e16c:	08012b7d 	.word	0x08012b7d
 800e170:	3ff80000 	.word	0x3ff80000
 800e174:	08012cc0 	.word	0x08012cc0
 800e178:	08012c1c 	.word	0x08012c1c
 800e17c:	08012ba9 	.word	0x08012ba9
 800e180:	08012b7c 	.word	0x08012b7c
 800e184:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e188:	6018      	str	r0, [r3, #0]
 800e18a:	9b07      	ldr	r3, [sp, #28]
 800e18c:	2b0e      	cmp	r3, #14
 800e18e:	f200 80a4 	bhi.w	800e2da <_dtoa_r+0x442>
 800e192:	2c00      	cmp	r4, #0
 800e194:	f000 80a1 	beq.w	800e2da <_dtoa_r+0x442>
 800e198:	2f00      	cmp	r7, #0
 800e19a:	dd33      	ble.n	800e204 <_dtoa_r+0x36c>
 800e19c:	4bad      	ldr	r3, [pc, #692]	@ (800e454 <_dtoa_r+0x5bc>)
 800e19e:	f007 020f 	and.w	r2, r7, #15
 800e1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1a6:	ed93 7b00 	vldr	d7, [r3]
 800e1aa:	05f8      	lsls	r0, r7, #23
 800e1ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e1b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e1b4:	d516      	bpl.n	800e1e4 <_dtoa_r+0x34c>
 800e1b6:	4ba8      	ldr	r3, [pc, #672]	@ (800e458 <_dtoa_r+0x5c0>)
 800e1b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1c0:	f7f2 fb4c 	bl	800085c <__aeabi_ddiv>
 800e1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1c8:	f004 040f 	and.w	r4, r4, #15
 800e1cc:	2603      	movs	r6, #3
 800e1ce:	4da2      	ldr	r5, [pc, #648]	@ (800e458 <_dtoa_r+0x5c0>)
 800e1d0:	b954      	cbnz	r4, 800e1e8 <_dtoa_r+0x350>
 800e1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1da:	f7f2 fb3f 	bl	800085c <__aeabi_ddiv>
 800e1de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1e2:	e028      	b.n	800e236 <_dtoa_r+0x39e>
 800e1e4:	2602      	movs	r6, #2
 800e1e6:	e7f2      	b.n	800e1ce <_dtoa_r+0x336>
 800e1e8:	07e1      	lsls	r1, r4, #31
 800e1ea:	d508      	bpl.n	800e1fe <_dtoa_r+0x366>
 800e1ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1f4:	f7f2 fa08 	bl	8000608 <__aeabi_dmul>
 800e1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1fc:	3601      	adds	r6, #1
 800e1fe:	1064      	asrs	r4, r4, #1
 800e200:	3508      	adds	r5, #8
 800e202:	e7e5      	b.n	800e1d0 <_dtoa_r+0x338>
 800e204:	f000 80d2 	beq.w	800e3ac <_dtoa_r+0x514>
 800e208:	427c      	negs	r4, r7
 800e20a:	4b92      	ldr	r3, [pc, #584]	@ (800e454 <_dtoa_r+0x5bc>)
 800e20c:	4d92      	ldr	r5, [pc, #584]	@ (800e458 <_dtoa_r+0x5c0>)
 800e20e:	f004 020f 	and.w	r2, r4, #15
 800e212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e21e:	f7f2 f9f3 	bl	8000608 <__aeabi_dmul>
 800e222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e226:	1124      	asrs	r4, r4, #4
 800e228:	2300      	movs	r3, #0
 800e22a:	2602      	movs	r6, #2
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	f040 80b2 	bne.w	800e396 <_dtoa_r+0x4fe>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1d3      	bne.n	800e1de <_dtoa_r+0x346>
 800e236:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e238:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 80b7 	beq.w	800e3b0 <_dtoa_r+0x518>
 800e242:	4b86      	ldr	r3, [pc, #536]	@ (800e45c <_dtoa_r+0x5c4>)
 800e244:	2200      	movs	r2, #0
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 fc4f 	bl	8000aec <__aeabi_dcmplt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	f000 80ae 	beq.w	800e3b0 <_dtoa_r+0x518>
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 80aa 	beq.w	800e3b0 <_dtoa_r+0x518>
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dd37      	ble.n	800e2d2 <_dtoa_r+0x43a>
 800e262:	1e7b      	subs	r3, r7, #1
 800e264:	9304      	str	r3, [sp, #16]
 800e266:	4620      	mov	r0, r4
 800e268:	4b7d      	ldr	r3, [pc, #500]	@ (800e460 <_dtoa_r+0x5c8>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f9cb 	bl	8000608 <__aeabi_dmul>
 800e272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e276:	9c00      	ldr	r4, [sp, #0]
 800e278:	3601      	adds	r6, #1
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7f2 f95a 	bl	8000534 <__aeabi_i2d>
 800e280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	4b76      	ldr	r3, [pc, #472]	@ (800e464 <_dtoa_r+0x5cc>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	f7f2 f806 	bl	800029c <__adddf3>
 800e290:	4605      	mov	r5, r0
 800e292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e296:	2c00      	cmp	r4, #0
 800e298:	f040 808d 	bne.w	800e3b6 <_dtoa_r+0x51e>
 800e29c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a0:	4b71      	ldr	r3, [pc, #452]	@ (800e468 <_dtoa_r+0x5d0>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f7f1 fff8 	bl	8000298 <__aeabi_dsub>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	4633      	mov	r3, r6
 800e2b4:	f7f2 fc38 	bl	8000b28 <__aeabi_dcmpgt>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	f040 828b 	bne.w	800e7d4 <_dtoa_r+0x93c>
 800e2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2c2:	462a      	mov	r2, r5
 800e2c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e2c8:	f7f2 fc10 	bl	8000aec <__aeabi_dcmplt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f040 8128 	bne.w	800e522 <_dtoa_r+0x68a>
 800e2d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e2d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e2da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f2c0 815a 	blt.w	800e596 <_dtoa_r+0x6fe>
 800e2e2:	2f0e      	cmp	r7, #14
 800e2e4:	f300 8157 	bgt.w	800e596 <_dtoa_r+0x6fe>
 800e2e8:	4b5a      	ldr	r3, [pc, #360]	@ (800e454 <_dtoa_r+0x5bc>)
 800e2ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2ee:	ed93 7b00 	vldr	d7, [r3]
 800e2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	ed8d 7b00 	vstr	d7, [sp]
 800e2fa:	da03      	bge.n	800e304 <_dtoa_r+0x46c>
 800e2fc:	9b07      	ldr	r3, [sp, #28]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f340 8101 	ble.w	800e506 <_dtoa_r+0x66e>
 800e304:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e308:	4656      	mov	r6, sl
 800e30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f2 faa3 	bl	800085c <__aeabi_ddiv>
 800e316:	f7f2 fc27 	bl	8000b68 <__aeabi_d2iz>
 800e31a:	4680      	mov	r8, r0
 800e31c:	f7f2 f90a 	bl	8000534 <__aeabi_i2d>
 800e320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e324:	f7f2 f970 	bl	8000608 <__aeabi_dmul>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4620      	mov	r0, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e334:	f7f1 ffb0 	bl	8000298 <__aeabi_dsub>
 800e338:	f806 4b01 	strb.w	r4, [r6], #1
 800e33c:	9d07      	ldr	r5, [sp, #28]
 800e33e:	eba6 040a 	sub.w	r4, r6, sl
 800e342:	42a5      	cmp	r5, r4
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	f040 8117 	bne.w	800e57a <_dtoa_r+0x6e2>
 800e34c:	f7f1 ffa6 	bl	800029c <__adddf3>
 800e350:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e354:	4604      	mov	r4, r0
 800e356:	460d      	mov	r5, r1
 800e358:	f7f2 fbe6 	bl	8000b28 <__aeabi_dcmpgt>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	f040 80f9 	bne.w	800e554 <_dtoa_r+0x6bc>
 800e362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e366:	4620      	mov	r0, r4
 800e368:	4629      	mov	r1, r5
 800e36a:	f7f2 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800e36e:	b118      	cbz	r0, 800e378 <_dtoa_r+0x4e0>
 800e370:	f018 0f01 	tst.w	r8, #1
 800e374:	f040 80ee 	bne.w	800e554 <_dtoa_r+0x6bc>
 800e378:	4649      	mov	r1, r9
 800e37a:	4658      	mov	r0, fp
 800e37c:	f000 fbda 	bl	800eb34 <_Bfree>
 800e380:	2300      	movs	r3, #0
 800e382:	7033      	strb	r3, [r6, #0]
 800e384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e386:	3701      	adds	r7, #1
 800e388:	601f      	str	r7, [r3, #0]
 800e38a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f000 831d 	beq.w	800e9cc <_dtoa_r+0xb34>
 800e392:	601e      	str	r6, [r3, #0]
 800e394:	e31a      	b.n	800e9cc <_dtoa_r+0xb34>
 800e396:	07e2      	lsls	r2, r4, #31
 800e398:	d505      	bpl.n	800e3a6 <_dtoa_r+0x50e>
 800e39a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e39e:	f7f2 f933 	bl	8000608 <__aeabi_dmul>
 800e3a2:	3601      	adds	r6, #1
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	1064      	asrs	r4, r4, #1
 800e3a8:	3508      	adds	r5, #8
 800e3aa:	e73f      	b.n	800e22c <_dtoa_r+0x394>
 800e3ac:	2602      	movs	r6, #2
 800e3ae:	e742      	b.n	800e236 <_dtoa_r+0x39e>
 800e3b0:	9c07      	ldr	r4, [sp, #28]
 800e3b2:	9704      	str	r7, [sp, #16]
 800e3b4:	e761      	b.n	800e27a <_dtoa_r+0x3e2>
 800e3b6:	4b27      	ldr	r3, [pc, #156]	@ (800e454 <_dtoa_r+0x5bc>)
 800e3b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3c2:	4454      	add	r4, sl
 800e3c4:	2900      	cmp	r1, #0
 800e3c6:	d053      	beq.n	800e470 <_dtoa_r+0x5d8>
 800e3c8:	4928      	ldr	r1, [pc, #160]	@ (800e46c <_dtoa_r+0x5d4>)
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	f7f2 fa46 	bl	800085c <__aeabi_ddiv>
 800e3d0:	4633      	mov	r3, r6
 800e3d2:	462a      	mov	r2, r5
 800e3d4:	f7f1 ff60 	bl	8000298 <__aeabi_dsub>
 800e3d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e3dc:	4656      	mov	r6, sl
 800e3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e2:	f7f2 fbc1 	bl	8000b68 <__aeabi_d2iz>
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	f7f2 f8a4 	bl	8000534 <__aeabi_i2d>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f4:	f7f1 ff50 	bl	8000298 <__aeabi_dsub>
 800e3f8:	3530      	adds	r5, #48	@ 0x30
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e402:	f806 5b01 	strb.w	r5, [r6], #1
 800e406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e40a:	f7f2 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d171      	bne.n	800e4f6 <_dtoa_r+0x65e>
 800e412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e416:	4911      	ldr	r1, [pc, #68]	@ (800e45c <_dtoa_r+0x5c4>)
 800e418:	2000      	movs	r0, #0
 800e41a:	f7f1 ff3d 	bl	8000298 <__aeabi_dsub>
 800e41e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e422:	f7f2 fb63 	bl	8000aec <__aeabi_dcmplt>
 800e426:	2800      	cmp	r0, #0
 800e428:	f040 8095 	bne.w	800e556 <_dtoa_r+0x6be>
 800e42c:	42a6      	cmp	r6, r4
 800e42e:	f43f af50 	beq.w	800e2d2 <_dtoa_r+0x43a>
 800e432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e436:	4b0a      	ldr	r3, [pc, #40]	@ (800e460 <_dtoa_r+0x5c8>)
 800e438:	2200      	movs	r2, #0
 800e43a:	f7f2 f8e5 	bl	8000608 <__aeabi_dmul>
 800e43e:	4b08      	ldr	r3, [pc, #32]	@ (800e460 <_dtoa_r+0x5c8>)
 800e440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e444:	2200      	movs	r2, #0
 800e446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e44a:	f7f2 f8dd 	bl	8000608 <__aeabi_dmul>
 800e44e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e452:	e7c4      	b.n	800e3de <_dtoa_r+0x546>
 800e454:	08012cc0 	.word	0x08012cc0
 800e458:	08012c98 	.word	0x08012c98
 800e45c:	3ff00000 	.word	0x3ff00000
 800e460:	40240000 	.word	0x40240000
 800e464:	401c0000 	.word	0x401c0000
 800e468:	40140000 	.word	0x40140000
 800e46c:	3fe00000 	.word	0x3fe00000
 800e470:	4631      	mov	r1, r6
 800e472:	4628      	mov	r0, r5
 800e474:	f7f2 f8c8 	bl	8000608 <__aeabi_dmul>
 800e478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e47c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e47e:	4656      	mov	r6, sl
 800e480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e484:	f7f2 fb70 	bl	8000b68 <__aeabi_d2iz>
 800e488:	4605      	mov	r5, r0
 800e48a:	f7f2 f853 	bl	8000534 <__aeabi_i2d>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e496:	f7f1 feff 	bl	8000298 <__aeabi_dsub>
 800e49a:	3530      	adds	r5, #48	@ 0x30
 800e49c:	f806 5b01 	strb.w	r5, [r6], #1
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	42a6      	cmp	r6, r4
 800e4a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4aa:	f04f 0200 	mov.w	r2, #0
 800e4ae:	d124      	bne.n	800e4fa <_dtoa_r+0x662>
 800e4b0:	4bac      	ldr	r3, [pc, #688]	@ (800e764 <_dtoa_r+0x8cc>)
 800e4b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4b6:	f7f1 fef1 	bl	800029c <__adddf3>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4c2:	f7f2 fb31 	bl	8000b28 <__aeabi_dcmpgt>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d145      	bne.n	800e556 <_dtoa_r+0x6be>
 800e4ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4ce:	49a5      	ldr	r1, [pc, #660]	@ (800e764 <_dtoa_r+0x8cc>)
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f7f1 fee1 	bl	8000298 <__aeabi_dsub>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	460b      	mov	r3, r1
 800e4da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4de:	f7f2 fb05 	bl	8000aec <__aeabi_dcmplt>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	f43f aef5 	beq.w	800e2d2 <_dtoa_r+0x43a>
 800e4e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e4ea:	1e73      	subs	r3, r6, #1
 800e4ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4f2:	2b30      	cmp	r3, #48	@ 0x30
 800e4f4:	d0f8      	beq.n	800e4e8 <_dtoa_r+0x650>
 800e4f6:	9f04      	ldr	r7, [sp, #16]
 800e4f8:	e73e      	b.n	800e378 <_dtoa_r+0x4e0>
 800e4fa:	4b9b      	ldr	r3, [pc, #620]	@ (800e768 <_dtoa_r+0x8d0>)
 800e4fc:	f7f2 f884 	bl	8000608 <__aeabi_dmul>
 800e500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e504:	e7bc      	b.n	800e480 <_dtoa_r+0x5e8>
 800e506:	d10c      	bne.n	800e522 <_dtoa_r+0x68a>
 800e508:	4b98      	ldr	r3, [pc, #608]	@ (800e76c <_dtoa_r+0x8d4>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e510:	f7f2 f87a 	bl	8000608 <__aeabi_dmul>
 800e514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e518:	f7f2 fafc 	bl	8000b14 <__aeabi_dcmpge>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f000 8157 	beq.w	800e7d0 <_dtoa_r+0x938>
 800e522:	2400      	movs	r4, #0
 800e524:	4625      	mov	r5, r4
 800e526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e528:	43db      	mvns	r3, r3
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	4656      	mov	r6, sl
 800e52e:	2700      	movs	r7, #0
 800e530:	4621      	mov	r1, r4
 800e532:	4658      	mov	r0, fp
 800e534:	f000 fafe 	bl	800eb34 <_Bfree>
 800e538:	2d00      	cmp	r5, #0
 800e53a:	d0dc      	beq.n	800e4f6 <_dtoa_r+0x65e>
 800e53c:	b12f      	cbz	r7, 800e54a <_dtoa_r+0x6b2>
 800e53e:	42af      	cmp	r7, r5
 800e540:	d003      	beq.n	800e54a <_dtoa_r+0x6b2>
 800e542:	4639      	mov	r1, r7
 800e544:	4658      	mov	r0, fp
 800e546:	f000 faf5 	bl	800eb34 <_Bfree>
 800e54a:	4629      	mov	r1, r5
 800e54c:	4658      	mov	r0, fp
 800e54e:	f000 faf1 	bl	800eb34 <_Bfree>
 800e552:	e7d0      	b.n	800e4f6 <_dtoa_r+0x65e>
 800e554:	9704      	str	r7, [sp, #16]
 800e556:	4633      	mov	r3, r6
 800e558:	461e      	mov	r6, r3
 800e55a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e55e:	2a39      	cmp	r2, #57	@ 0x39
 800e560:	d107      	bne.n	800e572 <_dtoa_r+0x6da>
 800e562:	459a      	cmp	sl, r3
 800e564:	d1f8      	bne.n	800e558 <_dtoa_r+0x6c0>
 800e566:	9a04      	ldr	r2, [sp, #16]
 800e568:	3201      	adds	r2, #1
 800e56a:	9204      	str	r2, [sp, #16]
 800e56c:	2230      	movs	r2, #48	@ 0x30
 800e56e:	f88a 2000 	strb.w	r2, [sl]
 800e572:	781a      	ldrb	r2, [r3, #0]
 800e574:	3201      	adds	r2, #1
 800e576:	701a      	strb	r2, [r3, #0]
 800e578:	e7bd      	b.n	800e4f6 <_dtoa_r+0x65e>
 800e57a:	4b7b      	ldr	r3, [pc, #492]	@ (800e768 <_dtoa_r+0x8d0>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	f7f2 f843 	bl	8000608 <__aeabi_dmul>
 800e582:	2200      	movs	r2, #0
 800e584:	2300      	movs	r3, #0
 800e586:	4604      	mov	r4, r0
 800e588:	460d      	mov	r5, r1
 800e58a:	f7f2 faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800e58e:	2800      	cmp	r0, #0
 800e590:	f43f aebb 	beq.w	800e30a <_dtoa_r+0x472>
 800e594:	e6f0      	b.n	800e378 <_dtoa_r+0x4e0>
 800e596:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e598:	2a00      	cmp	r2, #0
 800e59a:	f000 80db 	beq.w	800e754 <_dtoa_r+0x8bc>
 800e59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5a0:	2a01      	cmp	r2, #1
 800e5a2:	f300 80bf 	bgt.w	800e724 <_dtoa_r+0x88c>
 800e5a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	f000 80b7 	beq.w	800e71c <_dtoa_r+0x884>
 800e5ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e5b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5b4:	4646      	mov	r6, r8
 800e5b6:	9a08      	ldr	r2, [sp, #32]
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	441a      	add	r2, r3
 800e5bc:	4658      	mov	r0, fp
 800e5be:	4498      	add	r8, r3
 800e5c0:	9208      	str	r2, [sp, #32]
 800e5c2:	f000 fb6b 	bl	800ec9c <__i2b>
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	b15e      	cbz	r6, 800e5e2 <_dtoa_r+0x74a>
 800e5ca:	9b08      	ldr	r3, [sp, #32]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	dd08      	ble.n	800e5e2 <_dtoa_r+0x74a>
 800e5d0:	42b3      	cmp	r3, r6
 800e5d2:	9a08      	ldr	r2, [sp, #32]
 800e5d4:	bfa8      	it	ge
 800e5d6:	4633      	movge	r3, r6
 800e5d8:	eba8 0803 	sub.w	r8, r8, r3
 800e5dc:	1af6      	subs	r6, r6, r3
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	9308      	str	r3, [sp, #32]
 800e5e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5e4:	b1f3      	cbz	r3, 800e624 <_dtoa_r+0x78c>
 800e5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80b7 	beq.w	800e75c <_dtoa_r+0x8c4>
 800e5ee:	b18c      	cbz	r4, 800e614 <_dtoa_r+0x77c>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	4622      	mov	r2, r4
 800e5f4:	4658      	mov	r0, fp
 800e5f6:	f000 fc11 	bl	800ee1c <__pow5mult>
 800e5fa:	464a      	mov	r2, r9
 800e5fc:	4601      	mov	r1, r0
 800e5fe:	4605      	mov	r5, r0
 800e600:	4658      	mov	r0, fp
 800e602:	f000 fb61 	bl	800ecc8 <__multiply>
 800e606:	4649      	mov	r1, r9
 800e608:	9004      	str	r0, [sp, #16]
 800e60a:	4658      	mov	r0, fp
 800e60c:	f000 fa92 	bl	800eb34 <_Bfree>
 800e610:	9b04      	ldr	r3, [sp, #16]
 800e612:	4699      	mov	r9, r3
 800e614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e616:	1b1a      	subs	r2, r3, r4
 800e618:	d004      	beq.n	800e624 <_dtoa_r+0x78c>
 800e61a:	4649      	mov	r1, r9
 800e61c:	4658      	mov	r0, fp
 800e61e:	f000 fbfd 	bl	800ee1c <__pow5mult>
 800e622:	4681      	mov	r9, r0
 800e624:	2101      	movs	r1, #1
 800e626:	4658      	mov	r0, fp
 800e628:	f000 fb38 	bl	800ec9c <__i2b>
 800e62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e62e:	4604      	mov	r4, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 81cf 	beq.w	800e9d4 <_dtoa_r+0xb3c>
 800e636:	461a      	mov	r2, r3
 800e638:	4601      	mov	r1, r0
 800e63a:	4658      	mov	r0, fp
 800e63c:	f000 fbee 	bl	800ee1c <__pow5mult>
 800e640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e642:	2b01      	cmp	r3, #1
 800e644:	4604      	mov	r4, r0
 800e646:	f300 8095 	bgt.w	800e774 <_dtoa_r+0x8dc>
 800e64a:	9b02      	ldr	r3, [sp, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f040 8087 	bne.w	800e760 <_dtoa_r+0x8c8>
 800e652:	9b03      	ldr	r3, [sp, #12]
 800e654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f040 8089 	bne.w	800e770 <_dtoa_r+0x8d8>
 800e65e:	9b03      	ldr	r3, [sp, #12]
 800e660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e664:	0d1b      	lsrs	r3, r3, #20
 800e666:	051b      	lsls	r3, r3, #20
 800e668:	b12b      	cbz	r3, 800e676 <_dtoa_r+0x7de>
 800e66a:	9b08      	ldr	r3, [sp, #32]
 800e66c:	3301      	adds	r3, #1
 800e66e:	9308      	str	r3, [sp, #32]
 800e670:	f108 0801 	add.w	r8, r8, #1
 800e674:	2301      	movs	r3, #1
 800e676:	930a      	str	r3, [sp, #40]	@ 0x28
 800e678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 81b0 	beq.w	800e9e0 <_dtoa_r+0xb48>
 800e680:	6923      	ldr	r3, [r4, #16]
 800e682:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e686:	6918      	ldr	r0, [r3, #16]
 800e688:	f000 fabc 	bl	800ec04 <__hi0bits>
 800e68c:	f1c0 0020 	rsb	r0, r0, #32
 800e690:	9b08      	ldr	r3, [sp, #32]
 800e692:	4418      	add	r0, r3
 800e694:	f010 001f 	ands.w	r0, r0, #31
 800e698:	d077      	beq.n	800e78a <_dtoa_r+0x8f2>
 800e69a:	f1c0 0320 	rsb	r3, r0, #32
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	dd6b      	ble.n	800e77a <_dtoa_r+0x8e2>
 800e6a2:	9b08      	ldr	r3, [sp, #32]
 800e6a4:	f1c0 001c 	rsb	r0, r0, #28
 800e6a8:	4403      	add	r3, r0
 800e6aa:	4480      	add	r8, r0
 800e6ac:	4406      	add	r6, r0
 800e6ae:	9308      	str	r3, [sp, #32]
 800e6b0:	f1b8 0f00 	cmp.w	r8, #0
 800e6b4:	dd05      	ble.n	800e6c2 <_dtoa_r+0x82a>
 800e6b6:	4649      	mov	r1, r9
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	4658      	mov	r0, fp
 800e6bc:	f000 fc08 	bl	800eed0 <__lshift>
 800e6c0:	4681      	mov	r9, r0
 800e6c2:	9b08      	ldr	r3, [sp, #32]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dd05      	ble.n	800e6d4 <_dtoa_r+0x83c>
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	4658      	mov	r0, fp
 800e6ce:	f000 fbff 	bl	800eed0 <__lshift>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d059      	beq.n	800e78e <_dtoa_r+0x8f6>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4648      	mov	r0, r9
 800e6de:	f000 fc63 	bl	800efa8 <__mcmp>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	da53      	bge.n	800e78e <_dtoa_r+0x8f6>
 800e6e6:	1e7b      	subs	r3, r7, #1
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	220a      	movs	r2, #10
 800e6f0:	4658      	mov	r0, fp
 800e6f2:	f000 fa41 	bl	800eb78 <__multadd>
 800e6f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6f8:	4681      	mov	r9, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 8172 	beq.w	800e9e4 <_dtoa_r+0xb4c>
 800e700:	2300      	movs	r3, #0
 800e702:	4629      	mov	r1, r5
 800e704:	220a      	movs	r2, #10
 800e706:	4658      	mov	r0, fp
 800e708:	f000 fa36 	bl	800eb78 <__multadd>
 800e70c:	9b00      	ldr	r3, [sp, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	4605      	mov	r5, r0
 800e712:	dc67      	bgt.n	800e7e4 <_dtoa_r+0x94c>
 800e714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e716:	2b02      	cmp	r3, #2
 800e718:	dc41      	bgt.n	800e79e <_dtoa_r+0x906>
 800e71a:	e063      	b.n	800e7e4 <_dtoa_r+0x94c>
 800e71c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e71e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e722:	e746      	b.n	800e5b2 <_dtoa_r+0x71a>
 800e724:	9b07      	ldr	r3, [sp, #28]
 800e726:	1e5c      	subs	r4, r3, #1
 800e728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e72a:	42a3      	cmp	r3, r4
 800e72c:	bfbf      	itttt	lt
 800e72e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e730:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e732:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e734:	1ae3      	sublt	r3, r4, r3
 800e736:	bfb4      	ite	lt
 800e738:	18d2      	addlt	r2, r2, r3
 800e73a:	1b1c      	subge	r4, r3, r4
 800e73c:	9b07      	ldr	r3, [sp, #28]
 800e73e:	bfbc      	itt	lt
 800e740:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e742:	2400      	movlt	r4, #0
 800e744:	2b00      	cmp	r3, #0
 800e746:	bfb5      	itete	lt
 800e748:	eba8 0603 	sublt.w	r6, r8, r3
 800e74c:	9b07      	ldrge	r3, [sp, #28]
 800e74e:	2300      	movlt	r3, #0
 800e750:	4646      	movge	r6, r8
 800e752:	e730      	b.n	800e5b6 <_dtoa_r+0x71e>
 800e754:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e756:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e758:	4646      	mov	r6, r8
 800e75a:	e735      	b.n	800e5c8 <_dtoa_r+0x730>
 800e75c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e75e:	e75c      	b.n	800e61a <_dtoa_r+0x782>
 800e760:	2300      	movs	r3, #0
 800e762:	e788      	b.n	800e676 <_dtoa_r+0x7de>
 800e764:	3fe00000 	.word	0x3fe00000
 800e768:	40240000 	.word	0x40240000
 800e76c:	40140000 	.word	0x40140000
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	e780      	b.n	800e676 <_dtoa_r+0x7de>
 800e774:	2300      	movs	r3, #0
 800e776:	930a      	str	r3, [sp, #40]	@ 0x28
 800e778:	e782      	b.n	800e680 <_dtoa_r+0x7e8>
 800e77a:	d099      	beq.n	800e6b0 <_dtoa_r+0x818>
 800e77c:	9a08      	ldr	r2, [sp, #32]
 800e77e:	331c      	adds	r3, #28
 800e780:	441a      	add	r2, r3
 800e782:	4498      	add	r8, r3
 800e784:	441e      	add	r6, r3
 800e786:	9208      	str	r2, [sp, #32]
 800e788:	e792      	b.n	800e6b0 <_dtoa_r+0x818>
 800e78a:	4603      	mov	r3, r0
 800e78c:	e7f6      	b.n	800e77c <_dtoa_r+0x8e4>
 800e78e:	9b07      	ldr	r3, [sp, #28]
 800e790:	9704      	str	r7, [sp, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	dc20      	bgt.n	800e7d8 <_dtoa_r+0x940>
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	dd1e      	ble.n	800e7dc <_dtoa_r+0x944>
 800e79e:	9b00      	ldr	r3, [sp, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f47f aec0 	bne.w	800e526 <_dtoa_r+0x68e>
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	4658      	mov	r0, fp
 800e7ac:	f000 f9e4 	bl	800eb78 <__multadd>
 800e7b0:	4601      	mov	r1, r0
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4648      	mov	r0, r9
 800e7b6:	f000 fbf7 	bl	800efa8 <__mcmp>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f77f aeb3 	ble.w	800e526 <_dtoa_r+0x68e>
 800e7c0:	4656      	mov	r6, sl
 800e7c2:	2331      	movs	r3, #49	@ 0x31
 800e7c4:	f806 3b01 	strb.w	r3, [r6], #1
 800e7c8:	9b04      	ldr	r3, [sp, #16]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	9304      	str	r3, [sp, #16]
 800e7ce:	e6ae      	b.n	800e52e <_dtoa_r+0x696>
 800e7d0:	9c07      	ldr	r4, [sp, #28]
 800e7d2:	9704      	str	r7, [sp, #16]
 800e7d4:	4625      	mov	r5, r4
 800e7d6:	e7f3      	b.n	800e7c0 <_dtoa_r+0x928>
 800e7d8:	9b07      	ldr	r3, [sp, #28]
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 8104 	beq.w	800e9ec <_dtoa_r+0xb54>
 800e7e4:	2e00      	cmp	r6, #0
 800e7e6:	dd05      	ble.n	800e7f4 <_dtoa_r+0x95c>
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	4632      	mov	r2, r6
 800e7ec:	4658      	mov	r0, fp
 800e7ee:	f000 fb6f 	bl	800eed0 <__lshift>
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d05a      	beq.n	800e8b0 <_dtoa_r+0xa18>
 800e7fa:	6869      	ldr	r1, [r5, #4]
 800e7fc:	4658      	mov	r0, fp
 800e7fe:	f000 f959 	bl	800eab4 <_Balloc>
 800e802:	4606      	mov	r6, r0
 800e804:	b928      	cbnz	r0, 800e812 <_dtoa_r+0x97a>
 800e806:	4b84      	ldr	r3, [pc, #528]	@ (800ea18 <_dtoa_r+0xb80>)
 800e808:	4602      	mov	r2, r0
 800e80a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e80e:	f7ff bb5a 	b.w	800dec6 <_dtoa_r+0x2e>
 800e812:	692a      	ldr	r2, [r5, #16]
 800e814:	3202      	adds	r2, #2
 800e816:	0092      	lsls	r2, r2, #2
 800e818:	f105 010c 	add.w	r1, r5, #12
 800e81c:	300c      	adds	r0, #12
 800e81e:	f000 ff6d 	bl	800f6fc <memcpy>
 800e822:	2201      	movs	r2, #1
 800e824:	4631      	mov	r1, r6
 800e826:	4658      	mov	r0, fp
 800e828:	f000 fb52 	bl	800eed0 <__lshift>
 800e82c:	f10a 0301 	add.w	r3, sl, #1
 800e830:	9307      	str	r3, [sp, #28]
 800e832:	9b00      	ldr	r3, [sp, #0]
 800e834:	4453      	add	r3, sl
 800e836:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e838:	9b02      	ldr	r3, [sp, #8]
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	462f      	mov	r7, r5
 800e840:	930a      	str	r3, [sp, #40]	@ 0x28
 800e842:	4605      	mov	r5, r0
 800e844:	9b07      	ldr	r3, [sp, #28]
 800e846:	4621      	mov	r1, r4
 800e848:	3b01      	subs	r3, #1
 800e84a:	4648      	mov	r0, r9
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	f7ff fa9a 	bl	800dd86 <quorem>
 800e852:	4639      	mov	r1, r7
 800e854:	9002      	str	r0, [sp, #8]
 800e856:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e85a:	4648      	mov	r0, r9
 800e85c:	f000 fba4 	bl	800efa8 <__mcmp>
 800e860:	462a      	mov	r2, r5
 800e862:	9008      	str	r0, [sp, #32]
 800e864:	4621      	mov	r1, r4
 800e866:	4658      	mov	r0, fp
 800e868:	f000 fbba 	bl	800efe0 <__mdiff>
 800e86c:	68c2      	ldr	r2, [r0, #12]
 800e86e:	4606      	mov	r6, r0
 800e870:	bb02      	cbnz	r2, 800e8b4 <_dtoa_r+0xa1c>
 800e872:	4601      	mov	r1, r0
 800e874:	4648      	mov	r0, r9
 800e876:	f000 fb97 	bl	800efa8 <__mcmp>
 800e87a:	4602      	mov	r2, r0
 800e87c:	4631      	mov	r1, r6
 800e87e:	4658      	mov	r0, fp
 800e880:	920e      	str	r2, [sp, #56]	@ 0x38
 800e882:	f000 f957 	bl	800eb34 <_Bfree>
 800e886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e888:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e88a:	9e07      	ldr	r6, [sp, #28]
 800e88c:	ea43 0102 	orr.w	r1, r3, r2
 800e890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e892:	4319      	orrs	r1, r3
 800e894:	d110      	bne.n	800e8b8 <_dtoa_r+0xa20>
 800e896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e89a:	d029      	beq.n	800e8f0 <_dtoa_r+0xa58>
 800e89c:	9b08      	ldr	r3, [sp, #32]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	dd02      	ble.n	800e8a8 <_dtoa_r+0xa10>
 800e8a2:	9b02      	ldr	r3, [sp, #8]
 800e8a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e8a8:	9b00      	ldr	r3, [sp, #0]
 800e8aa:	f883 8000 	strb.w	r8, [r3]
 800e8ae:	e63f      	b.n	800e530 <_dtoa_r+0x698>
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	e7bb      	b.n	800e82c <_dtoa_r+0x994>
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	e7e1      	b.n	800e87c <_dtoa_r+0x9e4>
 800e8b8:	9b08      	ldr	r3, [sp, #32]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	db04      	blt.n	800e8c8 <_dtoa_r+0xa30>
 800e8be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8c0:	430b      	orrs	r3, r1
 800e8c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8c4:	430b      	orrs	r3, r1
 800e8c6:	d120      	bne.n	800e90a <_dtoa_r+0xa72>
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	dded      	ble.n	800e8a8 <_dtoa_r+0xa10>
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	4658      	mov	r0, fp
 800e8d2:	f000 fafd 	bl	800eed0 <__lshift>
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4681      	mov	r9, r0
 800e8da:	f000 fb65 	bl	800efa8 <__mcmp>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	dc03      	bgt.n	800e8ea <_dtoa_r+0xa52>
 800e8e2:	d1e1      	bne.n	800e8a8 <_dtoa_r+0xa10>
 800e8e4:	f018 0f01 	tst.w	r8, #1
 800e8e8:	d0de      	beq.n	800e8a8 <_dtoa_r+0xa10>
 800e8ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8ee:	d1d8      	bne.n	800e8a2 <_dtoa_r+0xa0a>
 800e8f0:	9a00      	ldr	r2, [sp, #0]
 800e8f2:	2339      	movs	r3, #57	@ 0x39
 800e8f4:	7013      	strb	r3, [r2, #0]
 800e8f6:	4633      	mov	r3, r6
 800e8f8:	461e      	mov	r6, r3
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e900:	2a39      	cmp	r2, #57	@ 0x39
 800e902:	d052      	beq.n	800e9aa <_dtoa_r+0xb12>
 800e904:	3201      	adds	r2, #1
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	e612      	b.n	800e530 <_dtoa_r+0x698>
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	dd07      	ble.n	800e91e <_dtoa_r+0xa86>
 800e90e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e912:	d0ed      	beq.n	800e8f0 <_dtoa_r+0xa58>
 800e914:	9a00      	ldr	r2, [sp, #0]
 800e916:	f108 0301 	add.w	r3, r8, #1
 800e91a:	7013      	strb	r3, [r2, #0]
 800e91c:	e608      	b.n	800e530 <_dtoa_r+0x698>
 800e91e:	9b07      	ldr	r3, [sp, #28]
 800e920:	9a07      	ldr	r2, [sp, #28]
 800e922:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e928:	4293      	cmp	r3, r2
 800e92a:	d028      	beq.n	800e97e <_dtoa_r+0xae6>
 800e92c:	4649      	mov	r1, r9
 800e92e:	2300      	movs	r3, #0
 800e930:	220a      	movs	r2, #10
 800e932:	4658      	mov	r0, fp
 800e934:	f000 f920 	bl	800eb78 <__multadd>
 800e938:	42af      	cmp	r7, r5
 800e93a:	4681      	mov	r9, r0
 800e93c:	f04f 0300 	mov.w	r3, #0
 800e940:	f04f 020a 	mov.w	r2, #10
 800e944:	4639      	mov	r1, r7
 800e946:	4658      	mov	r0, fp
 800e948:	d107      	bne.n	800e95a <_dtoa_r+0xac2>
 800e94a:	f000 f915 	bl	800eb78 <__multadd>
 800e94e:	4607      	mov	r7, r0
 800e950:	4605      	mov	r5, r0
 800e952:	9b07      	ldr	r3, [sp, #28]
 800e954:	3301      	adds	r3, #1
 800e956:	9307      	str	r3, [sp, #28]
 800e958:	e774      	b.n	800e844 <_dtoa_r+0x9ac>
 800e95a:	f000 f90d 	bl	800eb78 <__multadd>
 800e95e:	4629      	mov	r1, r5
 800e960:	4607      	mov	r7, r0
 800e962:	2300      	movs	r3, #0
 800e964:	220a      	movs	r2, #10
 800e966:	4658      	mov	r0, fp
 800e968:	f000 f906 	bl	800eb78 <__multadd>
 800e96c:	4605      	mov	r5, r0
 800e96e:	e7f0      	b.n	800e952 <_dtoa_r+0xaba>
 800e970:	9b00      	ldr	r3, [sp, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	bfcc      	ite	gt
 800e976:	461e      	movgt	r6, r3
 800e978:	2601      	movle	r6, #1
 800e97a:	4456      	add	r6, sl
 800e97c:	2700      	movs	r7, #0
 800e97e:	4649      	mov	r1, r9
 800e980:	2201      	movs	r2, #1
 800e982:	4658      	mov	r0, fp
 800e984:	f000 faa4 	bl	800eed0 <__lshift>
 800e988:	4621      	mov	r1, r4
 800e98a:	4681      	mov	r9, r0
 800e98c:	f000 fb0c 	bl	800efa8 <__mcmp>
 800e990:	2800      	cmp	r0, #0
 800e992:	dcb0      	bgt.n	800e8f6 <_dtoa_r+0xa5e>
 800e994:	d102      	bne.n	800e99c <_dtoa_r+0xb04>
 800e996:	f018 0f01 	tst.w	r8, #1
 800e99a:	d1ac      	bne.n	800e8f6 <_dtoa_r+0xa5e>
 800e99c:	4633      	mov	r3, r6
 800e99e:	461e      	mov	r6, r3
 800e9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9a4:	2a30      	cmp	r2, #48	@ 0x30
 800e9a6:	d0fa      	beq.n	800e99e <_dtoa_r+0xb06>
 800e9a8:	e5c2      	b.n	800e530 <_dtoa_r+0x698>
 800e9aa:	459a      	cmp	sl, r3
 800e9ac:	d1a4      	bne.n	800e8f8 <_dtoa_r+0xa60>
 800e9ae:	9b04      	ldr	r3, [sp, #16]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	9304      	str	r3, [sp, #16]
 800e9b4:	2331      	movs	r3, #49	@ 0x31
 800e9b6:	f88a 3000 	strb.w	r3, [sl]
 800e9ba:	e5b9      	b.n	800e530 <_dtoa_r+0x698>
 800e9bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e9be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea1c <_dtoa_r+0xb84>
 800e9c2:	b11b      	cbz	r3, 800e9cc <_dtoa_r+0xb34>
 800e9c4:	f10a 0308 	add.w	r3, sl, #8
 800e9c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	4650      	mov	r0, sl
 800e9ce:	b019      	add	sp, #100	@ 0x64
 800e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	f77f ae37 	ble.w	800e64a <_dtoa_r+0x7b2>
 800e9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	e655      	b.n	800e690 <_dtoa_r+0x7f8>
 800e9e4:	9b00      	ldr	r3, [sp, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f77f aed6 	ble.w	800e798 <_dtoa_r+0x900>
 800e9ec:	4656      	mov	r6, sl
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	4648      	mov	r0, r9
 800e9f2:	f7ff f9c8 	bl	800dd86 <quorem>
 800e9f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e9fa:	f806 8b01 	strb.w	r8, [r6], #1
 800e9fe:	9b00      	ldr	r3, [sp, #0]
 800ea00:	eba6 020a 	sub.w	r2, r6, sl
 800ea04:	4293      	cmp	r3, r2
 800ea06:	ddb3      	ble.n	800e970 <_dtoa_r+0xad8>
 800ea08:	4649      	mov	r1, r9
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	220a      	movs	r2, #10
 800ea0e:	4658      	mov	r0, fp
 800ea10:	f000 f8b2 	bl	800eb78 <__multadd>
 800ea14:	4681      	mov	r9, r0
 800ea16:	e7ea      	b.n	800e9ee <_dtoa_r+0xb56>
 800ea18:	08012c1c 	.word	0x08012c1c
 800ea1c:	08012ba0 	.word	0x08012ba0

0800ea20 <_free_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4605      	mov	r5, r0
 800ea24:	2900      	cmp	r1, #0
 800ea26:	d041      	beq.n	800eaac <_free_r+0x8c>
 800ea28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2c:	1f0c      	subs	r4, r1, #4
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	bfb8      	it	lt
 800ea32:	18e4      	addlt	r4, r4, r3
 800ea34:	f7fe fae6 	bl	800d004 <__malloc_lock>
 800ea38:	4a1d      	ldr	r2, [pc, #116]	@ (800eab0 <_free_r+0x90>)
 800ea3a:	6813      	ldr	r3, [r2, #0]
 800ea3c:	b933      	cbnz	r3, 800ea4c <_free_r+0x2c>
 800ea3e:	6063      	str	r3, [r4, #4]
 800ea40:	6014      	str	r4, [r2, #0]
 800ea42:	4628      	mov	r0, r5
 800ea44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea48:	f7fe bae2 	b.w	800d010 <__malloc_unlock>
 800ea4c:	42a3      	cmp	r3, r4
 800ea4e:	d908      	bls.n	800ea62 <_free_r+0x42>
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	1821      	adds	r1, r4, r0
 800ea54:	428b      	cmp	r3, r1
 800ea56:	bf01      	itttt	eq
 800ea58:	6819      	ldreq	r1, [r3, #0]
 800ea5a:	685b      	ldreq	r3, [r3, #4]
 800ea5c:	1809      	addeq	r1, r1, r0
 800ea5e:	6021      	streq	r1, [r4, #0]
 800ea60:	e7ed      	b.n	800ea3e <_free_r+0x1e>
 800ea62:	461a      	mov	r2, r3
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	b10b      	cbz	r3, 800ea6c <_free_r+0x4c>
 800ea68:	42a3      	cmp	r3, r4
 800ea6a:	d9fa      	bls.n	800ea62 <_free_r+0x42>
 800ea6c:	6811      	ldr	r1, [r2, #0]
 800ea6e:	1850      	adds	r0, r2, r1
 800ea70:	42a0      	cmp	r0, r4
 800ea72:	d10b      	bne.n	800ea8c <_free_r+0x6c>
 800ea74:	6820      	ldr	r0, [r4, #0]
 800ea76:	4401      	add	r1, r0
 800ea78:	1850      	adds	r0, r2, r1
 800ea7a:	4283      	cmp	r3, r0
 800ea7c:	6011      	str	r1, [r2, #0]
 800ea7e:	d1e0      	bne.n	800ea42 <_free_r+0x22>
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	6053      	str	r3, [r2, #4]
 800ea86:	4408      	add	r0, r1
 800ea88:	6010      	str	r0, [r2, #0]
 800ea8a:	e7da      	b.n	800ea42 <_free_r+0x22>
 800ea8c:	d902      	bls.n	800ea94 <_free_r+0x74>
 800ea8e:	230c      	movs	r3, #12
 800ea90:	602b      	str	r3, [r5, #0]
 800ea92:	e7d6      	b.n	800ea42 <_free_r+0x22>
 800ea94:	6820      	ldr	r0, [r4, #0]
 800ea96:	1821      	adds	r1, r4, r0
 800ea98:	428b      	cmp	r3, r1
 800ea9a:	bf04      	itt	eq
 800ea9c:	6819      	ldreq	r1, [r3, #0]
 800ea9e:	685b      	ldreq	r3, [r3, #4]
 800eaa0:	6063      	str	r3, [r4, #4]
 800eaa2:	bf04      	itt	eq
 800eaa4:	1809      	addeq	r1, r1, r0
 800eaa6:	6021      	streq	r1, [r4, #0]
 800eaa8:	6054      	str	r4, [r2, #4]
 800eaaa:	e7ca      	b.n	800ea42 <_free_r+0x22>
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop
 800eab0:	20002670 	.word	0x20002670

0800eab4 <_Balloc>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	69c6      	ldr	r6, [r0, #28]
 800eab8:	4604      	mov	r4, r0
 800eaba:	460d      	mov	r5, r1
 800eabc:	b976      	cbnz	r6, 800eadc <_Balloc+0x28>
 800eabe:	2010      	movs	r0, #16
 800eac0:	f7fe f9ee 	bl	800cea0 <malloc>
 800eac4:	4602      	mov	r2, r0
 800eac6:	61e0      	str	r0, [r4, #28]
 800eac8:	b920      	cbnz	r0, 800ead4 <_Balloc+0x20>
 800eaca:	4b18      	ldr	r3, [pc, #96]	@ (800eb2c <_Balloc+0x78>)
 800eacc:	4818      	ldr	r0, [pc, #96]	@ (800eb30 <_Balloc+0x7c>)
 800eace:	216b      	movs	r1, #107	@ 0x6b
 800ead0:	f000 fe22 	bl	800f718 <__assert_func>
 800ead4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ead8:	6006      	str	r6, [r0, #0]
 800eada:	60c6      	str	r6, [r0, #12]
 800eadc:	69e6      	ldr	r6, [r4, #28]
 800eade:	68f3      	ldr	r3, [r6, #12]
 800eae0:	b183      	cbz	r3, 800eb04 <_Balloc+0x50>
 800eae2:	69e3      	ldr	r3, [r4, #28]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaea:	b9b8      	cbnz	r0, 800eb1c <_Balloc+0x68>
 800eaec:	2101      	movs	r1, #1
 800eaee:	fa01 f605 	lsl.w	r6, r1, r5
 800eaf2:	1d72      	adds	r2, r6, #5
 800eaf4:	0092      	lsls	r2, r2, #2
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 fe2c 	bl	800f754 <_calloc_r>
 800eafc:	b160      	cbz	r0, 800eb18 <_Balloc+0x64>
 800eafe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb02:	e00e      	b.n	800eb22 <_Balloc+0x6e>
 800eb04:	2221      	movs	r2, #33	@ 0x21
 800eb06:	2104      	movs	r1, #4
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f000 fe23 	bl	800f754 <_calloc_r>
 800eb0e:	69e3      	ldr	r3, [r4, #28]
 800eb10:	60f0      	str	r0, [r6, #12]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e4      	bne.n	800eae2 <_Balloc+0x2e>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	6802      	ldr	r2, [r0, #0]
 800eb1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb22:	2300      	movs	r3, #0
 800eb24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb28:	e7f7      	b.n	800eb1a <_Balloc+0x66>
 800eb2a:	bf00      	nop
 800eb2c:	08012bad 	.word	0x08012bad
 800eb30:	08012c2d 	.word	0x08012c2d

0800eb34 <_Bfree>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	69c6      	ldr	r6, [r0, #28]
 800eb38:	4605      	mov	r5, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	b976      	cbnz	r6, 800eb5c <_Bfree+0x28>
 800eb3e:	2010      	movs	r0, #16
 800eb40:	f7fe f9ae 	bl	800cea0 <malloc>
 800eb44:	4602      	mov	r2, r0
 800eb46:	61e8      	str	r0, [r5, #28]
 800eb48:	b920      	cbnz	r0, 800eb54 <_Bfree+0x20>
 800eb4a:	4b09      	ldr	r3, [pc, #36]	@ (800eb70 <_Bfree+0x3c>)
 800eb4c:	4809      	ldr	r0, [pc, #36]	@ (800eb74 <_Bfree+0x40>)
 800eb4e:	218f      	movs	r1, #143	@ 0x8f
 800eb50:	f000 fde2 	bl	800f718 <__assert_func>
 800eb54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb58:	6006      	str	r6, [r0, #0]
 800eb5a:	60c6      	str	r6, [r0, #12]
 800eb5c:	b13c      	cbz	r4, 800eb6e <_Bfree+0x3a>
 800eb5e:	69eb      	ldr	r3, [r5, #28]
 800eb60:	6862      	ldr	r2, [r4, #4]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb68:	6021      	str	r1, [r4, #0]
 800eb6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}
 800eb70:	08012bad 	.word	0x08012bad
 800eb74:	08012c2d 	.word	0x08012c2d

0800eb78 <__multadd>:
 800eb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7c:	690d      	ldr	r5, [r1, #16]
 800eb7e:	4607      	mov	r7, r0
 800eb80:	460c      	mov	r4, r1
 800eb82:	461e      	mov	r6, r3
 800eb84:	f101 0c14 	add.w	ip, r1, #20
 800eb88:	2000      	movs	r0, #0
 800eb8a:	f8dc 3000 	ldr.w	r3, [ip]
 800eb8e:	b299      	uxth	r1, r3
 800eb90:	fb02 6101 	mla	r1, r2, r1, r6
 800eb94:	0c1e      	lsrs	r6, r3, #16
 800eb96:	0c0b      	lsrs	r3, r1, #16
 800eb98:	fb02 3306 	mla	r3, r2, r6, r3
 800eb9c:	b289      	uxth	r1, r1
 800eb9e:	3001      	adds	r0, #1
 800eba0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eba4:	4285      	cmp	r5, r0
 800eba6:	f84c 1b04 	str.w	r1, [ip], #4
 800ebaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebae:	dcec      	bgt.n	800eb8a <__multadd+0x12>
 800ebb0:	b30e      	cbz	r6, 800ebf6 <__multadd+0x7e>
 800ebb2:	68a3      	ldr	r3, [r4, #8]
 800ebb4:	42ab      	cmp	r3, r5
 800ebb6:	dc19      	bgt.n	800ebec <__multadd+0x74>
 800ebb8:	6861      	ldr	r1, [r4, #4]
 800ebba:	4638      	mov	r0, r7
 800ebbc:	3101      	adds	r1, #1
 800ebbe:	f7ff ff79 	bl	800eab4 <_Balloc>
 800ebc2:	4680      	mov	r8, r0
 800ebc4:	b928      	cbnz	r0, 800ebd2 <__multadd+0x5a>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	4b0c      	ldr	r3, [pc, #48]	@ (800ebfc <__multadd+0x84>)
 800ebca:	480d      	ldr	r0, [pc, #52]	@ (800ec00 <__multadd+0x88>)
 800ebcc:	21ba      	movs	r1, #186	@ 0xba
 800ebce:	f000 fda3 	bl	800f718 <__assert_func>
 800ebd2:	6922      	ldr	r2, [r4, #16]
 800ebd4:	3202      	adds	r2, #2
 800ebd6:	f104 010c 	add.w	r1, r4, #12
 800ebda:	0092      	lsls	r2, r2, #2
 800ebdc:	300c      	adds	r0, #12
 800ebde:	f000 fd8d 	bl	800f6fc <memcpy>
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	f7ff ffa5 	bl	800eb34 <_Bfree>
 800ebea:	4644      	mov	r4, r8
 800ebec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebf0:	3501      	adds	r5, #1
 800ebf2:	615e      	str	r6, [r3, #20]
 800ebf4:	6125      	str	r5, [r4, #16]
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebfc:	08012c1c 	.word	0x08012c1c
 800ec00:	08012c2d 	.word	0x08012c2d

0800ec04 <__hi0bits>:
 800ec04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec08:	4603      	mov	r3, r0
 800ec0a:	bf36      	itet	cc
 800ec0c:	0403      	lslcc	r3, r0, #16
 800ec0e:	2000      	movcs	r0, #0
 800ec10:	2010      	movcc	r0, #16
 800ec12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec16:	bf3c      	itt	cc
 800ec18:	021b      	lslcc	r3, r3, #8
 800ec1a:	3008      	addcc	r0, #8
 800ec1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec20:	bf3c      	itt	cc
 800ec22:	011b      	lslcc	r3, r3, #4
 800ec24:	3004      	addcc	r0, #4
 800ec26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec2a:	bf3c      	itt	cc
 800ec2c:	009b      	lslcc	r3, r3, #2
 800ec2e:	3002      	addcc	r0, #2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	db05      	blt.n	800ec40 <__hi0bits+0x3c>
 800ec34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec38:	f100 0001 	add.w	r0, r0, #1
 800ec3c:	bf08      	it	eq
 800ec3e:	2020      	moveq	r0, #32
 800ec40:	4770      	bx	lr

0800ec42 <__lo0bits>:
 800ec42:	6803      	ldr	r3, [r0, #0]
 800ec44:	4602      	mov	r2, r0
 800ec46:	f013 0007 	ands.w	r0, r3, #7
 800ec4a:	d00b      	beq.n	800ec64 <__lo0bits+0x22>
 800ec4c:	07d9      	lsls	r1, r3, #31
 800ec4e:	d421      	bmi.n	800ec94 <__lo0bits+0x52>
 800ec50:	0798      	lsls	r0, r3, #30
 800ec52:	bf49      	itett	mi
 800ec54:	085b      	lsrmi	r3, r3, #1
 800ec56:	089b      	lsrpl	r3, r3, #2
 800ec58:	2001      	movmi	r0, #1
 800ec5a:	6013      	strmi	r3, [r2, #0]
 800ec5c:	bf5c      	itt	pl
 800ec5e:	6013      	strpl	r3, [r2, #0]
 800ec60:	2002      	movpl	r0, #2
 800ec62:	4770      	bx	lr
 800ec64:	b299      	uxth	r1, r3
 800ec66:	b909      	cbnz	r1, 800ec6c <__lo0bits+0x2a>
 800ec68:	0c1b      	lsrs	r3, r3, #16
 800ec6a:	2010      	movs	r0, #16
 800ec6c:	b2d9      	uxtb	r1, r3
 800ec6e:	b909      	cbnz	r1, 800ec74 <__lo0bits+0x32>
 800ec70:	3008      	adds	r0, #8
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	0719      	lsls	r1, r3, #28
 800ec76:	bf04      	itt	eq
 800ec78:	091b      	lsreq	r3, r3, #4
 800ec7a:	3004      	addeq	r0, #4
 800ec7c:	0799      	lsls	r1, r3, #30
 800ec7e:	bf04      	itt	eq
 800ec80:	089b      	lsreq	r3, r3, #2
 800ec82:	3002      	addeq	r0, #2
 800ec84:	07d9      	lsls	r1, r3, #31
 800ec86:	d403      	bmi.n	800ec90 <__lo0bits+0x4e>
 800ec88:	085b      	lsrs	r3, r3, #1
 800ec8a:	f100 0001 	add.w	r0, r0, #1
 800ec8e:	d003      	beq.n	800ec98 <__lo0bits+0x56>
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	4770      	bx	lr
 800ec94:	2000      	movs	r0, #0
 800ec96:	4770      	bx	lr
 800ec98:	2020      	movs	r0, #32
 800ec9a:	4770      	bx	lr

0800ec9c <__i2b>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	460c      	mov	r4, r1
 800eca0:	2101      	movs	r1, #1
 800eca2:	f7ff ff07 	bl	800eab4 <_Balloc>
 800eca6:	4602      	mov	r2, r0
 800eca8:	b928      	cbnz	r0, 800ecb6 <__i2b+0x1a>
 800ecaa:	4b05      	ldr	r3, [pc, #20]	@ (800ecc0 <__i2b+0x24>)
 800ecac:	4805      	ldr	r0, [pc, #20]	@ (800ecc4 <__i2b+0x28>)
 800ecae:	f240 1145 	movw	r1, #325	@ 0x145
 800ecb2:	f000 fd31 	bl	800f718 <__assert_func>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	6144      	str	r4, [r0, #20]
 800ecba:	6103      	str	r3, [r0, #16]
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	bf00      	nop
 800ecc0:	08012c1c 	.word	0x08012c1c
 800ecc4:	08012c2d 	.word	0x08012c2d

0800ecc8 <__multiply>:
 800ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	4614      	mov	r4, r2
 800ecce:	690a      	ldr	r2, [r1, #16]
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	bfa8      	it	ge
 800ecd6:	4623      	movge	r3, r4
 800ecd8:	460f      	mov	r7, r1
 800ecda:	bfa4      	itt	ge
 800ecdc:	460c      	movge	r4, r1
 800ecde:	461f      	movge	r7, r3
 800ece0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ece4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ece8:	68a3      	ldr	r3, [r4, #8]
 800ecea:	6861      	ldr	r1, [r4, #4]
 800ecec:	eb0a 0609 	add.w	r6, sl, r9
 800ecf0:	42b3      	cmp	r3, r6
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	bfb8      	it	lt
 800ecf6:	3101      	addlt	r1, #1
 800ecf8:	f7ff fedc 	bl	800eab4 <_Balloc>
 800ecfc:	b930      	cbnz	r0, 800ed0c <__multiply+0x44>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	4b44      	ldr	r3, [pc, #272]	@ (800ee14 <__multiply+0x14c>)
 800ed02:	4845      	ldr	r0, [pc, #276]	@ (800ee18 <__multiply+0x150>)
 800ed04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed08:	f000 fd06 	bl	800f718 <__assert_func>
 800ed0c:	f100 0514 	add.w	r5, r0, #20
 800ed10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed14:	462b      	mov	r3, r5
 800ed16:	2200      	movs	r2, #0
 800ed18:	4543      	cmp	r3, r8
 800ed1a:	d321      	bcc.n	800ed60 <__multiply+0x98>
 800ed1c:	f107 0114 	add.w	r1, r7, #20
 800ed20:	f104 0214 	add.w	r2, r4, #20
 800ed24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed2c:	9302      	str	r3, [sp, #8]
 800ed2e:	1b13      	subs	r3, r2, r4
 800ed30:	3b15      	subs	r3, #21
 800ed32:	f023 0303 	bic.w	r3, r3, #3
 800ed36:	3304      	adds	r3, #4
 800ed38:	f104 0715 	add.w	r7, r4, #21
 800ed3c:	42ba      	cmp	r2, r7
 800ed3e:	bf38      	it	cc
 800ed40:	2304      	movcc	r3, #4
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	9b02      	ldr	r3, [sp, #8]
 800ed46:	9103      	str	r1, [sp, #12]
 800ed48:	428b      	cmp	r3, r1
 800ed4a:	d80c      	bhi.n	800ed66 <__multiply+0x9e>
 800ed4c:	2e00      	cmp	r6, #0
 800ed4e:	dd03      	ble.n	800ed58 <__multiply+0x90>
 800ed50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d05b      	beq.n	800ee10 <__multiply+0x148>
 800ed58:	6106      	str	r6, [r0, #16]
 800ed5a:	b005      	add	sp, #20
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	f843 2b04 	str.w	r2, [r3], #4
 800ed64:	e7d8      	b.n	800ed18 <__multiply+0x50>
 800ed66:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed6a:	f1ba 0f00 	cmp.w	sl, #0
 800ed6e:	d024      	beq.n	800edba <__multiply+0xf2>
 800ed70:	f104 0e14 	add.w	lr, r4, #20
 800ed74:	46a9      	mov	r9, r5
 800ed76:	f04f 0c00 	mov.w	ip, #0
 800ed7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed7e:	f8d9 3000 	ldr.w	r3, [r9]
 800ed82:	fa1f fb87 	uxth.w	fp, r7
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed90:	f8d9 7000 	ldr.w	r7, [r9]
 800ed94:	4463      	add	r3, ip
 800ed96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed9a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eda8:	4572      	cmp	r2, lr
 800edaa:	f849 3b04 	str.w	r3, [r9], #4
 800edae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edb2:	d8e2      	bhi.n	800ed7a <__multiply+0xb2>
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	f845 c003 	str.w	ip, [r5, r3]
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800edc0:	3104      	adds	r1, #4
 800edc2:	f1b9 0f00 	cmp.w	r9, #0
 800edc6:	d021      	beq.n	800ee0c <__multiply+0x144>
 800edc8:	682b      	ldr	r3, [r5, #0]
 800edca:	f104 0c14 	add.w	ip, r4, #20
 800edce:	46ae      	mov	lr, r5
 800edd0:	f04f 0a00 	mov.w	sl, #0
 800edd4:	f8bc b000 	ldrh.w	fp, [ip]
 800edd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eddc:	fb09 770b 	mla	r7, r9, fp, r7
 800ede0:	4457      	add	r7, sl
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ede8:	f84e 3b04 	str.w	r3, [lr], #4
 800edec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800edf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edf4:	f8be 3000 	ldrh.w	r3, [lr]
 800edf8:	fb09 330a 	mla	r3, r9, sl, r3
 800edfc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee00:	4562      	cmp	r2, ip
 800ee02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee06:	d8e5      	bhi.n	800edd4 <__multiply+0x10c>
 800ee08:	9f01      	ldr	r7, [sp, #4]
 800ee0a:	51eb      	str	r3, [r5, r7]
 800ee0c:	3504      	adds	r5, #4
 800ee0e:	e799      	b.n	800ed44 <__multiply+0x7c>
 800ee10:	3e01      	subs	r6, #1
 800ee12:	e79b      	b.n	800ed4c <__multiply+0x84>
 800ee14:	08012c1c 	.word	0x08012c1c
 800ee18:	08012c2d 	.word	0x08012c2d

0800ee1c <__pow5mult>:
 800ee1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee20:	4615      	mov	r5, r2
 800ee22:	f012 0203 	ands.w	r2, r2, #3
 800ee26:	4607      	mov	r7, r0
 800ee28:	460e      	mov	r6, r1
 800ee2a:	d007      	beq.n	800ee3c <__pow5mult+0x20>
 800ee2c:	4c25      	ldr	r4, [pc, #148]	@ (800eec4 <__pow5mult+0xa8>)
 800ee2e:	3a01      	subs	r2, #1
 800ee30:	2300      	movs	r3, #0
 800ee32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee36:	f7ff fe9f 	bl	800eb78 <__multadd>
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	10ad      	asrs	r5, r5, #2
 800ee3e:	d03d      	beq.n	800eebc <__pow5mult+0xa0>
 800ee40:	69fc      	ldr	r4, [r7, #28]
 800ee42:	b97c      	cbnz	r4, 800ee64 <__pow5mult+0x48>
 800ee44:	2010      	movs	r0, #16
 800ee46:	f7fe f82b 	bl	800cea0 <malloc>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	61f8      	str	r0, [r7, #28]
 800ee4e:	b928      	cbnz	r0, 800ee5c <__pow5mult+0x40>
 800ee50:	4b1d      	ldr	r3, [pc, #116]	@ (800eec8 <__pow5mult+0xac>)
 800ee52:	481e      	ldr	r0, [pc, #120]	@ (800eecc <__pow5mult+0xb0>)
 800ee54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee58:	f000 fc5e 	bl	800f718 <__assert_func>
 800ee5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee60:	6004      	str	r4, [r0, #0]
 800ee62:	60c4      	str	r4, [r0, #12]
 800ee64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee6c:	b94c      	cbnz	r4, 800ee82 <__pow5mult+0x66>
 800ee6e:	f240 2171 	movw	r1, #625	@ 0x271
 800ee72:	4638      	mov	r0, r7
 800ee74:	f7ff ff12 	bl	800ec9c <__i2b>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee7e:	4604      	mov	r4, r0
 800ee80:	6003      	str	r3, [r0, #0]
 800ee82:	f04f 0900 	mov.w	r9, #0
 800ee86:	07eb      	lsls	r3, r5, #31
 800ee88:	d50a      	bpl.n	800eea0 <__pow5mult+0x84>
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4638      	mov	r0, r7
 800ee90:	f7ff ff1a 	bl	800ecc8 <__multiply>
 800ee94:	4631      	mov	r1, r6
 800ee96:	4680      	mov	r8, r0
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff fe4b 	bl	800eb34 <_Bfree>
 800ee9e:	4646      	mov	r6, r8
 800eea0:	106d      	asrs	r5, r5, #1
 800eea2:	d00b      	beq.n	800eebc <__pow5mult+0xa0>
 800eea4:	6820      	ldr	r0, [r4, #0]
 800eea6:	b938      	cbnz	r0, 800eeb8 <__pow5mult+0x9c>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4638      	mov	r0, r7
 800eeae:	f7ff ff0b 	bl	800ecc8 <__multiply>
 800eeb2:	6020      	str	r0, [r4, #0]
 800eeb4:	f8c0 9000 	str.w	r9, [r0]
 800eeb8:	4604      	mov	r4, r0
 800eeba:	e7e4      	b.n	800ee86 <__pow5mult+0x6a>
 800eebc:	4630      	mov	r0, r6
 800eebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eec2:	bf00      	nop
 800eec4:	08012c88 	.word	0x08012c88
 800eec8:	08012bad 	.word	0x08012bad
 800eecc:	08012c2d 	.word	0x08012c2d

0800eed0 <__lshift>:
 800eed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed4:	460c      	mov	r4, r1
 800eed6:	6849      	ldr	r1, [r1, #4]
 800eed8:	6923      	ldr	r3, [r4, #16]
 800eeda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eede:	68a3      	ldr	r3, [r4, #8]
 800eee0:	4607      	mov	r7, r0
 800eee2:	4691      	mov	r9, r2
 800eee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eee8:	f108 0601 	add.w	r6, r8, #1
 800eeec:	42b3      	cmp	r3, r6
 800eeee:	db0b      	blt.n	800ef08 <__lshift+0x38>
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7ff fddf 	bl	800eab4 <_Balloc>
 800eef6:	4605      	mov	r5, r0
 800eef8:	b948      	cbnz	r0, 800ef0e <__lshift+0x3e>
 800eefa:	4602      	mov	r2, r0
 800eefc:	4b28      	ldr	r3, [pc, #160]	@ (800efa0 <__lshift+0xd0>)
 800eefe:	4829      	ldr	r0, [pc, #164]	@ (800efa4 <__lshift+0xd4>)
 800ef00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef04:	f000 fc08 	bl	800f718 <__assert_func>
 800ef08:	3101      	adds	r1, #1
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	e7ee      	b.n	800eeec <__lshift+0x1c>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f100 0114 	add.w	r1, r0, #20
 800ef14:	f100 0210 	add.w	r2, r0, #16
 800ef18:	4618      	mov	r0, r3
 800ef1a:	4553      	cmp	r3, sl
 800ef1c:	db33      	blt.n	800ef86 <__lshift+0xb6>
 800ef1e:	6920      	ldr	r0, [r4, #16]
 800ef20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef24:	f104 0314 	add.w	r3, r4, #20
 800ef28:	f019 091f 	ands.w	r9, r9, #31
 800ef2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef34:	d02b      	beq.n	800ef8e <__lshift+0xbe>
 800ef36:	f1c9 0e20 	rsb	lr, r9, #32
 800ef3a:	468a      	mov	sl, r1
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	fa00 f009 	lsl.w	r0, r0, r9
 800ef44:	4310      	orrs	r0, r2
 800ef46:	f84a 0b04 	str.w	r0, [sl], #4
 800ef4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef4e:	459c      	cmp	ip, r3
 800ef50:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef54:	d8f3      	bhi.n	800ef3e <__lshift+0x6e>
 800ef56:	ebac 0304 	sub.w	r3, ip, r4
 800ef5a:	3b15      	subs	r3, #21
 800ef5c:	f023 0303 	bic.w	r3, r3, #3
 800ef60:	3304      	adds	r3, #4
 800ef62:	f104 0015 	add.w	r0, r4, #21
 800ef66:	4584      	cmp	ip, r0
 800ef68:	bf38      	it	cc
 800ef6a:	2304      	movcc	r3, #4
 800ef6c:	50ca      	str	r2, [r1, r3]
 800ef6e:	b10a      	cbz	r2, 800ef74 <__lshift+0xa4>
 800ef70:	f108 0602 	add.w	r6, r8, #2
 800ef74:	3e01      	subs	r6, #1
 800ef76:	4638      	mov	r0, r7
 800ef78:	612e      	str	r6, [r5, #16]
 800ef7a:	4621      	mov	r1, r4
 800ef7c:	f7ff fdda 	bl	800eb34 <_Bfree>
 800ef80:	4628      	mov	r0, r5
 800ef82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef86:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	e7c5      	b.n	800ef1a <__lshift+0x4a>
 800ef8e:	3904      	subs	r1, #4
 800ef90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef94:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef98:	459c      	cmp	ip, r3
 800ef9a:	d8f9      	bhi.n	800ef90 <__lshift+0xc0>
 800ef9c:	e7ea      	b.n	800ef74 <__lshift+0xa4>
 800ef9e:	bf00      	nop
 800efa0:	08012c1c 	.word	0x08012c1c
 800efa4:	08012c2d 	.word	0x08012c2d

0800efa8 <__mcmp>:
 800efa8:	690a      	ldr	r2, [r1, #16]
 800efaa:	4603      	mov	r3, r0
 800efac:	6900      	ldr	r0, [r0, #16]
 800efae:	1a80      	subs	r0, r0, r2
 800efb0:	b530      	push	{r4, r5, lr}
 800efb2:	d10e      	bne.n	800efd2 <__mcmp+0x2a>
 800efb4:	3314      	adds	r3, #20
 800efb6:	3114      	adds	r1, #20
 800efb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800efbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800efc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800efc8:	4295      	cmp	r5, r2
 800efca:	d003      	beq.n	800efd4 <__mcmp+0x2c>
 800efcc:	d205      	bcs.n	800efda <__mcmp+0x32>
 800efce:	f04f 30ff 	mov.w	r0, #4294967295
 800efd2:	bd30      	pop	{r4, r5, pc}
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	d3f3      	bcc.n	800efc0 <__mcmp+0x18>
 800efd8:	e7fb      	b.n	800efd2 <__mcmp+0x2a>
 800efda:	2001      	movs	r0, #1
 800efdc:	e7f9      	b.n	800efd2 <__mcmp+0x2a>
	...

0800efe0 <__mdiff>:
 800efe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	4689      	mov	r9, r1
 800efe6:	4606      	mov	r6, r0
 800efe8:	4611      	mov	r1, r2
 800efea:	4648      	mov	r0, r9
 800efec:	4614      	mov	r4, r2
 800efee:	f7ff ffdb 	bl	800efa8 <__mcmp>
 800eff2:	1e05      	subs	r5, r0, #0
 800eff4:	d112      	bne.n	800f01c <__mdiff+0x3c>
 800eff6:	4629      	mov	r1, r5
 800eff8:	4630      	mov	r0, r6
 800effa:	f7ff fd5b 	bl	800eab4 <_Balloc>
 800effe:	4602      	mov	r2, r0
 800f000:	b928      	cbnz	r0, 800f00e <__mdiff+0x2e>
 800f002:	4b3f      	ldr	r3, [pc, #252]	@ (800f100 <__mdiff+0x120>)
 800f004:	f240 2137 	movw	r1, #567	@ 0x237
 800f008:	483e      	ldr	r0, [pc, #248]	@ (800f104 <__mdiff+0x124>)
 800f00a:	f000 fb85 	bl	800f718 <__assert_func>
 800f00e:	2301      	movs	r3, #1
 800f010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f014:	4610      	mov	r0, r2
 800f016:	b003      	add	sp, #12
 800f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01c:	bfbc      	itt	lt
 800f01e:	464b      	movlt	r3, r9
 800f020:	46a1      	movlt	r9, r4
 800f022:	4630      	mov	r0, r6
 800f024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f028:	bfba      	itte	lt
 800f02a:	461c      	movlt	r4, r3
 800f02c:	2501      	movlt	r5, #1
 800f02e:	2500      	movge	r5, #0
 800f030:	f7ff fd40 	bl	800eab4 <_Balloc>
 800f034:	4602      	mov	r2, r0
 800f036:	b918      	cbnz	r0, 800f040 <__mdiff+0x60>
 800f038:	4b31      	ldr	r3, [pc, #196]	@ (800f100 <__mdiff+0x120>)
 800f03a:	f240 2145 	movw	r1, #581	@ 0x245
 800f03e:	e7e3      	b.n	800f008 <__mdiff+0x28>
 800f040:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f044:	6926      	ldr	r6, [r4, #16]
 800f046:	60c5      	str	r5, [r0, #12]
 800f048:	f109 0310 	add.w	r3, r9, #16
 800f04c:	f109 0514 	add.w	r5, r9, #20
 800f050:	f104 0e14 	add.w	lr, r4, #20
 800f054:	f100 0b14 	add.w	fp, r0, #20
 800f058:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f05c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	46d9      	mov	r9, fp
 800f064:	f04f 0c00 	mov.w	ip, #0
 800f068:	9b01      	ldr	r3, [sp, #4]
 800f06a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f06e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	fa1f f38a 	uxth.w	r3, sl
 800f078:	4619      	mov	r1, r3
 800f07a:	b283      	uxth	r3, r0
 800f07c:	1acb      	subs	r3, r1, r3
 800f07e:	0c00      	lsrs	r0, r0, #16
 800f080:	4463      	add	r3, ip
 800f082:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f086:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f090:	4576      	cmp	r6, lr
 800f092:	f849 3b04 	str.w	r3, [r9], #4
 800f096:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f09a:	d8e5      	bhi.n	800f068 <__mdiff+0x88>
 800f09c:	1b33      	subs	r3, r6, r4
 800f09e:	3b15      	subs	r3, #21
 800f0a0:	f023 0303 	bic.w	r3, r3, #3
 800f0a4:	3415      	adds	r4, #21
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	42a6      	cmp	r6, r4
 800f0aa:	bf38      	it	cc
 800f0ac:	2304      	movcc	r3, #4
 800f0ae:	441d      	add	r5, r3
 800f0b0:	445b      	add	r3, fp
 800f0b2:	461e      	mov	r6, r3
 800f0b4:	462c      	mov	r4, r5
 800f0b6:	4544      	cmp	r4, r8
 800f0b8:	d30e      	bcc.n	800f0d8 <__mdiff+0xf8>
 800f0ba:	f108 0103 	add.w	r1, r8, #3
 800f0be:	1b49      	subs	r1, r1, r5
 800f0c0:	f021 0103 	bic.w	r1, r1, #3
 800f0c4:	3d03      	subs	r5, #3
 800f0c6:	45a8      	cmp	r8, r5
 800f0c8:	bf38      	it	cc
 800f0ca:	2100      	movcc	r1, #0
 800f0cc:	440b      	add	r3, r1
 800f0ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0d2:	b191      	cbz	r1, 800f0fa <__mdiff+0x11a>
 800f0d4:	6117      	str	r7, [r2, #16]
 800f0d6:	e79d      	b.n	800f014 <__mdiff+0x34>
 800f0d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0dc:	46e6      	mov	lr, ip
 800f0de:	0c08      	lsrs	r0, r1, #16
 800f0e0:	fa1c fc81 	uxtah	ip, ip, r1
 800f0e4:	4471      	add	r1, lr
 800f0e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0ea:	b289      	uxth	r1, r1
 800f0ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f0f0:	f846 1b04 	str.w	r1, [r6], #4
 800f0f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0f8:	e7dd      	b.n	800f0b6 <__mdiff+0xd6>
 800f0fa:	3f01      	subs	r7, #1
 800f0fc:	e7e7      	b.n	800f0ce <__mdiff+0xee>
 800f0fe:	bf00      	nop
 800f100:	08012c1c 	.word	0x08012c1c
 800f104:	08012c2d 	.word	0x08012c2d

0800f108 <__d2b>:
 800f108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f10c:	460f      	mov	r7, r1
 800f10e:	2101      	movs	r1, #1
 800f110:	ec59 8b10 	vmov	r8, r9, d0
 800f114:	4616      	mov	r6, r2
 800f116:	f7ff fccd 	bl	800eab4 <_Balloc>
 800f11a:	4604      	mov	r4, r0
 800f11c:	b930      	cbnz	r0, 800f12c <__d2b+0x24>
 800f11e:	4602      	mov	r2, r0
 800f120:	4b23      	ldr	r3, [pc, #140]	@ (800f1b0 <__d2b+0xa8>)
 800f122:	4824      	ldr	r0, [pc, #144]	@ (800f1b4 <__d2b+0xac>)
 800f124:	f240 310f 	movw	r1, #783	@ 0x30f
 800f128:	f000 faf6 	bl	800f718 <__assert_func>
 800f12c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f134:	b10d      	cbz	r5, 800f13a <__d2b+0x32>
 800f136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	f1b8 0300 	subs.w	r3, r8, #0
 800f140:	d023      	beq.n	800f18a <__d2b+0x82>
 800f142:	4668      	mov	r0, sp
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	f7ff fd7c 	bl	800ec42 <__lo0bits>
 800f14a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f14e:	b1d0      	cbz	r0, 800f186 <__d2b+0x7e>
 800f150:	f1c0 0320 	rsb	r3, r0, #32
 800f154:	fa02 f303 	lsl.w	r3, r2, r3
 800f158:	430b      	orrs	r3, r1
 800f15a:	40c2      	lsrs	r2, r0
 800f15c:	6163      	str	r3, [r4, #20]
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	9b01      	ldr	r3, [sp, #4]
 800f162:	61a3      	str	r3, [r4, #24]
 800f164:	2b00      	cmp	r3, #0
 800f166:	bf0c      	ite	eq
 800f168:	2201      	moveq	r2, #1
 800f16a:	2202      	movne	r2, #2
 800f16c:	6122      	str	r2, [r4, #16]
 800f16e:	b1a5      	cbz	r5, 800f19a <__d2b+0x92>
 800f170:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f174:	4405      	add	r5, r0
 800f176:	603d      	str	r5, [r7, #0]
 800f178:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f17c:	6030      	str	r0, [r6, #0]
 800f17e:	4620      	mov	r0, r4
 800f180:	b003      	add	sp, #12
 800f182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f186:	6161      	str	r1, [r4, #20]
 800f188:	e7ea      	b.n	800f160 <__d2b+0x58>
 800f18a:	a801      	add	r0, sp, #4
 800f18c:	f7ff fd59 	bl	800ec42 <__lo0bits>
 800f190:	9b01      	ldr	r3, [sp, #4]
 800f192:	6163      	str	r3, [r4, #20]
 800f194:	3020      	adds	r0, #32
 800f196:	2201      	movs	r2, #1
 800f198:	e7e8      	b.n	800f16c <__d2b+0x64>
 800f19a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f19e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1a2:	6038      	str	r0, [r7, #0]
 800f1a4:	6918      	ldr	r0, [r3, #16]
 800f1a6:	f7ff fd2d 	bl	800ec04 <__hi0bits>
 800f1aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1ae:	e7e5      	b.n	800f17c <__d2b+0x74>
 800f1b0:	08012c1c 	.word	0x08012c1c
 800f1b4:	08012c2d 	.word	0x08012c2d

0800f1b8 <__ssputs_r>:
 800f1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1bc:	688e      	ldr	r6, [r1, #8]
 800f1be:	461f      	mov	r7, r3
 800f1c0:	42be      	cmp	r6, r7
 800f1c2:	680b      	ldr	r3, [r1, #0]
 800f1c4:	4682      	mov	sl, r0
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	4690      	mov	r8, r2
 800f1ca:	d82d      	bhi.n	800f228 <__ssputs_r+0x70>
 800f1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1d4:	d026      	beq.n	800f224 <__ssputs_r+0x6c>
 800f1d6:	6965      	ldr	r5, [r4, #20]
 800f1d8:	6909      	ldr	r1, [r1, #16]
 800f1da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1de:	eba3 0901 	sub.w	r9, r3, r1
 800f1e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1e6:	1c7b      	adds	r3, r7, #1
 800f1e8:	444b      	add	r3, r9
 800f1ea:	106d      	asrs	r5, r5, #1
 800f1ec:	429d      	cmp	r5, r3
 800f1ee:	bf38      	it	cc
 800f1f0:	461d      	movcc	r5, r3
 800f1f2:	0553      	lsls	r3, r2, #21
 800f1f4:	d527      	bpl.n	800f246 <__ssputs_r+0x8e>
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	f7fd fe84 	bl	800cf04 <_malloc_r>
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	b360      	cbz	r0, 800f25a <__ssputs_r+0xa2>
 800f200:	6921      	ldr	r1, [r4, #16]
 800f202:	464a      	mov	r2, r9
 800f204:	f000 fa7a 	bl	800f6fc <memcpy>
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f212:	81a3      	strh	r3, [r4, #12]
 800f214:	6126      	str	r6, [r4, #16]
 800f216:	6165      	str	r5, [r4, #20]
 800f218:	444e      	add	r6, r9
 800f21a:	eba5 0509 	sub.w	r5, r5, r9
 800f21e:	6026      	str	r6, [r4, #0]
 800f220:	60a5      	str	r5, [r4, #8]
 800f222:	463e      	mov	r6, r7
 800f224:	42be      	cmp	r6, r7
 800f226:	d900      	bls.n	800f22a <__ssputs_r+0x72>
 800f228:	463e      	mov	r6, r7
 800f22a:	6820      	ldr	r0, [r4, #0]
 800f22c:	4632      	mov	r2, r6
 800f22e:	4641      	mov	r1, r8
 800f230:	f000 fa28 	bl	800f684 <memmove>
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	1b9b      	subs	r3, r3, r6
 800f238:	60a3      	str	r3, [r4, #8]
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	4433      	add	r3, r6
 800f23e:	6023      	str	r3, [r4, #0]
 800f240:	2000      	movs	r0, #0
 800f242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f246:	462a      	mov	r2, r5
 800f248:	f000 faaa 	bl	800f7a0 <_realloc_r>
 800f24c:	4606      	mov	r6, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	d1e0      	bne.n	800f214 <__ssputs_r+0x5c>
 800f252:	6921      	ldr	r1, [r4, #16]
 800f254:	4650      	mov	r0, sl
 800f256:	f7ff fbe3 	bl	800ea20 <_free_r>
 800f25a:	230c      	movs	r3, #12
 800f25c:	f8ca 3000 	str.w	r3, [sl]
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f266:	81a3      	strh	r3, [r4, #12]
 800f268:	f04f 30ff 	mov.w	r0, #4294967295
 800f26c:	e7e9      	b.n	800f242 <__ssputs_r+0x8a>
	...

0800f270 <_svfiprintf_r>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	4698      	mov	r8, r3
 800f276:	898b      	ldrh	r3, [r1, #12]
 800f278:	061b      	lsls	r3, r3, #24
 800f27a:	b09d      	sub	sp, #116	@ 0x74
 800f27c:	4607      	mov	r7, r0
 800f27e:	460d      	mov	r5, r1
 800f280:	4614      	mov	r4, r2
 800f282:	d510      	bpl.n	800f2a6 <_svfiprintf_r+0x36>
 800f284:	690b      	ldr	r3, [r1, #16]
 800f286:	b973      	cbnz	r3, 800f2a6 <_svfiprintf_r+0x36>
 800f288:	2140      	movs	r1, #64	@ 0x40
 800f28a:	f7fd fe3b 	bl	800cf04 <_malloc_r>
 800f28e:	6028      	str	r0, [r5, #0]
 800f290:	6128      	str	r0, [r5, #16]
 800f292:	b930      	cbnz	r0, 800f2a2 <_svfiprintf_r+0x32>
 800f294:	230c      	movs	r3, #12
 800f296:	603b      	str	r3, [r7, #0]
 800f298:	f04f 30ff 	mov.w	r0, #4294967295
 800f29c:	b01d      	add	sp, #116	@ 0x74
 800f29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a2:	2340      	movs	r3, #64	@ 0x40
 800f2a4:	616b      	str	r3, [r5, #20]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2aa:	2320      	movs	r3, #32
 800f2ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2b4:	2330      	movs	r3, #48	@ 0x30
 800f2b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f454 <_svfiprintf_r+0x1e4>
 800f2ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2be:	f04f 0901 	mov.w	r9, #1
 800f2c2:	4623      	mov	r3, r4
 800f2c4:	469a      	mov	sl, r3
 800f2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ca:	b10a      	cbz	r2, 800f2d0 <_svfiprintf_r+0x60>
 800f2cc:	2a25      	cmp	r2, #37	@ 0x25
 800f2ce:	d1f9      	bne.n	800f2c4 <_svfiprintf_r+0x54>
 800f2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2d4:	d00b      	beq.n	800f2ee <_svfiprintf_r+0x7e>
 800f2d6:	465b      	mov	r3, fp
 800f2d8:	4622      	mov	r2, r4
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4638      	mov	r0, r7
 800f2de:	f7ff ff6b 	bl	800f1b8 <__ssputs_r>
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	f000 80a7 	beq.w	800f436 <_svfiprintf_r+0x1c6>
 800f2e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2ea:	445a      	add	r2, fp
 800f2ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f000 809f 	beq.w	800f436 <_svfiprintf_r+0x1c6>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f302:	f10a 0a01 	add.w	sl, sl, #1
 800f306:	9304      	str	r3, [sp, #16]
 800f308:	9307      	str	r3, [sp, #28]
 800f30a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f30e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f310:	4654      	mov	r4, sl
 800f312:	2205      	movs	r2, #5
 800f314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f318:	484e      	ldr	r0, [pc, #312]	@ (800f454 <_svfiprintf_r+0x1e4>)
 800f31a:	f7f0 ff61 	bl	80001e0 <memchr>
 800f31e:	9a04      	ldr	r2, [sp, #16]
 800f320:	b9d8      	cbnz	r0, 800f35a <_svfiprintf_r+0xea>
 800f322:	06d0      	lsls	r0, r2, #27
 800f324:	bf44      	itt	mi
 800f326:	2320      	movmi	r3, #32
 800f328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f32c:	0711      	lsls	r1, r2, #28
 800f32e:	bf44      	itt	mi
 800f330:	232b      	movmi	r3, #43	@ 0x2b
 800f332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f336:	f89a 3000 	ldrb.w	r3, [sl]
 800f33a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f33c:	d015      	beq.n	800f36a <_svfiprintf_r+0xfa>
 800f33e:	9a07      	ldr	r2, [sp, #28]
 800f340:	4654      	mov	r4, sl
 800f342:	2000      	movs	r0, #0
 800f344:	f04f 0c0a 	mov.w	ip, #10
 800f348:	4621      	mov	r1, r4
 800f34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f34e:	3b30      	subs	r3, #48	@ 0x30
 800f350:	2b09      	cmp	r3, #9
 800f352:	d94b      	bls.n	800f3ec <_svfiprintf_r+0x17c>
 800f354:	b1b0      	cbz	r0, 800f384 <_svfiprintf_r+0x114>
 800f356:	9207      	str	r2, [sp, #28]
 800f358:	e014      	b.n	800f384 <_svfiprintf_r+0x114>
 800f35a:	eba0 0308 	sub.w	r3, r0, r8
 800f35e:	fa09 f303 	lsl.w	r3, r9, r3
 800f362:	4313      	orrs	r3, r2
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	46a2      	mov	sl, r4
 800f368:	e7d2      	b.n	800f310 <_svfiprintf_r+0xa0>
 800f36a:	9b03      	ldr	r3, [sp, #12]
 800f36c:	1d19      	adds	r1, r3, #4
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	9103      	str	r1, [sp, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	bfbb      	ittet	lt
 800f376:	425b      	neglt	r3, r3
 800f378:	f042 0202 	orrlt.w	r2, r2, #2
 800f37c:	9307      	strge	r3, [sp, #28]
 800f37e:	9307      	strlt	r3, [sp, #28]
 800f380:	bfb8      	it	lt
 800f382:	9204      	strlt	r2, [sp, #16]
 800f384:	7823      	ldrb	r3, [r4, #0]
 800f386:	2b2e      	cmp	r3, #46	@ 0x2e
 800f388:	d10a      	bne.n	800f3a0 <_svfiprintf_r+0x130>
 800f38a:	7863      	ldrb	r3, [r4, #1]
 800f38c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f38e:	d132      	bne.n	800f3f6 <_svfiprintf_r+0x186>
 800f390:	9b03      	ldr	r3, [sp, #12]
 800f392:	1d1a      	adds	r2, r3, #4
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	9203      	str	r2, [sp, #12]
 800f398:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f39c:	3402      	adds	r4, #2
 800f39e:	9305      	str	r3, [sp, #20]
 800f3a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f464 <_svfiprintf_r+0x1f4>
 800f3a4:	7821      	ldrb	r1, [r4, #0]
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	4650      	mov	r0, sl
 800f3aa:	f7f0 ff19 	bl	80001e0 <memchr>
 800f3ae:	b138      	cbz	r0, 800f3c0 <_svfiprintf_r+0x150>
 800f3b0:	9b04      	ldr	r3, [sp, #16]
 800f3b2:	eba0 000a 	sub.w	r0, r0, sl
 800f3b6:	2240      	movs	r2, #64	@ 0x40
 800f3b8:	4082      	lsls	r2, r0
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	3401      	adds	r4, #1
 800f3be:	9304      	str	r3, [sp, #16]
 800f3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3c4:	4824      	ldr	r0, [pc, #144]	@ (800f458 <_svfiprintf_r+0x1e8>)
 800f3c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3ca:	2206      	movs	r2, #6
 800f3cc:	f7f0 ff08 	bl	80001e0 <memchr>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d036      	beq.n	800f442 <_svfiprintf_r+0x1d2>
 800f3d4:	4b21      	ldr	r3, [pc, #132]	@ (800f45c <_svfiprintf_r+0x1ec>)
 800f3d6:	bb1b      	cbnz	r3, 800f420 <_svfiprintf_r+0x1b0>
 800f3d8:	9b03      	ldr	r3, [sp, #12]
 800f3da:	3307      	adds	r3, #7
 800f3dc:	f023 0307 	bic.w	r3, r3, #7
 800f3e0:	3308      	adds	r3, #8
 800f3e2:	9303      	str	r3, [sp, #12]
 800f3e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3e6:	4433      	add	r3, r6
 800f3e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3ea:	e76a      	b.n	800f2c2 <_svfiprintf_r+0x52>
 800f3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	e7a8      	b.n	800f348 <_svfiprintf_r+0xd8>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	3401      	adds	r4, #1
 800f3fa:	9305      	str	r3, [sp, #20]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f04f 0c0a 	mov.w	ip, #10
 800f402:	4620      	mov	r0, r4
 800f404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f408:	3a30      	subs	r2, #48	@ 0x30
 800f40a:	2a09      	cmp	r2, #9
 800f40c:	d903      	bls.n	800f416 <_svfiprintf_r+0x1a6>
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0c6      	beq.n	800f3a0 <_svfiprintf_r+0x130>
 800f412:	9105      	str	r1, [sp, #20]
 800f414:	e7c4      	b.n	800f3a0 <_svfiprintf_r+0x130>
 800f416:	fb0c 2101 	mla	r1, ip, r1, r2
 800f41a:	4604      	mov	r4, r0
 800f41c:	2301      	movs	r3, #1
 800f41e:	e7f0      	b.n	800f402 <_svfiprintf_r+0x192>
 800f420:	ab03      	add	r3, sp, #12
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	462a      	mov	r2, r5
 800f426:	4b0e      	ldr	r3, [pc, #56]	@ (800f460 <_svfiprintf_r+0x1f0>)
 800f428:	a904      	add	r1, sp, #16
 800f42a:	4638      	mov	r0, r7
 800f42c:	f7fd fe96 	bl	800d15c <_printf_float>
 800f430:	1c42      	adds	r2, r0, #1
 800f432:	4606      	mov	r6, r0
 800f434:	d1d6      	bne.n	800f3e4 <_svfiprintf_r+0x174>
 800f436:	89ab      	ldrh	r3, [r5, #12]
 800f438:	065b      	lsls	r3, r3, #25
 800f43a:	f53f af2d 	bmi.w	800f298 <_svfiprintf_r+0x28>
 800f43e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f440:	e72c      	b.n	800f29c <_svfiprintf_r+0x2c>
 800f442:	ab03      	add	r3, sp, #12
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	462a      	mov	r2, r5
 800f448:	4b05      	ldr	r3, [pc, #20]	@ (800f460 <_svfiprintf_r+0x1f0>)
 800f44a:	a904      	add	r1, sp, #16
 800f44c:	4638      	mov	r0, r7
 800f44e:	f7fe f91d 	bl	800d68c <_printf_i>
 800f452:	e7ed      	b.n	800f430 <_svfiprintf_r+0x1c0>
 800f454:	08012d88 	.word	0x08012d88
 800f458:	08012d92 	.word	0x08012d92
 800f45c:	0800d15d 	.word	0x0800d15d
 800f460:	0800f1b9 	.word	0x0800f1b9
 800f464:	08012d8e 	.word	0x08012d8e

0800f468 <__sflush_r>:
 800f468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f470:	0716      	lsls	r6, r2, #28
 800f472:	4605      	mov	r5, r0
 800f474:	460c      	mov	r4, r1
 800f476:	d454      	bmi.n	800f522 <__sflush_r+0xba>
 800f478:	684b      	ldr	r3, [r1, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	dc02      	bgt.n	800f484 <__sflush_r+0x1c>
 800f47e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f480:	2b00      	cmp	r3, #0
 800f482:	dd48      	ble.n	800f516 <__sflush_r+0xae>
 800f484:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f486:	2e00      	cmp	r6, #0
 800f488:	d045      	beq.n	800f516 <__sflush_r+0xae>
 800f48a:	2300      	movs	r3, #0
 800f48c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f490:	682f      	ldr	r7, [r5, #0]
 800f492:	6a21      	ldr	r1, [r4, #32]
 800f494:	602b      	str	r3, [r5, #0]
 800f496:	d030      	beq.n	800f4fa <__sflush_r+0x92>
 800f498:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	0759      	lsls	r1, r3, #29
 800f49e:	d505      	bpl.n	800f4ac <__sflush_r+0x44>
 800f4a0:	6863      	ldr	r3, [r4, #4]
 800f4a2:	1ad2      	subs	r2, r2, r3
 800f4a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4a6:	b10b      	cbz	r3, 800f4ac <__sflush_r+0x44>
 800f4a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4aa:	1ad2      	subs	r2, r2, r3
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4b0:	6a21      	ldr	r1, [r4, #32]
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	47b0      	blx	r6
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	d106      	bne.n	800f4ca <__sflush_r+0x62>
 800f4bc:	6829      	ldr	r1, [r5, #0]
 800f4be:	291d      	cmp	r1, #29
 800f4c0:	d82b      	bhi.n	800f51a <__sflush_r+0xb2>
 800f4c2:	4a2a      	ldr	r2, [pc, #168]	@ (800f56c <__sflush_r+0x104>)
 800f4c4:	410a      	asrs	r2, r1
 800f4c6:	07d6      	lsls	r6, r2, #31
 800f4c8:	d427      	bmi.n	800f51a <__sflush_r+0xb2>
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	6062      	str	r2, [r4, #4]
 800f4ce:	04d9      	lsls	r1, r3, #19
 800f4d0:	6922      	ldr	r2, [r4, #16]
 800f4d2:	6022      	str	r2, [r4, #0]
 800f4d4:	d504      	bpl.n	800f4e0 <__sflush_r+0x78>
 800f4d6:	1c42      	adds	r2, r0, #1
 800f4d8:	d101      	bne.n	800f4de <__sflush_r+0x76>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	b903      	cbnz	r3, 800f4e0 <__sflush_r+0x78>
 800f4de:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4e2:	602f      	str	r7, [r5, #0]
 800f4e4:	b1b9      	cbz	r1, 800f516 <__sflush_r+0xae>
 800f4e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4ea:	4299      	cmp	r1, r3
 800f4ec:	d002      	beq.n	800f4f4 <__sflush_r+0x8c>
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f7ff fa96 	bl	800ea20 <_free_r>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4f8:	e00d      	b.n	800f516 <__sflush_r+0xae>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b0      	blx	r6
 800f500:	4602      	mov	r2, r0
 800f502:	1c50      	adds	r0, r2, #1
 800f504:	d1c9      	bne.n	800f49a <__sflush_r+0x32>
 800f506:	682b      	ldr	r3, [r5, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d0c6      	beq.n	800f49a <__sflush_r+0x32>
 800f50c:	2b1d      	cmp	r3, #29
 800f50e:	d001      	beq.n	800f514 <__sflush_r+0xac>
 800f510:	2b16      	cmp	r3, #22
 800f512:	d11e      	bne.n	800f552 <__sflush_r+0xea>
 800f514:	602f      	str	r7, [r5, #0]
 800f516:	2000      	movs	r0, #0
 800f518:	e022      	b.n	800f560 <__sflush_r+0xf8>
 800f51a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f51e:	b21b      	sxth	r3, r3
 800f520:	e01b      	b.n	800f55a <__sflush_r+0xf2>
 800f522:	690f      	ldr	r7, [r1, #16]
 800f524:	2f00      	cmp	r7, #0
 800f526:	d0f6      	beq.n	800f516 <__sflush_r+0xae>
 800f528:	0793      	lsls	r3, r2, #30
 800f52a:	680e      	ldr	r6, [r1, #0]
 800f52c:	bf08      	it	eq
 800f52e:	694b      	ldreq	r3, [r1, #20]
 800f530:	600f      	str	r7, [r1, #0]
 800f532:	bf18      	it	ne
 800f534:	2300      	movne	r3, #0
 800f536:	eba6 0807 	sub.w	r8, r6, r7
 800f53a:	608b      	str	r3, [r1, #8]
 800f53c:	f1b8 0f00 	cmp.w	r8, #0
 800f540:	dde9      	ble.n	800f516 <__sflush_r+0xae>
 800f542:	6a21      	ldr	r1, [r4, #32]
 800f544:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f546:	4643      	mov	r3, r8
 800f548:	463a      	mov	r2, r7
 800f54a:	4628      	mov	r0, r5
 800f54c:	47b0      	blx	r6
 800f54e:	2800      	cmp	r0, #0
 800f550:	dc08      	bgt.n	800f564 <__sflush_r+0xfc>
 800f552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	f04f 30ff 	mov.w	r0, #4294967295
 800f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f564:	4407      	add	r7, r0
 800f566:	eba8 0800 	sub.w	r8, r8, r0
 800f56a:	e7e7      	b.n	800f53c <__sflush_r+0xd4>
 800f56c:	dfbffffe 	.word	0xdfbffffe

0800f570 <_fflush_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	690b      	ldr	r3, [r1, #16]
 800f574:	4605      	mov	r5, r0
 800f576:	460c      	mov	r4, r1
 800f578:	b913      	cbnz	r3, 800f580 <_fflush_r+0x10>
 800f57a:	2500      	movs	r5, #0
 800f57c:	4628      	mov	r0, r5
 800f57e:	bd38      	pop	{r3, r4, r5, pc}
 800f580:	b118      	cbz	r0, 800f58a <_fflush_r+0x1a>
 800f582:	6a03      	ldr	r3, [r0, #32]
 800f584:	b90b      	cbnz	r3, 800f58a <_fflush_r+0x1a>
 800f586:	f7fe fa2d 	bl	800d9e4 <__sinit>
 800f58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0f3      	beq.n	800f57a <_fflush_r+0xa>
 800f592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f594:	07d0      	lsls	r0, r2, #31
 800f596:	d404      	bmi.n	800f5a2 <_fflush_r+0x32>
 800f598:	0599      	lsls	r1, r3, #22
 800f59a:	d402      	bmi.n	800f5a2 <_fflush_r+0x32>
 800f59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f59e:	f7fe fbf0 	bl	800dd82 <__retarget_lock_acquire_recursive>
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	f7ff ff5f 	bl	800f468 <__sflush_r>
 800f5aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5ac:	07da      	lsls	r2, r3, #31
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	d4e4      	bmi.n	800f57c <_fflush_r+0xc>
 800f5b2:	89a3      	ldrh	r3, [r4, #12]
 800f5b4:	059b      	lsls	r3, r3, #22
 800f5b6:	d4e1      	bmi.n	800f57c <_fflush_r+0xc>
 800f5b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ba:	f7fe fbe3 	bl	800dd84 <__retarget_lock_release_recursive>
 800f5be:	e7dd      	b.n	800f57c <_fflush_r+0xc>

0800f5c0 <__swhatbuf_r>:
 800f5c0:	b570      	push	{r4, r5, r6, lr}
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	b096      	sub	sp, #88	@ 0x58
 800f5cc:	4615      	mov	r5, r2
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	da0d      	bge.n	800f5ee <__swhatbuf_r+0x2e>
 800f5d2:	89a3      	ldrh	r3, [r4, #12]
 800f5d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5d8:	f04f 0100 	mov.w	r1, #0
 800f5dc:	bf14      	ite	ne
 800f5de:	2340      	movne	r3, #64	@ 0x40
 800f5e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	6031      	str	r1, [r6, #0]
 800f5e8:	602b      	str	r3, [r5, #0]
 800f5ea:	b016      	add	sp, #88	@ 0x58
 800f5ec:	bd70      	pop	{r4, r5, r6, pc}
 800f5ee:	466a      	mov	r2, sp
 800f5f0:	f000 f862 	bl	800f6b8 <_fstat_r>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	dbec      	blt.n	800f5d2 <__swhatbuf_r+0x12>
 800f5f8:	9901      	ldr	r1, [sp, #4]
 800f5fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f602:	4259      	negs	r1, r3
 800f604:	4159      	adcs	r1, r3
 800f606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f60a:	e7eb      	b.n	800f5e4 <__swhatbuf_r+0x24>

0800f60c <__smakebuf_r>:
 800f60c:	898b      	ldrh	r3, [r1, #12]
 800f60e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f610:	079d      	lsls	r5, r3, #30
 800f612:	4606      	mov	r6, r0
 800f614:	460c      	mov	r4, r1
 800f616:	d507      	bpl.n	800f628 <__smakebuf_r+0x1c>
 800f618:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	6123      	str	r3, [r4, #16]
 800f620:	2301      	movs	r3, #1
 800f622:	6163      	str	r3, [r4, #20]
 800f624:	b003      	add	sp, #12
 800f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f628:	ab01      	add	r3, sp, #4
 800f62a:	466a      	mov	r2, sp
 800f62c:	f7ff ffc8 	bl	800f5c0 <__swhatbuf_r>
 800f630:	9f00      	ldr	r7, [sp, #0]
 800f632:	4605      	mov	r5, r0
 800f634:	4639      	mov	r1, r7
 800f636:	4630      	mov	r0, r6
 800f638:	f7fd fc64 	bl	800cf04 <_malloc_r>
 800f63c:	b948      	cbnz	r0, 800f652 <__smakebuf_r+0x46>
 800f63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f642:	059a      	lsls	r2, r3, #22
 800f644:	d4ee      	bmi.n	800f624 <__smakebuf_r+0x18>
 800f646:	f023 0303 	bic.w	r3, r3, #3
 800f64a:	f043 0302 	orr.w	r3, r3, #2
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	e7e2      	b.n	800f618 <__smakebuf_r+0xc>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	6020      	str	r0, [r4, #0]
 800f656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f65a:	81a3      	strh	r3, [r4, #12]
 800f65c:	9b01      	ldr	r3, [sp, #4]
 800f65e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f662:	b15b      	cbz	r3, 800f67c <__smakebuf_r+0x70>
 800f664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f668:	4630      	mov	r0, r6
 800f66a:	f000 f837 	bl	800f6dc <_isatty_r>
 800f66e:	b128      	cbz	r0, 800f67c <__smakebuf_r+0x70>
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	f023 0303 	bic.w	r3, r3, #3
 800f676:	f043 0301 	orr.w	r3, r3, #1
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	431d      	orrs	r5, r3
 800f680:	81a5      	strh	r5, [r4, #12]
 800f682:	e7cf      	b.n	800f624 <__smakebuf_r+0x18>

0800f684 <memmove>:
 800f684:	4288      	cmp	r0, r1
 800f686:	b510      	push	{r4, lr}
 800f688:	eb01 0402 	add.w	r4, r1, r2
 800f68c:	d902      	bls.n	800f694 <memmove+0x10>
 800f68e:	4284      	cmp	r4, r0
 800f690:	4623      	mov	r3, r4
 800f692:	d807      	bhi.n	800f6a4 <memmove+0x20>
 800f694:	1e43      	subs	r3, r0, #1
 800f696:	42a1      	cmp	r1, r4
 800f698:	d008      	beq.n	800f6ac <memmove+0x28>
 800f69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6a2:	e7f8      	b.n	800f696 <memmove+0x12>
 800f6a4:	4402      	add	r2, r0
 800f6a6:	4601      	mov	r1, r0
 800f6a8:	428a      	cmp	r2, r1
 800f6aa:	d100      	bne.n	800f6ae <memmove+0x2a>
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6b6:	e7f7      	b.n	800f6a8 <memmove+0x24>

0800f6b8 <_fstat_r>:
 800f6b8:	b538      	push	{r3, r4, r5, lr}
 800f6ba:	4d07      	ldr	r5, [pc, #28]	@ (800f6d8 <_fstat_r+0x20>)
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4604      	mov	r4, r0
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	4611      	mov	r1, r2
 800f6c4:	602b      	str	r3, [r5, #0]
 800f6c6:	f7f3 ff0f 	bl	80034e8 <_fstat>
 800f6ca:	1c43      	adds	r3, r0, #1
 800f6cc:	d102      	bne.n	800f6d4 <_fstat_r+0x1c>
 800f6ce:	682b      	ldr	r3, [r5, #0]
 800f6d0:	b103      	cbz	r3, 800f6d4 <_fstat_r+0x1c>
 800f6d2:	6023      	str	r3, [r4, #0]
 800f6d4:	bd38      	pop	{r3, r4, r5, pc}
 800f6d6:	bf00      	nop
 800f6d8:	200027b0 	.word	0x200027b0

0800f6dc <_isatty_r>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	4d06      	ldr	r5, [pc, #24]	@ (800f6f8 <_isatty_r+0x1c>)
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	4608      	mov	r0, r1
 800f6e6:	602b      	str	r3, [r5, #0]
 800f6e8:	f7f3 ff0e 	bl	8003508 <_isatty>
 800f6ec:	1c43      	adds	r3, r0, #1
 800f6ee:	d102      	bne.n	800f6f6 <_isatty_r+0x1a>
 800f6f0:	682b      	ldr	r3, [r5, #0]
 800f6f2:	b103      	cbz	r3, 800f6f6 <_isatty_r+0x1a>
 800f6f4:	6023      	str	r3, [r4, #0]
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
 800f6f8:	200027b0 	.word	0x200027b0

0800f6fc <memcpy>:
 800f6fc:	440a      	add	r2, r1
 800f6fe:	4291      	cmp	r1, r2
 800f700:	f100 33ff 	add.w	r3, r0, #4294967295
 800f704:	d100      	bne.n	800f708 <memcpy+0xc>
 800f706:	4770      	bx	lr
 800f708:	b510      	push	{r4, lr}
 800f70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f712:	4291      	cmp	r1, r2
 800f714:	d1f9      	bne.n	800f70a <memcpy+0xe>
 800f716:	bd10      	pop	{r4, pc}

0800f718 <__assert_func>:
 800f718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f71a:	4614      	mov	r4, r2
 800f71c:	461a      	mov	r2, r3
 800f71e:	4b09      	ldr	r3, [pc, #36]	@ (800f744 <__assert_func+0x2c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4605      	mov	r5, r0
 800f724:	68d8      	ldr	r0, [r3, #12]
 800f726:	b954      	cbnz	r4, 800f73e <__assert_func+0x26>
 800f728:	4b07      	ldr	r3, [pc, #28]	@ (800f748 <__assert_func+0x30>)
 800f72a:	461c      	mov	r4, r3
 800f72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f730:	9100      	str	r1, [sp, #0]
 800f732:	462b      	mov	r3, r5
 800f734:	4905      	ldr	r1, [pc, #20]	@ (800f74c <__assert_func+0x34>)
 800f736:	f000 f86f 	bl	800f818 <fiprintf>
 800f73a:	f000 f87f 	bl	800f83c <abort>
 800f73e:	4b04      	ldr	r3, [pc, #16]	@ (800f750 <__assert_func+0x38>)
 800f740:	e7f4      	b.n	800f72c <__assert_func+0x14>
 800f742:	bf00      	nop
 800f744:	200001b4 	.word	0x200001b4
 800f748:	08012dde 	.word	0x08012dde
 800f74c:	08012db0 	.word	0x08012db0
 800f750:	08012da3 	.word	0x08012da3

0800f754 <_calloc_r>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	fba1 5402 	umull	r5, r4, r1, r2
 800f75a:	b93c      	cbnz	r4, 800f76c <_calloc_r+0x18>
 800f75c:	4629      	mov	r1, r5
 800f75e:	f7fd fbd1 	bl	800cf04 <_malloc_r>
 800f762:	4606      	mov	r6, r0
 800f764:	b928      	cbnz	r0, 800f772 <_calloc_r+0x1e>
 800f766:	2600      	movs	r6, #0
 800f768:	4630      	mov	r0, r6
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	220c      	movs	r2, #12
 800f76e:	6002      	str	r2, [r0, #0]
 800f770:	e7f9      	b.n	800f766 <_calloc_r+0x12>
 800f772:	462a      	mov	r2, r5
 800f774:	4621      	mov	r1, r4
 800f776:	f7fe fa77 	bl	800dc68 <memset>
 800f77a:	e7f5      	b.n	800f768 <_calloc_r+0x14>

0800f77c <__ascii_mbtowc>:
 800f77c:	b082      	sub	sp, #8
 800f77e:	b901      	cbnz	r1, 800f782 <__ascii_mbtowc+0x6>
 800f780:	a901      	add	r1, sp, #4
 800f782:	b142      	cbz	r2, 800f796 <__ascii_mbtowc+0x1a>
 800f784:	b14b      	cbz	r3, 800f79a <__ascii_mbtowc+0x1e>
 800f786:	7813      	ldrb	r3, [r2, #0]
 800f788:	600b      	str	r3, [r1, #0]
 800f78a:	7812      	ldrb	r2, [r2, #0]
 800f78c:	1e10      	subs	r0, r2, #0
 800f78e:	bf18      	it	ne
 800f790:	2001      	movne	r0, #1
 800f792:	b002      	add	sp, #8
 800f794:	4770      	bx	lr
 800f796:	4610      	mov	r0, r2
 800f798:	e7fb      	b.n	800f792 <__ascii_mbtowc+0x16>
 800f79a:	f06f 0001 	mvn.w	r0, #1
 800f79e:	e7f8      	b.n	800f792 <__ascii_mbtowc+0x16>

0800f7a0 <_realloc_r>:
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	4680      	mov	r8, r0
 800f7a6:	4615      	mov	r5, r2
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	b921      	cbnz	r1, 800f7b6 <_realloc_r+0x16>
 800f7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	f7fd bba7 	b.w	800cf04 <_malloc_r>
 800f7b6:	b92a      	cbnz	r2, 800f7c4 <_realloc_r+0x24>
 800f7b8:	f7ff f932 	bl	800ea20 <_free_r>
 800f7bc:	2400      	movs	r4, #0
 800f7be:	4620      	mov	r0, r4
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	f000 f841 	bl	800f84a <_malloc_usable_size_r>
 800f7c8:	4285      	cmp	r5, r0
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	d802      	bhi.n	800f7d4 <_realloc_r+0x34>
 800f7ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f7d2:	d8f4      	bhi.n	800f7be <_realloc_r+0x1e>
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f7fd fb94 	bl	800cf04 <_malloc_r>
 800f7dc:	4607      	mov	r7, r0
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0ec      	beq.n	800f7bc <_realloc_r+0x1c>
 800f7e2:	42b5      	cmp	r5, r6
 800f7e4:	462a      	mov	r2, r5
 800f7e6:	4621      	mov	r1, r4
 800f7e8:	bf28      	it	cs
 800f7ea:	4632      	movcs	r2, r6
 800f7ec:	f7ff ff86 	bl	800f6fc <memcpy>
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f7ff f914 	bl	800ea20 <_free_r>
 800f7f8:	463c      	mov	r4, r7
 800f7fa:	e7e0      	b.n	800f7be <_realloc_r+0x1e>

0800f7fc <__ascii_wctomb>:
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	4608      	mov	r0, r1
 800f800:	b141      	cbz	r1, 800f814 <__ascii_wctomb+0x18>
 800f802:	2aff      	cmp	r2, #255	@ 0xff
 800f804:	d904      	bls.n	800f810 <__ascii_wctomb+0x14>
 800f806:	228a      	movs	r2, #138	@ 0x8a
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
 800f80e:	4770      	bx	lr
 800f810:	700a      	strb	r2, [r1, #0]
 800f812:	2001      	movs	r0, #1
 800f814:	4770      	bx	lr
	...

0800f818 <fiprintf>:
 800f818:	b40e      	push	{r1, r2, r3}
 800f81a:	b503      	push	{r0, r1, lr}
 800f81c:	4601      	mov	r1, r0
 800f81e:	ab03      	add	r3, sp, #12
 800f820:	4805      	ldr	r0, [pc, #20]	@ (800f838 <fiprintf+0x20>)
 800f822:	f853 2b04 	ldr.w	r2, [r3], #4
 800f826:	6800      	ldr	r0, [r0, #0]
 800f828:	9301      	str	r3, [sp, #4]
 800f82a:	f000 f83f 	bl	800f8ac <_vfiprintf_r>
 800f82e:	b002      	add	sp, #8
 800f830:	f85d eb04 	ldr.w	lr, [sp], #4
 800f834:	b003      	add	sp, #12
 800f836:	4770      	bx	lr
 800f838:	200001b4 	.word	0x200001b4

0800f83c <abort>:
 800f83c:	b508      	push	{r3, lr}
 800f83e:	2006      	movs	r0, #6
 800f840:	f000 f974 	bl	800fb2c <raise>
 800f844:	2001      	movs	r0, #1
 800f846:	f7f3 fdff 	bl	8003448 <_exit>

0800f84a <_malloc_usable_size_r>:
 800f84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f84e:	1f18      	subs	r0, r3, #4
 800f850:	2b00      	cmp	r3, #0
 800f852:	bfbc      	itt	lt
 800f854:	580b      	ldrlt	r3, [r1, r0]
 800f856:	18c0      	addlt	r0, r0, r3
 800f858:	4770      	bx	lr

0800f85a <__sfputc_r>:
 800f85a:	6893      	ldr	r3, [r2, #8]
 800f85c:	3b01      	subs	r3, #1
 800f85e:	2b00      	cmp	r3, #0
 800f860:	b410      	push	{r4}
 800f862:	6093      	str	r3, [r2, #8]
 800f864:	da08      	bge.n	800f878 <__sfputc_r+0x1e>
 800f866:	6994      	ldr	r4, [r2, #24]
 800f868:	42a3      	cmp	r3, r4
 800f86a:	db01      	blt.n	800f870 <__sfputc_r+0x16>
 800f86c:	290a      	cmp	r1, #10
 800f86e:	d103      	bne.n	800f878 <__sfputc_r+0x1e>
 800f870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f874:	f7fe b963 	b.w	800db3e <__swbuf_r>
 800f878:	6813      	ldr	r3, [r2, #0]
 800f87a:	1c58      	adds	r0, r3, #1
 800f87c:	6010      	str	r0, [r2, #0]
 800f87e:	7019      	strb	r1, [r3, #0]
 800f880:	4608      	mov	r0, r1
 800f882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <__sfputs_r>:
 800f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	4614      	mov	r4, r2
 800f890:	18d5      	adds	r5, r2, r3
 800f892:	42ac      	cmp	r4, r5
 800f894:	d101      	bne.n	800f89a <__sfputs_r+0x12>
 800f896:	2000      	movs	r0, #0
 800f898:	e007      	b.n	800f8aa <__sfputs_r+0x22>
 800f89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89e:	463a      	mov	r2, r7
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	f7ff ffda 	bl	800f85a <__sfputc_r>
 800f8a6:	1c43      	adds	r3, r0, #1
 800f8a8:	d1f3      	bne.n	800f892 <__sfputs_r+0xa>
 800f8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8ac <_vfiprintf_r>:
 800f8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b0:	460d      	mov	r5, r1
 800f8b2:	b09d      	sub	sp, #116	@ 0x74
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	4698      	mov	r8, r3
 800f8b8:	4606      	mov	r6, r0
 800f8ba:	b118      	cbz	r0, 800f8c4 <_vfiprintf_r+0x18>
 800f8bc:	6a03      	ldr	r3, [r0, #32]
 800f8be:	b90b      	cbnz	r3, 800f8c4 <_vfiprintf_r+0x18>
 800f8c0:	f7fe f890 	bl	800d9e4 <__sinit>
 800f8c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8c6:	07d9      	lsls	r1, r3, #31
 800f8c8:	d405      	bmi.n	800f8d6 <_vfiprintf_r+0x2a>
 800f8ca:	89ab      	ldrh	r3, [r5, #12]
 800f8cc:	059a      	lsls	r2, r3, #22
 800f8ce:	d402      	bmi.n	800f8d6 <_vfiprintf_r+0x2a>
 800f8d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8d2:	f7fe fa56 	bl	800dd82 <__retarget_lock_acquire_recursive>
 800f8d6:	89ab      	ldrh	r3, [r5, #12]
 800f8d8:	071b      	lsls	r3, r3, #28
 800f8da:	d501      	bpl.n	800f8e0 <_vfiprintf_r+0x34>
 800f8dc:	692b      	ldr	r3, [r5, #16]
 800f8de:	b99b      	cbnz	r3, 800f908 <_vfiprintf_r+0x5c>
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7fe f96a 	bl	800dbbc <__swsetup_r>
 800f8e8:	b170      	cbz	r0, 800f908 <_vfiprintf_r+0x5c>
 800f8ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8ec:	07dc      	lsls	r4, r3, #31
 800f8ee:	d504      	bpl.n	800f8fa <_vfiprintf_r+0x4e>
 800f8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f4:	b01d      	add	sp, #116	@ 0x74
 800f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fa:	89ab      	ldrh	r3, [r5, #12]
 800f8fc:	0598      	lsls	r0, r3, #22
 800f8fe:	d4f7      	bmi.n	800f8f0 <_vfiprintf_r+0x44>
 800f900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f902:	f7fe fa3f 	bl	800dd84 <__retarget_lock_release_recursive>
 800f906:	e7f3      	b.n	800f8f0 <_vfiprintf_r+0x44>
 800f908:	2300      	movs	r3, #0
 800f90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f90c:	2320      	movs	r3, #32
 800f90e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f912:	f8cd 800c 	str.w	r8, [sp, #12]
 800f916:	2330      	movs	r3, #48	@ 0x30
 800f918:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fac8 <_vfiprintf_r+0x21c>
 800f91c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f920:	f04f 0901 	mov.w	r9, #1
 800f924:	4623      	mov	r3, r4
 800f926:	469a      	mov	sl, r3
 800f928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f92c:	b10a      	cbz	r2, 800f932 <_vfiprintf_r+0x86>
 800f92e:	2a25      	cmp	r2, #37	@ 0x25
 800f930:	d1f9      	bne.n	800f926 <_vfiprintf_r+0x7a>
 800f932:	ebba 0b04 	subs.w	fp, sl, r4
 800f936:	d00b      	beq.n	800f950 <_vfiprintf_r+0xa4>
 800f938:	465b      	mov	r3, fp
 800f93a:	4622      	mov	r2, r4
 800f93c:	4629      	mov	r1, r5
 800f93e:	4630      	mov	r0, r6
 800f940:	f7ff ffa2 	bl	800f888 <__sfputs_r>
 800f944:	3001      	adds	r0, #1
 800f946:	f000 80a7 	beq.w	800fa98 <_vfiprintf_r+0x1ec>
 800f94a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f94c:	445a      	add	r2, fp
 800f94e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f950:	f89a 3000 	ldrb.w	r3, [sl]
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 809f 	beq.w	800fa98 <_vfiprintf_r+0x1ec>
 800f95a:	2300      	movs	r3, #0
 800f95c:	f04f 32ff 	mov.w	r2, #4294967295
 800f960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f964:	f10a 0a01 	add.w	sl, sl, #1
 800f968:	9304      	str	r3, [sp, #16]
 800f96a:	9307      	str	r3, [sp, #28]
 800f96c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f970:	931a      	str	r3, [sp, #104]	@ 0x68
 800f972:	4654      	mov	r4, sl
 800f974:	2205      	movs	r2, #5
 800f976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f97a:	4853      	ldr	r0, [pc, #332]	@ (800fac8 <_vfiprintf_r+0x21c>)
 800f97c:	f7f0 fc30 	bl	80001e0 <memchr>
 800f980:	9a04      	ldr	r2, [sp, #16]
 800f982:	b9d8      	cbnz	r0, 800f9bc <_vfiprintf_r+0x110>
 800f984:	06d1      	lsls	r1, r2, #27
 800f986:	bf44      	itt	mi
 800f988:	2320      	movmi	r3, #32
 800f98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f98e:	0713      	lsls	r3, r2, #28
 800f990:	bf44      	itt	mi
 800f992:	232b      	movmi	r3, #43	@ 0x2b
 800f994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f998:	f89a 3000 	ldrb.w	r3, [sl]
 800f99c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f99e:	d015      	beq.n	800f9cc <_vfiprintf_r+0x120>
 800f9a0:	9a07      	ldr	r2, [sp, #28]
 800f9a2:	4654      	mov	r4, sl
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	f04f 0c0a 	mov.w	ip, #10
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9b0:	3b30      	subs	r3, #48	@ 0x30
 800f9b2:	2b09      	cmp	r3, #9
 800f9b4:	d94b      	bls.n	800fa4e <_vfiprintf_r+0x1a2>
 800f9b6:	b1b0      	cbz	r0, 800f9e6 <_vfiprintf_r+0x13a>
 800f9b8:	9207      	str	r2, [sp, #28]
 800f9ba:	e014      	b.n	800f9e6 <_vfiprintf_r+0x13a>
 800f9bc:	eba0 0308 	sub.w	r3, r0, r8
 800f9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	9304      	str	r3, [sp, #16]
 800f9c8:	46a2      	mov	sl, r4
 800f9ca:	e7d2      	b.n	800f972 <_vfiprintf_r+0xc6>
 800f9cc:	9b03      	ldr	r3, [sp, #12]
 800f9ce:	1d19      	adds	r1, r3, #4
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	9103      	str	r1, [sp, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	bfbb      	ittet	lt
 800f9d8:	425b      	neglt	r3, r3
 800f9da:	f042 0202 	orrlt.w	r2, r2, #2
 800f9de:	9307      	strge	r3, [sp, #28]
 800f9e0:	9307      	strlt	r3, [sp, #28]
 800f9e2:	bfb8      	it	lt
 800f9e4:	9204      	strlt	r2, [sp, #16]
 800f9e6:	7823      	ldrb	r3, [r4, #0]
 800f9e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9ea:	d10a      	bne.n	800fa02 <_vfiprintf_r+0x156>
 800f9ec:	7863      	ldrb	r3, [r4, #1]
 800f9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9f0:	d132      	bne.n	800fa58 <_vfiprintf_r+0x1ac>
 800f9f2:	9b03      	ldr	r3, [sp, #12]
 800f9f4:	1d1a      	adds	r2, r3, #4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	9203      	str	r2, [sp, #12]
 800f9fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9fe:	3402      	adds	r4, #2
 800fa00:	9305      	str	r3, [sp, #20]
 800fa02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fad8 <_vfiprintf_r+0x22c>
 800fa06:	7821      	ldrb	r1, [r4, #0]
 800fa08:	2203      	movs	r2, #3
 800fa0a:	4650      	mov	r0, sl
 800fa0c:	f7f0 fbe8 	bl	80001e0 <memchr>
 800fa10:	b138      	cbz	r0, 800fa22 <_vfiprintf_r+0x176>
 800fa12:	9b04      	ldr	r3, [sp, #16]
 800fa14:	eba0 000a 	sub.w	r0, r0, sl
 800fa18:	2240      	movs	r2, #64	@ 0x40
 800fa1a:	4082      	lsls	r2, r0
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	3401      	adds	r4, #1
 800fa20:	9304      	str	r3, [sp, #16]
 800fa22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa26:	4829      	ldr	r0, [pc, #164]	@ (800facc <_vfiprintf_r+0x220>)
 800fa28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa2c:	2206      	movs	r2, #6
 800fa2e:	f7f0 fbd7 	bl	80001e0 <memchr>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d03f      	beq.n	800fab6 <_vfiprintf_r+0x20a>
 800fa36:	4b26      	ldr	r3, [pc, #152]	@ (800fad0 <_vfiprintf_r+0x224>)
 800fa38:	bb1b      	cbnz	r3, 800fa82 <_vfiprintf_r+0x1d6>
 800fa3a:	9b03      	ldr	r3, [sp, #12]
 800fa3c:	3307      	adds	r3, #7
 800fa3e:	f023 0307 	bic.w	r3, r3, #7
 800fa42:	3308      	adds	r3, #8
 800fa44:	9303      	str	r3, [sp, #12]
 800fa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa48:	443b      	add	r3, r7
 800fa4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa4c:	e76a      	b.n	800f924 <_vfiprintf_r+0x78>
 800fa4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa52:	460c      	mov	r4, r1
 800fa54:	2001      	movs	r0, #1
 800fa56:	e7a8      	b.n	800f9aa <_vfiprintf_r+0xfe>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	3401      	adds	r4, #1
 800fa5c:	9305      	str	r3, [sp, #20]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	f04f 0c0a 	mov.w	ip, #10
 800fa64:	4620      	mov	r0, r4
 800fa66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa6a:	3a30      	subs	r2, #48	@ 0x30
 800fa6c:	2a09      	cmp	r2, #9
 800fa6e:	d903      	bls.n	800fa78 <_vfiprintf_r+0x1cc>
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d0c6      	beq.n	800fa02 <_vfiprintf_r+0x156>
 800fa74:	9105      	str	r1, [sp, #20]
 800fa76:	e7c4      	b.n	800fa02 <_vfiprintf_r+0x156>
 800fa78:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e7f0      	b.n	800fa64 <_vfiprintf_r+0x1b8>
 800fa82:	ab03      	add	r3, sp, #12
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	462a      	mov	r2, r5
 800fa88:	4b12      	ldr	r3, [pc, #72]	@ (800fad4 <_vfiprintf_r+0x228>)
 800fa8a:	a904      	add	r1, sp, #16
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f7fd fb65 	bl	800d15c <_printf_float>
 800fa92:	4607      	mov	r7, r0
 800fa94:	1c78      	adds	r0, r7, #1
 800fa96:	d1d6      	bne.n	800fa46 <_vfiprintf_r+0x19a>
 800fa98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa9a:	07d9      	lsls	r1, r3, #31
 800fa9c:	d405      	bmi.n	800faaa <_vfiprintf_r+0x1fe>
 800fa9e:	89ab      	ldrh	r3, [r5, #12]
 800faa0:	059a      	lsls	r2, r3, #22
 800faa2:	d402      	bmi.n	800faaa <_vfiprintf_r+0x1fe>
 800faa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faa6:	f7fe f96d 	bl	800dd84 <__retarget_lock_release_recursive>
 800faaa:	89ab      	ldrh	r3, [r5, #12]
 800faac:	065b      	lsls	r3, r3, #25
 800faae:	f53f af1f 	bmi.w	800f8f0 <_vfiprintf_r+0x44>
 800fab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fab4:	e71e      	b.n	800f8f4 <_vfiprintf_r+0x48>
 800fab6:	ab03      	add	r3, sp, #12
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	462a      	mov	r2, r5
 800fabc:	4b05      	ldr	r3, [pc, #20]	@ (800fad4 <_vfiprintf_r+0x228>)
 800fabe:	a904      	add	r1, sp, #16
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7fd fde3 	bl	800d68c <_printf_i>
 800fac6:	e7e4      	b.n	800fa92 <_vfiprintf_r+0x1e6>
 800fac8:	08012d88 	.word	0x08012d88
 800facc:	08012d92 	.word	0x08012d92
 800fad0:	0800d15d 	.word	0x0800d15d
 800fad4:	0800f889 	.word	0x0800f889
 800fad8:	08012d8e 	.word	0x08012d8e

0800fadc <_raise_r>:
 800fadc:	291f      	cmp	r1, #31
 800fade:	b538      	push	{r3, r4, r5, lr}
 800fae0:	4605      	mov	r5, r0
 800fae2:	460c      	mov	r4, r1
 800fae4:	d904      	bls.n	800faf0 <_raise_r+0x14>
 800fae6:	2316      	movs	r3, #22
 800fae8:	6003      	str	r3, [r0, #0]
 800faea:	f04f 30ff 	mov.w	r0, #4294967295
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800faf2:	b112      	cbz	r2, 800fafa <_raise_r+0x1e>
 800faf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faf8:	b94b      	cbnz	r3, 800fb0e <_raise_r+0x32>
 800fafa:	4628      	mov	r0, r5
 800fafc:	f000 f830 	bl	800fb60 <_getpid_r>
 800fb00:	4622      	mov	r2, r4
 800fb02:	4601      	mov	r1, r0
 800fb04:	4628      	mov	r0, r5
 800fb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb0a:	f000 b817 	b.w	800fb3c <_kill_r>
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d00a      	beq.n	800fb28 <_raise_r+0x4c>
 800fb12:	1c59      	adds	r1, r3, #1
 800fb14:	d103      	bne.n	800fb1e <_raise_r+0x42>
 800fb16:	2316      	movs	r3, #22
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	2001      	movs	r0, #1
 800fb1c:	e7e7      	b.n	800faee <_raise_r+0x12>
 800fb1e:	2100      	movs	r1, #0
 800fb20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb24:	4620      	mov	r0, r4
 800fb26:	4798      	blx	r3
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e7e0      	b.n	800faee <_raise_r+0x12>

0800fb2c <raise>:
 800fb2c:	4b02      	ldr	r3, [pc, #8]	@ (800fb38 <raise+0xc>)
 800fb2e:	4601      	mov	r1, r0
 800fb30:	6818      	ldr	r0, [r3, #0]
 800fb32:	f7ff bfd3 	b.w	800fadc <_raise_r>
 800fb36:	bf00      	nop
 800fb38:	200001b4 	.word	0x200001b4

0800fb3c <_kill_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4d07      	ldr	r5, [pc, #28]	@ (800fb5c <_kill_r+0x20>)
 800fb40:	2300      	movs	r3, #0
 800fb42:	4604      	mov	r4, r0
 800fb44:	4608      	mov	r0, r1
 800fb46:	4611      	mov	r1, r2
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	f7f3 fc6d 	bl	8003428 <_kill>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	d102      	bne.n	800fb58 <_kill_r+0x1c>
 800fb52:	682b      	ldr	r3, [r5, #0]
 800fb54:	b103      	cbz	r3, 800fb58 <_kill_r+0x1c>
 800fb56:	6023      	str	r3, [r4, #0]
 800fb58:	bd38      	pop	{r3, r4, r5, pc}
 800fb5a:	bf00      	nop
 800fb5c:	200027b0 	.word	0x200027b0

0800fb60 <_getpid_r>:
 800fb60:	f7f3 bc5a 	b.w	8003418 <_getpid>

0800fb64 <pow>:
 800fb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb66:	ed2d 8b02 	vpush	{d8}
 800fb6a:	eeb0 8a40 	vmov.f32	s16, s0
 800fb6e:	eef0 8a60 	vmov.f32	s17, s1
 800fb72:	ec55 4b11 	vmov	r4, r5, d1
 800fb76:	f000 f873 	bl	800fc60 <__ieee754_pow>
 800fb7a:	4622      	mov	r2, r4
 800fb7c:	462b      	mov	r3, r5
 800fb7e:	4620      	mov	r0, r4
 800fb80:	4629      	mov	r1, r5
 800fb82:	ec57 6b10 	vmov	r6, r7, d0
 800fb86:	f7f0 ffd9 	bl	8000b3c <__aeabi_dcmpun>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d13b      	bne.n	800fc06 <pow+0xa2>
 800fb8e:	ec51 0b18 	vmov	r0, r1, d8
 800fb92:	2200      	movs	r2, #0
 800fb94:	2300      	movs	r3, #0
 800fb96:	f7f0 ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb9a:	b1b8      	cbz	r0, 800fbcc <pow+0x68>
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2300      	movs	r3, #0
 800fba0:	4620      	mov	r0, r4
 800fba2:	4629      	mov	r1, r5
 800fba4:	f7f0 ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d146      	bne.n	800fc3a <pow+0xd6>
 800fbac:	ec45 4b10 	vmov	d0, r4, r5
 800fbb0:	f000 f848 	bl	800fc44 <finite>
 800fbb4:	b338      	cbz	r0, 800fc06 <pow+0xa2>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	2300      	movs	r3, #0
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	f7f0 ff95 	bl	8000aec <__aeabi_dcmplt>
 800fbc2:	b300      	cbz	r0, 800fc06 <pow+0xa2>
 800fbc4:	f7fe f8b2 	bl	800dd2c <__errno>
 800fbc8:	2322      	movs	r3, #34	@ 0x22
 800fbca:	e01b      	b.n	800fc04 <pow+0xa0>
 800fbcc:	ec47 6b10 	vmov	d0, r6, r7
 800fbd0:	f000 f838 	bl	800fc44 <finite>
 800fbd4:	b9e0      	cbnz	r0, 800fc10 <pow+0xac>
 800fbd6:	eeb0 0a48 	vmov.f32	s0, s16
 800fbda:	eef0 0a68 	vmov.f32	s1, s17
 800fbde:	f000 f831 	bl	800fc44 <finite>
 800fbe2:	b1a8      	cbz	r0, 800fc10 <pow+0xac>
 800fbe4:	ec45 4b10 	vmov	d0, r4, r5
 800fbe8:	f000 f82c 	bl	800fc44 <finite>
 800fbec:	b180      	cbz	r0, 800fc10 <pow+0xac>
 800fbee:	4632      	mov	r2, r6
 800fbf0:	463b      	mov	r3, r7
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	4639      	mov	r1, r7
 800fbf6:	f7f0 ffa1 	bl	8000b3c <__aeabi_dcmpun>
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	d0e2      	beq.n	800fbc4 <pow+0x60>
 800fbfe:	f7fe f895 	bl	800dd2c <__errno>
 800fc02:	2321      	movs	r3, #33	@ 0x21
 800fc04:	6003      	str	r3, [r0, #0]
 800fc06:	ecbd 8b02 	vpop	{d8}
 800fc0a:	ec47 6b10 	vmov	d0, r6, r7
 800fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc10:	2200      	movs	r2, #0
 800fc12:	2300      	movs	r3, #0
 800fc14:	4630      	mov	r0, r6
 800fc16:	4639      	mov	r1, r7
 800fc18:	f7f0 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d0f2      	beq.n	800fc06 <pow+0xa2>
 800fc20:	eeb0 0a48 	vmov.f32	s0, s16
 800fc24:	eef0 0a68 	vmov.f32	s1, s17
 800fc28:	f000 f80c 	bl	800fc44 <finite>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d0ea      	beq.n	800fc06 <pow+0xa2>
 800fc30:	ec45 4b10 	vmov	d0, r4, r5
 800fc34:	f000 f806 	bl	800fc44 <finite>
 800fc38:	e7c3      	b.n	800fbc2 <pow+0x5e>
 800fc3a:	4f01      	ldr	r7, [pc, #4]	@ (800fc40 <pow+0xdc>)
 800fc3c:	2600      	movs	r6, #0
 800fc3e:	e7e2      	b.n	800fc06 <pow+0xa2>
 800fc40:	3ff00000 	.word	0x3ff00000

0800fc44 <finite>:
 800fc44:	b082      	sub	sp, #8
 800fc46:	ed8d 0b00 	vstr	d0, [sp]
 800fc4a:	9801      	ldr	r0, [sp, #4]
 800fc4c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fc50:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fc54:	0fc0      	lsrs	r0, r0, #31
 800fc56:	b002      	add	sp, #8
 800fc58:	4770      	bx	lr
 800fc5a:	0000      	movs	r0, r0
 800fc5c:	0000      	movs	r0, r0
	...

0800fc60 <__ieee754_pow>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	b091      	sub	sp, #68	@ 0x44
 800fc66:	ed8d 1b00 	vstr	d1, [sp]
 800fc6a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fc6e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fc72:	ea5a 0001 	orrs.w	r0, sl, r1
 800fc76:	ec57 6b10 	vmov	r6, r7, d0
 800fc7a:	d113      	bne.n	800fca4 <__ieee754_pow+0x44>
 800fc7c:	19b3      	adds	r3, r6, r6
 800fc7e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fc82:	4152      	adcs	r2, r2
 800fc84:	4298      	cmp	r0, r3
 800fc86:	4b98      	ldr	r3, [pc, #608]	@ (800fee8 <__ieee754_pow+0x288>)
 800fc88:	4193      	sbcs	r3, r2
 800fc8a:	f080 84ea 	bcs.w	8010662 <__ieee754_pow+0xa02>
 800fc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc92:	4630      	mov	r0, r6
 800fc94:	4639      	mov	r1, r7
 800fc96:	f7f0 fb01 	bl	800029c <__adddf3>
 800fc9a:	ec41 0b10 	vmov	d0, r0, r1
 800fc9e:	b011      	add	sp, #68	@ 0x44
 800fca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca4:	4a91      	ldr	r2, [pc, #580]	@ (800feec <__ieee754_pow+0x28c>)
 800fca6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fcaa:	4590      	cmp	r8, r2
 800fcac:	463d      	mov	r5, r7
 800fcae:	4633      	mov	r3, r6
 800fcb0:	d806      	bhi.n	800fcc0 <__ieee754_pow+0x60>
 800fcb2:	d101      	bne.n	800fcb8 <__ieee754_pow+0x58>
 800fcb4:	2e00      	cmp	r6, #0
 800fcb6:	d1ea      	bne.n	800fc8e <__ieee754_pow+0x2e>
 800fcb8:	4592      	cmp	sl, r2
 800fcba:	d801      	bhi.n	800fcc0 <__ieee754_pow+0x60>
 800fcbc:	d10e      	bne.n	800fcdc <__ieee754_pow+0x7c>
 800fcbe:	b169      	cbz	r1, 800fcdc <__ieee754_pow+0x7c>
 800fcc0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fcc4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fcc8:	431d      	orrs	r5, r3
 800fcca:	d1e0      	bne.n	800fc8e <__ieee754_pow+0x2e>
 800fccc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcd0:	18db      	adds	r3, r3, r3
 800fcd2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fcd6:	4152      	adcs	r2, r2
 800fcd8:	429d      	cmp	r5, r3
 800fcda:	e7d4      	b.n	800fc86 <__ieee754_pow+0x26>
 800fcdc:	2d00      	cmp	r5, #0
 800fcde:	46c3      	mov	fp, r8
 800fce0:	da3a      	bge.n	800fd58 <__ieee754_pow+0xf8>
 800fce2:	4a83      	ldr	r2, [pc, #524]	@ (800fef0 <__ieee754_pow+0x290>)
 800fce4:	4592      	cmp	sl, r2
 800fce6:	d84d      	bhi.n	800fd84 <__ieee754_pow+0x124>
 800fce8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fcec:	4592      	cmp	sl, r2
 800fcee:	f240 84c7 	bls.w	8010680 <__ieee754_pow+0xa20>
 800fcf2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fcf6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fcfa:	2a14      	cmp	r2, #20
 800fcfc:	dd0f      	ble.n	800fd1e <__ieee754_pow+0xbe>
 800fcfe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fd02:	fa21 f402 	lsr.w	r4, r1, r2
 800fd06:	fa04 f202 	lsl.w	r2, r4, r2
 800fd0a:	428a      	cmp	r2, r1
 800fd0c:	f040 84b8 	bne.w	8010680 <__ieee754_pow+0xa20>
 800fd10:	f004 0401 	and.w	r4, r4, #1
 800fd14:	f1c4 0402 	rsb	r4, r4, #2
 800fd18:	2900      	cmp	r1, #0
 800fd1a:	d158      	bne.n	800fdce <__ieee754_pow+0x16e>
 800fd1c:	e00e      	b.n	800fd3c <__ieee754_pow+0xdc>
 800fd1e:	2900      	cmp	r1, #0
 800fd20:	d154      	bne.n	800fdcc <__ieee754_pow+0x16c>
 800fd22:	f1c2 0214 	rsb	r2, r2, #20
 800fd26:	fa4a f402 	asr.w	r4, sl, r2
 800fd2a:	fa04 f202 	lsl.w	r2, r4, r2
 800fd2e:	4552      	cmp	r2, sl
 800fd30:	f040 84a3 	bne.w	801067a <__ieee754_pow+0xa1a>
 800fd34:	f004 0401 	and.w	r4, r4, #1
 800fd38:	f1c4 0402 	rsb	r4, r4, #2
 800fd3c:	4a6d      	ldr	r2, [pc, #436]	@ (800fef4 <__ieee754_pow+0x294>)
 800fd3e:	4592      	cmp	sl, r2
 800fd40:	d12e      	bne.n	800fda0 <__ieee754_pow+0x140>
 800fd42:	f1b9 0f00 	cmp.w	r9, #0
 800fd46:	f280 8494 	bge.w	8010672 <__ieee754_pow+0xa12>
 800fd4a:	496a      	ldr	r1, [pc, #424]	@ (800fef4 <__ieee754_pow+0x294>)
 800fd4c:	4632      	mov	r2, r6
 800fd4e:	463b      	mov	r3, r7
 800fd50:	2000      	movs	r0, #0
 800fd52:	f7f0 fd83 	bl	800085c <__aeabi_ddiv>
 800fd56:	e7a0      	b.n	800fc9a <__ieee754_pow+0x3a>
 800fd58:	2400      	movs	r4, #0
 800fd5a:	bbc1      	cbnz	r1, 800fdce <__ieee754_pow+0x16e>
 800fd5c:	4a63      	ldr	r2, [pc, #396]	@ (800feec <__ieee754_pow+0x28c>)
 800fd5e:	4592      	cmp	sl, r2
 800fd60:	d1ec      	bne.n	800fd3c <__ieee754_pow+0xdc>
 800fd62:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fd66:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	f000 8479 	beq.w	8010662 <__ieee754_pow+0xa02>
 800fd70:	4b61      	ldr	r3, [pc, #388]	@ (800fef8 <__ieee754_pow+0x298>)
 800fd72:	4598      	cmp	r8, r3
 800fd74:	d908      	bls.n	800fd88 <__ieee754_pow+0x128>
 800fd76:	f1b9 0f00 	cmp.w	r9, #0
 800fd7a:	f2c0 8476 	blt.w	801066a <__ieee754_pow+0xa0a>
 800fd7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd82:	e78a      	b.n	800fc9a <__ieee754_pow+0x3a>
 800fd84:	2402      	movs	r4, #2
 800fd86:	e7e8      	b.n	800fd5a <__ieee754_pow+0xfa>
 800fd88:	f1b9 0f00 	cmp.w	r9, #0
 800fd8c:	f04f 0000 	mov.w	r0, #0
 800fd90:	f04f 0100 	mov.w	r1, #0
 800fd94:	da81      	bge.n	800fc9a <__ieee754_pow+0x3a>
 800fd96:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fd9a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fd9e:	e77c      	b.n	800fc9a <__ieee754_pow+0x3a>
 800fda0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fda4:	d106      	bne.n	800fdb4 <__ieee754_pow+0x154>
 800fda6:	4632      	mov	r2, r6
 800fda8:	463b      	mov	r3, r7
 800fdaa:	4630      	mov	r0, r6
 800fdac:	4639      	mov	r1, r7
 800fdae:	f7f0 fc2b 	bl	8000608 <__aeabi_dmul>
 800fdb2:	e772      	b.n	800fc9a <__ieee754_pow+0x3a>
 800fdb4:	4a51      	ldr	r2, [pc, #324]	@ (800fefc <__ieee754_pow+0x29c>)
 800fdb6:	4591      	cmp	r9, r2
 800fdb8:	d109      	bne.n	800fdce <__ieee754_pow+0x16e>
 800fdba:	2d00      	cmp	r5, #0
 800fdbc:	db07      	blt.n	800fdce <__ieee754_pow+0x16e>
 800fdbe:	ec47 6b10 	vmov	d0, r6, r7
 800fdc2:	b011      	add	sp, #68	@ 0x44
 800fdc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	f000 bd52 	b.w	8010870 <__ieee754_sqrt>
 800fdcc:	2400      	movs	r4, #0
 800fdce:	ec47 6b10 	vmov	d0, r6, r7
 800fdd2:	9302      	str	r3, [sp, #8]
 800fdd4:	f000 fc88 	bl	80106e8 <fabs>
 800fdd8:	9b02      	ldr	r3, [sp, #8]
 800fdda:	ec51 0b10 	vmov	r0, r1, d0
 800fdde:	bb53      	cbnz	r3, 800fe36 <__ieee754_pow+0x1d6>
 800fde0:	4b44      	ldr	r3, [pc, #272]	@ (800fef4 <__ieee754_pow+0x294>)
 800fde2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d002      	beq.n	800fdf0 <__ieee754_pow+0x190>
 800fdea:	f1b8 0f00 	cmp.w	r8, #0
 800fdee:	d122      	bne.n	800fe36 <__ieee754_pow+0x1d6>
 800fdf0:	f1b9 0f00 	cmp.w	r9, #0
 800fdf4:	da05      	bge.n	800fe02 <__ieee754_pow+0x1a2>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	493d      	ldr	r1, [pc, #244]	@ (800fef4 <__ieee754_pow+0x294>)
 800fdfe:	f7f0 fd2d 	bl	800085c <__aeabi_ddiv>
 800fe02:	2d00      	cmp	r5, #0
 800fe04:	f6bf af49 	bge.w	800fc9a <__ieee754_pow+0x3a>
 800fe08:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fe0c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fe10:	ea58 0804 	orrs.w	r8, r8, r4
 800fe14:	d108      	bne.n	800fe28 <__ieee754_pow+0x1c8>
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	f7f0 fa3b 	bl	8000298 <__aeabi_dsub>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	e794      	b.n	800fd52 <__ieee754_pow+0xf2>
 800fe28:	2c01      	cmp	r4, #1
 800fe2a:	f47f af36 	bne.w	800fc9a <__ieee754_pow+0x3a>
 800fe2e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe32:	4619      	mov	r1, r3
 800fe34:	e731      	b.n	800fc9a <__ieee754_pow+0x3a>
 800fe36:	0feb      	lsrs	r3, r5, #31
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	ea53 0204 	orrs.w	r2, r3, r4
 800fe3e:	d102      	bne.n	800fe46 <__ieee754_pow+0x1e6>
 800fe40:	4632      	mov	r2, r6
 800fe42:	463b      	mov	r3, r7
 800fe44:	e7e9      	b.n	800fe1a <__ieee754_pow+0x1ba>
 800fe46:	3c01      	subs	r4, #1
 800fe48:	431c      	orrs	r4, r3
 800fe4a:	d016      	beq.n	800fe7a <__ieee754_pow+0x21a>
 800fe4c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fed8 <__ieee754_pow+0x278>
 800fe50:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fe54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe58:	f240 8112 	bls.w	8010080 <__ieee754_pow+0x420>
 800fe5c:	4b28      	ldr	r3, [pc, #160]	@ (800ff00 <__ieee754_pow+0x2a0>)
 800fe5e:	459a      	cmp	sl, r3
 800fe60:	4b25      	ldr	r3, [pc, #148]	@ (800fef8 <__ieee754_pow+0x298>)
 800fe62:	d916      	bls.n	800fe92 <__ieee754_pow+0x232>
 800fe64:	4598      	cmp	r8, r3
 800fe66:	d80b      	bhi.n	800fe80 <__ieee754_pow+0x220>
 800fe68:	f1b9 0f00 	cmp.w	r9, #0
 800fe6c:	da0b      	bge.n	800fe86 <__ieee754_pow+0x226>
 800fe6e:	2000      	movs	r0, #0
 800fe70:	b011      	add	sp, #68	@ 0x44
 800fe72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe76:	f000 bcf3 	b.w	8010860 <__math_oflow>
 800fe7a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fee0 <__ieee754_pow+0x280>
 800fe7e:	e7e7      	b.n	800fe50 <__ieee754_pow+0x1f0>
 800fe80:	f1b9 0f00 	cmp.w	r9, #0
 800fe84:	dcf3      	bgt.n	800fe6e <__ieee754_pow+0x20e>
 800fe86:	2000      	movs	r0, #0
 800fe88:	b011      	add	sp, #68	@ 0x44
 800fe8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8e:	f000 bcdf 	b.w	8010850 <__math_uflow>
 800fe92:	4598      	cmp	r8, r3
 800fe94:	d20c      	bcs.n	800feb0 <__ieee754_pow+0x250>
 800fe96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f7f0 fe25 	bl	8000aec <__aeabi_dcmplt>
 800fea2:	3800      	subs	r0, #0
 800fea4:	bf18      	it	ne
 800fea6:	2001      	movne	r0, #1
 800fea8:	f1b9 0f00 	cmp.w	r9, #0
 800feac:	daec      	bge.n	800fe88 <__ieee754_pow+0x228>
 800feae:	e7df      	b.n	800fe70 <__ieee754_pow+0x210>
 800feb0:	4b10      	ldr	r3, [pc, #64]	@ (800fef4 <__ieee754_pow+0x294>)
 800feb2:	4598      	cmp	r8, r3
 800feb4:	f04f 0200 	mov.w	r2, #0
 800feb8:	d924      	bls.n	800ff04 <__ieee754_pow+0x2a4>
 800feba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800febe:	2300      	movs	r3, #0
 800fec0:	f7f0 fe14 	bl	8000aec <__aeabi_dcmplt>
 800fec4:	3800      	subs	r0, #0
 800fec6:	bf18      	it	ne
 800fec8:	2001      	movne	r0, #1
 800feca:	f1b9 0f00 	cmp.w	r9, #0
 800fece:	dccf      	bgt.n	800fe70 <__ieee754_pow+0x210>
 800fed0:	e7da      	b.n	800fe88 <__ieee754_pow+0x228>
 800fed2:	bf00      	nop
 800fed4:	f3af 8000 	nop.w
 800fed8:	00000000 	.word	0x00000000
 800fedc:	3ff00000 	.word	0x3ff00000
 800fee0:	00000000 	.word	0x00000000
 800fee4:	bff00000 	.word	0xbff00000
 800fee8:	fff00000 	.word	0xfff00000
 800feec:	7ff00000 	.word	0x7ff00000
 800fef0:	433fffff 	.word	0x433fffff
 800fef4:	3ff00000 	.word	0x3ff00000
 800fef8:	3fefffff 	.word	0x3fefffff
 800fefc:	3fe00000 	.word	0x3fe00000
 800ff00:	43f00000 	.word	0x43f00000
 800ff04:	4b5a      	ldr	r3, [pc, #360]	@ (8010070 <__ieee754_pow+0x410>)
 800ff06:	f7f0 f9c7 	bl	8000298 <__aeabi_dsub>
 800ff0a:	a351      	add	r3, pc, #324	@ (adr r3, 8010050 <__ieee754_pow+0x3f0>)
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	4604      	mov	r4, r0
 800ff12:	460d      	mov	r5, r1
 800ff14:	f7f0 fb78 	bl	8000608 <__aeabi_dmul>
 800ff18:	a34f      	add	r3, pc, #316	@ (adr r3, 8010058 <__ieee754_pow+0x3f8>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	4606      	mov	r6, r0
 800ff20:	460f      	mov	r7, r1
 800ff22:	4620      	mov	r0, r4
 800ff24:	4629      	mov	r1, r5
 800ff26:	f7f0 fb6f 	bl	8000608 <__aeabi_dmul>
 800ff2a:	4b52      	ldr	r3, [pc, #328]	@ (8010074 <__ieee754_pow+0x414>)
 800ff2c:	4682      	mov	sl, r0
 800ff2e:	468b      	mov	fp, r1
 800ff30:	2200      	movs	r2, #0
 800ff32:	4620      	mov	r0, r4
 800ff34:	4629      	mov	r1, r5
 800ff36:	f7f0 fb67 	bl	8000608 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	a148      	add	r1, pc, #288	@ (adr r1, 8010060 <__ieee754_pow+0x400>)
 800ff40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff44:	f7f0 f9a8 	bl	8000298 <__aeabi_dsub>
 800ff48:	4622      	mov	r2, r4
 800ff4a:	462b      	mov	r3, r5
 800ff4c:	f7f0 fb5c 	bl	8000608 <__aeabi_dmul>
 800ff50:	4602      	mov	r2, r0
 800ff52:	460b      	mov	r3, r1
 800ff54:	2000      	movs	r0, #0
 800ff56:	4948      	ldr	r1, [pc, #288]	@ (8010078 <__ieee754_pow+0x418>)
 800ff58:	f7f0 f99e 	bl	8000298 <__aeabi_dsub>
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	4680      	mov	r8, r0
 800ff60:	4689      	mov	r9, r1
 800ff62:	462b      	mov	r3, r5
 800ff64:	4620      	mov	r0, r4
 800ff66:	4629      	mov	r1, r5
 800ff68:	f7f0 fb4e 	bl	8000608 <__aeabi_dmul>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4640      	mov	r0, r8
 800ff72:	4649      	mov	r1, r9
 800ff74:	f7f0 fb48 	bl	8000608 <__aeabi_dmul>
 800ff78:	a33b      	add	r3, pc, #236	@ (adr r3, 8010068 <__ieee754_pow+0x408>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	f7f0 fb43 	bl	8000608 <__aeabi_dmul>
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	4650      	mov	r0, sl
 800ff88:	4659      	mov	r1, fp
 800ff8a:	f7f0 f985 	bl	8000298 <__aeabi_dsub>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4680      	mov	r8, r0
 800ff94:	4689      	mov	r9, r1
 800ff96:	4630      	mov	r0, r6
 800ff98:	4639      	mov	r1, r7
 800ff9a:	f7f0 f97f 	bl	800029c <__adddf3>
 800ff9e:	2400      	movs	r4, #0
 800ffa0:	4632      	mov	r2, r6
 800ffa2:	463b      	mov	r3, r7
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	460d      	mov	r5, r1
 800ffa8:	f7f0 f976 	bl	8000298 <__aeabi_dsub>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	f7f0 f970 	bl	8000298 <__aeabi_dsub>
 800ffb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	9304      	str	r3, [sp, #16]
 800ffc4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460f      	mov	r7, r1
 800ffcc:	4652      	mov	r2, sl
 800ffce:	465b      	mov	r3, fp
 800ffd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd4:	f7f0 f960 	bl	8000298 <__aeabi_dsub>
 800ffd8:	4622      	mov	r2, r4
 800ffda:	462b      	mov	r3, r5
 800ffdc:	f7f0 fb14 	bl	8000608 <__aeabi_dmul>
 800ffe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	4689      	mov	r9, r1
 800ffe8:	4630      	mov	r0, r6
 800ffea:	4639      	mov	r1, r7
 800ffec:	f7f0 fb0c 	bl	8000608 <__aeabi_dmul>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	4640      	mov	r0, r8
 800fff6:	4649      	mov	r1, r9
 800fff8:	f7f0 f950 	bl	800029c <__adddf3>
 800fffc:	4652      	mov	r2, sl
 800fffe:	465b      	mov	r3, fp
 8010000:	4606      	mov	r6, r0
 8010002:	460f      	mov	r7, r1
 8010004:	4620      	mov	r0, r4
 8010006:	4629      	mov	r1, r5
 8010008:	f7f0 fafe 	bl	8000608 <__aeabi_dmul>
 801000c:	460b      	mov	r3, r1
 801000e:	4602      	mov	r2, r0
 8010010:	4680      	mov	r8, r0
 8010012:	4689      	mov	r9, r1
 8010014:	4630      	mov	r0, r6
 8010016:	4639      	mov	r1, r7
 8010018:	f7f0 f940 	bl	800029c <__adddf3>
 801001c:	4b17      	ldr	r3, [pc, #92]	@ (801007c <__ieee754_pow+0x41c>)
 801001e:	4299      	cmp	r1, r3
 8010020:	4604      	mov	r4, r0
 8010022:	460d      	mov	r5, r1
 8010024:	468a      	mov	sl, r1
 8010026:	468b      	mov	fp, r1
 8010028:	f340 82ef 	ble.w	801060a <__ieee754_pow+0x9aa>
 801002c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010030:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010034:	4303      	orrs	r3, r0
 8010036:	f000 81e8 	beq.w	801040a <__ieee754_pow+0x7aa>
 801003a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801003e:	2200      	movs	r2, #0
 8010040:	2300      	movs	r3, #0
 8010042:	f7f0 fd53 	bl	8000aec <__aeabi_dcmplt>
 8010046:	3800      	subs	r0, #0
 8010048:	bf18      	it	ne
 801004a:	2001      	movne	r0, #1
 801004c:	e710      	b.n	800fe70 <__ieee754_pow+0x210>
 801004e:	bf00      	nop
 8010050:	60000000 	.word	0x60000000
 8010054:	3ff71547 	.word	0x3ff71547
 8010058:	f85ddf44 	.word	0xf85ddf44
 801005c:	3e54ae0b 	.word	0x3e54ae0b
 8010060:	55555555 	.word	0x55555555
 8010064:	3fd55555 	.word	0x3fd55555
 8010068:	652b82fe 	.word	0x652b82fe
 801006c:	3ff71547 	.word	0x3ff71547
 8010070:	3ff00000 	.word	0x3ff00000
 8010074:	3fd00000 	.word	0x3fd00000
 8010078:	3fe00000 	.word	0x3fe00000
 801007c:	408fffff 	.word	0x408fffff
 8010080:	4bd5      	ldr	r3, [pc, #852]	@ (80103d8 <__ieee754_pow+0x778>)
 8010082:	402b      	ands	r3, r5
 8010084:	2200      	movs	r2, #0
 8010086:	b92b      	cbnz	r3, 8010094 <__ieee754_pow+0x434>
 8010088:	4bd4      	ldr	r3, [pc, #848]	@ (80103dc <__ieee754_pow+0x77c>)
 801008a:	f7f0 fabd 	bl	8000608 <__aeabi_dmul>
 801008e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010092:	468b      	mov	fp, r1
 8010094:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010098:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801009c:	4413      	add	r3, r2
 801009e:	930a      	str	r3, [sp, #40]	@ 0x28
 80100a0:	4bcf      	ldr	r3, [pc, #828]	@ (80103e0 <__ieee754_pow+0x780>)
 80100a2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80100a6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80100aa:	459b      	cmp	fp, r3
 80100ac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80100b0:	dd08      	ble.n	80100c4 <__ieee754_pow+0x464>
 80100b2:	4bcc      	ldr	r3, [pc, #816]	@ (80103e4 <__ieee754_pow+0x784>)
 80100b4:	459b      	cmp	fp, r3
 80100b6:	f340 81a5 	ble.w	8010404 <__ieee754_pow+0x7a4>
 80100ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100bc:	3301      	adds	r3, #1
 80100be:	930a      	str	r3, [sp, #40]	@ 0x28
 80100c0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80100c4:	f04f 0a00 	mov.w	sl, #0
 80100c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80100cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100ce:	4bc6      	ldr	r3, [pc, #792]	@ (80103e8 <__ieee754_pow+0x788>)
 80100d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80100d4:	ed93 7b00 	vldr	d7, [r3]
 80100d8:	4629      	mov	r1, r5
 80100da:	ec53 2b17 	vmov	r2, r3, d7
 80100de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80100e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80100e6:	f7f0 f8d7 	bl	8000298 <__aeabi_dsub>
 80100ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80100ee:	4606      	mov	r6, r0
 80100f0:	460f      	mov	r7, r1
 80100f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100f6:	f7f0 f8d1 	bl	800029c <__adddf3>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	2000      	movs	r0, #0
 8010100:	49ba      	ldr	r1, [pc, #744]	@ (80103ec <__ieee754_pow+0x78c>)
 8010102:	f7f0 fbab 	bl	800085c <__aeabi_ddiv>
 8010106:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801010a:	4602      	mov	r2, r0
 801010c:	460b      	mov	r3, r1
 801010e:	4630      	mov	r0, r6
 8010110:	4639      	mov	r1, r7
 8010112:	f7f0 fa79 	bl	8000608 <__aeabi_dmul>
 8010116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801011a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801011e:	106d      	asrs	r5, r5, #1
 8010120:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010124:	f04f 0b00 	mov.w	fp, #0
 8010128:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801012c:	4661      	mov	r1, ip
 801012e:	2200      	movs	r2, #0
 8010130:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010134:	4658      	mov	r0, fp
 8010136:	46e1      	mov	r9, ip
 8010138:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801013c:	4614      	mov	r4, r2
 801013e:	461d      	mov	r5, r3
 8010140:	f7f0 fa62 	bl	8000608 <__aeabi_dmul>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4630      	mov	r0, r6
 801014a:	4639      	mov	r1, r7
 801014c:	f7f0 f8a4 	bl	8000298 <__aeabi_dsub>
 8010150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	4620      	mov	r0, r4
 801015a:	4629      	mov	r1, r5
 801015c:	f7f0 f89c 	bl	8000298 <__aeabi_dsub>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010168:	f7f0 f896 	bl	8000298 <__aeabi_dsub>
 801016c:	465a      	mov	r2, fp
 801016e:	464b      	mov	r3, r9
 8010170:	f7f0 fa4a 	bl	8000608 <__aeabi_dmul>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4630      	mov	r0, r6
 801017a:	4639      	mov	r1, r7
 801017c:	f7f0 f88c 	bl	8000298 <__aeabi_dsub>
 8010180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010184:	f7f0 fa40 	bl	8000608 <__aeabi_dmul>
 8010188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801018c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010190:	4610      	mov	r0, r2
 8010192:	4619      	mov	r1, r3
 8010194:	f7f0 fa38 	bl	8000608 <__aeabi_dmul>
 8010198:	a37d      	add	r3, pc, #500	@ (adr r3, 8010390 <__ieee754_pow+0x730>)
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	4604      	mov	r4, r0
 80101a0:	460d      	mov	r5, r1
 80101a2:	f7f0 fa31 	bl	8000608 <__aeabi_dmul>
 80101a6:	a37c      	add	r3, pc, #496	@ (adr r3, 8010398 <__ieee754_pow+0x738>)
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f7f0 f876 	bl	800029c <__adddf3>
 80101b0:	4622      	mov	r2, r4
 80101b2:	462b      	mov	r3, r5
 80101b4:	f7f0 fa28 	bl	8000608 <__aeabi_dmul>
 80101b8:	a379      	add	r3, pc, #484	@ (adr r3, 80103a0 <__ieee754_pow+0x740>)
 80101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101be:	f7f0 f86d 	bl	800029c <__adddf3>
 80101c2:	4622      	mov	r2, r4
 80101c4:	462b      	mov	r3, r5
 80101c6:	f7f0 fa1f 	bl	8000608 <__aeabi_dmul>
 80101ca:	a377      	add	r3, pc, #476	@ (adr r3, 80103a8 <__ieee754_pow+0x748>)
 80101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d0:	f7f0 f864 	bl	800029c <__adddf3>
 80101d4:	4622      	mov	r2, r4
 80101d6:	462b      	mov	r3, r5
 80101d8:	f7f0 fa16 	bl	8000608 <__aeabi_dmul>
 80101dc:	a374      	add	r3, pc, #464	@ (adr r3, 80103b0 <__ieee754_pow+0x750>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f7f0 f85b 	bl	800029c <__adddf3>
 80101e6:	4622      	mov	r2, r4
 80101e8:	462b      	mov	r3, r5
 80101ea:	f7f0 fa0d 	bl	8000608 <__aeabi_dmul>
 80101ee:	a372      	add	r3, pc, #456	@ (adr r3, 80103b8 <__ieee754_pow+0x758>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	f7f0 f852 	bl	800029c <__adddf3>
 80101f8:	4622      	mov	r2, r4
 80101fa:	4606      	mov	r6, r0
 80101fc:	460f      	mov	r7, r1
 80101fe:	462b      	mov	r3, r5
 8010200:	4620      	mov	r0, r4
 8010202:	4629      	mov	r1, r5
 8010204:	f7f0 fa00 	bl	8000608 <__aeabi_dmul>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	4630      	mov	r0, r6
 801020e:	4639      	mov	r1, r7
 8010210:	f7f0 f9fa 	bl	8000608 <__aeabi_dmul>
 8010214:	465a      	mov	r2, fp
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	464b      	mov	r3, r9
 801021c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010220:	f7f0 f83c 	bl	800029c <__adddf3>
 8010224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010228:	f7f0 f9ee 	bl	8000608 <__aeabi_dmul>
 801022c:	4622      	mov	r2, r4
 801022e:	462b      	mov	r3, r5
 8010230:	f7f0 f834 	bl	800029c <__adddf3>
 8010234:	465a      	mov	r2, fp
 8010236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801023a:	464b      	mov	r3, r9
 801023c:	4658      	mov	r0, fp
 801023e:	4649      	mov	r1, r9
 8010240:	f7f0 f9e2 	bl	8000608 <__aeabi_dmul>
 8010244:	4b6a      	ldr	r3, [pc, #424]	@ (80103f0 <__ieee754_pow+0x790>)
 8010246:	2200      	movs	r2, #0
 8010248:	4606      	mov	r6, r0
 801024a:	460f      	mov	r7, r1
 801024c:	f7f0 f826 	bl	800029c <__adddf3>
 8010250:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010254:	f7f0 f822 	bl	800029c <__adddf3>
 8010258:	46d8      	mov	r8, fp
 801025a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801025e:	460d      	mov	r5, r1
 8010260:	465a      	mov	r2, fp
 8010262:	460b      	mov	r3, r1
 8010264:	4640      	mov	r0, r8
 8010266:	4649      	mov	r1, r9
 8010268:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801026c:	f7f0 f9cc 	bl	8000608 <__aeabi_dmul>
 8010270:	465c      	mov	r4, fp
 8010272:	4680      	mov	r8, r0
 8010274:	4689      	mov	r9, r1
 8010276:	4b5e      	ldr	r3, [pc, #376]	@ (80103f0 <__ieee754_pow+0x790>)
 8010278:	2200      	movs	r2, #0
 801027a:	4620      	mov	r0, r4
 801027c:	4629      	mov	r1, r5
 801027e:	f7f0 f80b 	bl	8000298 <__aeabi_dsub>
 8010282:	4632      	mov	r2, r6
 8010284:	463b      	mov	r3, r7
 8010286:	f7f0 f807 	bl	8000298 <__aeabi_dsub>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010292:	f7f0 f801 	bl	8000298 <__aeabi_dsub>
 8010296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801029a:	f7f0 f9b5 	bl	8000608 <__aeabi_dmul>
 801029e:	4622      	mov	r2, r4
 80102a0:	4606      	mov	r6, r0
 80102a2:	460f      	mov	r7, r1
 80102a4:	462b      	mov	r3, r5
 80102a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102aa:	f7f0 f9ad 	bl	8000608 <__aeabi_dmul>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	f7ef fff1 	bl	800029c <__adddf3>
 80102ba:	4606      	mov	r6, r0
 80102bc:	460f      	mov	r7, r1
 80102be:	4602      	mov	r2, r0
 80102c0:	460b      	mov	r3, r1
 80102c2:	4640      	mov	r0, r8
 80102c4:	4649      	mov	r1, r9
 80102c6:	f7ef ffe9 	bl	800029c <__adddf3>
 80102ca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80102ce:	a33c      	add	r3, pc, #240	@ (adr r3, 80103c0 <__ieee754_pow+0x760>)
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	4658      	mov	r0, fp
 80102d6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80102da:	460d      	mov	r5, r1
 80102dc:	f7f0 f994 	bl	8000608 <__aeabi_dmul>
 80102e0:	465c      	mov	r4, fp
 80102e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102e6:	4642      	mov	r2, r8
 80102e8:	464b      	mov	r3, r9
 80102ea:	4620      	mov	r0, r4
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7ef ffd3 	bl	8000298 <__aeabi_dsub>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7ef ffcd 	bl	8000298 <__aeabi_dsub>
 80102fe:	a332      	add	r3, pc, #200	@ (adr r3, 80103c8 <__ieee754_pow+0x768>)
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7f0 f980 	bl	8000608 <__aeabi_dmul>
 8010308:	a331      	add	r3, pc, #196	@ (adr r3, 80103d0 <__ieee754_pow+0x770>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	4606      	mov	r6, r0
 8010310:	460f      	mov	r7, r1
 8010312:	4620      	mov	r0, r4
 8010314:	4629      	mov	r1, r5
 8010316:	f7f0 f977 	bl	8000608 <__aeabi_dmul>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	4630      	mov	r0, r6
 8010320:	4639      	mov	r1, r7
 8010322:	f7ef ffbb 	bl	800029c <__adddf3>
 8010326:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010328:	4b32      	ldr	r3, [pc, #200]	@ (80103f4 <__ieee754_pow+0x794>)
 801032a:	4413      	add	r3, r2
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	f7ef ffb4 	bl	800029c <__adddf3>
 8010334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010338:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801033a:	f7f0 f8fb 	bl	8000534 <__aeabi_i2d>
 801033e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010340:	4b2d      	ldr	r3, [pc, #180]	@ (80103f8 <__ieee754_pow+0x798>)
 8010342:	4413      	add	r3, r2
 8010344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010348:	4606      	mov	r6, r0
 801034a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801034e:	460f      	mov	r7, r1
 8010350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010354:	f7ef ffa2 	bl	800029c <__adddf3>
 8010358:	4642      	mov	r2, r8
 801035a:	464b      	mov	r3, r9
 801035c:	f7ef ff9e 	bl	800029c <__adddf3>
 8010360:	4632      	mov	r2, r6
 8010362:	463b      	mov	r3, r7
 8010364:	f7ef ff9a 	bl	800029c <__adddf3>
 8010368:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801036c:	4632      	mov	r2, r6
 801036e:	463b      	mov	r3, r7
 8010370:	4658      	mov	r0, fp
 8010372:	460d      	mov	r5, r1
 8010374:	f7ef ff90 	bl	8000298 <__aeabi_dsub>
 8010378:	4642      	mov	r2, r8
 801037a:	464b      	mov	r3, r9
 801037c:	f7ef ff8c 	bl	8000298 <__aeabi_dsub>
 8010380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010384:	f7ef ff88 	bl	8000298 <__aeabi_dsub>
 8010388:	465c      	mov	r4, fp
 801038a:	4602      	mov	r2, r0
 801038c:	e036      	b.n	80103fc <__ieee754_pow+0x79c>
 801038e:	bf00      	nop
 8010390:	4a454eef 	.word	0x4a454eef
 8010394:	3fca7e28 	.word	0x3fca7e28
 8010398:	93c9db65 	.word	0x93c9db65
 801039c:	3fcd864a 	.word	0x3fcd864a
 80103a0:	a91d4101 	.word	0xa91d4101
 80103a4:	3fd17460 	.word	0x3fd17460
 80103a8:	518f264d 	.word	0x518f264d
 80103ac:	3fd55555 	.word	0x3fd55555
 80103b0:	db6fabff 	.word	0xdb6fabff
 80103b4:	3fdb6db6 	.word	0x3fdb6db6
 80103b8:	33333303 	.word	0x33333303
 80103bc:	3fe33333 	.word	0x3fe33333
 80103c0:	e0000000 	.word	0xe0000000
 80103c4:	3feec709 	.word	0x3feec709
 80103c8:	dc3a03fd 	.word	0xdc3a03fd
 80103cc:	3feec709 	.word	0x3feec709
 80103d0:	145b01f5 	.word	0x145b01f5
 80103d4:	be3e2fe0 	.word	0xbe3e2fe0
 80103d8:	7ff00000 	.word	0x7ff00000
 80103dc:	43400000 	.word	0x43400000
 80103e0:	0003988e 	.word	0x0003988e
 80103e4:	000bb679 	.word	0x000bb679
 80103e8:	08012f00 	.word	0x08012f00
 80103ec:	3ff00000 	.word	0x3ff00000
 80103f0:	40080000 	.word	0x40080000
 80103f4:	08012ee0 	.word	0x08012ee0
 80103f8:	08012ef0 	.word	0x08012ef0
 80103fc:	460b      	mov	r3, r1
 80103fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010402:	e5d7      	b.n	800ffb4 <__ieee754_pow+0x354>
 8010404:	f04f 0a01 	mov.w	sl, #1
 8010408:	e65e      	b.n	80100c8 <__ieee754_pow+0x468>
 801040a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80106dc <__ieee754_pow+0xa7c>)
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	4630      	mov	r0, r6
 8010412:	4639      	mov	r1, r7
 8010414:	f7ef ff42 	bl	800029c <__adddf3>
 8010418:	4642      	mov	r2, r8
 801041a:	e9cd 0100 	strd	r0, r1, [sp]
 801041e:	464b      	mov	r3, r9
 8010420:	4620      	mov	r0, r4
 8010422:	4629      	mov	r1, r5
 8010424:	f7ef ff38 	bl	8000298 <__aeabi_dsub>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010430:	f7f0 fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8010434:	2800      	cmp	r0, #0
 8010436:	f47f ae00 	bne.w	801003a <__ieee754_pow+0x3da>
 801043a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801043e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010442:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010446:	fa43 fa0a 	asr.w	sl, r3, sl
 801044a:	44da      	add	sl, fp
 801044c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010450:	489d      	ldr	r0, [pc, #628]	@ (80106c8 <__ieee754_pow+0xa68>)
 8010452:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010456:	4108      	asrs	r0, r1
 8010458:	ea00 030a 	and.w	r3, r0, sl
 801045c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010460:	f1c1 0114 	rsb	r1, r1, #20
 8010464:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010468:	fa4a fa01 	asr.w	sl, sl, r1
 801046c:	f1bb 0f00 	cmp.w	fp, #0
 8010470:	4640      	mov	r0, r8
 8010472:	4649      	mov	r1, r9
 8010474:	f04f 0200 	mov.w	r2, #0
 8010478:	bfb8      	it	lt
 801047a:	f1ca 0a00 	rsblt	sl, sl, #0
 801047e:	f7ef ff0b 	bl	8000298 <__aeabi_dsub>
 8010482:	4680      	mov	r8, r0
 8010484:	4689      	mov	r9, r1
 8010486:	4632      	mov	r2, r6
 8010488:	463b      	mov	r3, r7
 801048a:	4640      	mov	r0, r8
 801048c:	4649      	mov	r1, r9
 801048e:	f7ef ff05 	bl	800029c <__adddf3>
 8010492:	2400      	movs	r4, #0
 8010494:	a37c      	add	r3, pc, #496	@ (adr r3, 8010688 <__ieee754_pow+0xa28>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	4620      	mov	r0, r4
 801049c:	460d      	mov	r5, r1
 801049e:	f7f0 f8b3 	bl	8000608 <__aeabi_dmul>
 80104a2:	4642      	mov	r2, r8
 80104a4:	e9cd 0100 	strd	r0, r1, [sp]
 80104a8:	464b      	mov	r3, r9
 80104aa:	4620      	mov	r0, r4
 80104ac:	4629      	mov	r1, r5
 80104ae:	f7ef fef3 	bl	8000298 <__aeabi_dsub>
 80104b2:	4602      	mov	r2, r0
 80104b4:	460b      	mov	r3, r1
 80104b6:	4630      	mov	r0, r6
 80104b8:	4639      	mov	r1, r7
 80104ba:	f7ef feed 	bl	8000298 <__aeabi_dsub>
 80104be:	a374      	add	r3, pc, #464	@ (adr r3, 8010690 <__ieee754_pow+0xa30>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	f7f0 f8a0 	bl	8000608 <__aeabi_dmul>
 80104c8:	a373      	add	r3, pc, #460	@ (adr r3, 8010698 <__ieee754_pow+0xa38>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	4680      	mov	r8, r0
 80104d0:	4689      	mov	r9, r1
 80104d2:	4620      	mov	r0, r4
 80104d4:	4629      	mov	r1, r5
 80104d6:	f7f0 f897 	bl	8000608 <__aeabi_dmul>
 80104da:	4602      	mov	r2, r0
 80104dc:	460b      	mov	r3, r1
 80104de:	4640      	mov	r0, r8
 80104e0:	4649      	mov	r1, r9
 80104e2:	f7ef fedb 	bl	800029c <__adddf3>
 80104e6:	4604      	mov	r4, r0
 80104e8:	460d      	mov	r5, r1
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104f2:	f7ef fed3 	bl	800029c <__adddf3>
 80104f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104fa:	4680      	mov	r8, r0
 80104fc:	4689      	mov	r9, r1
 80104fe:	f7ef fecb 	bl	8000298 <__aeabi_dsub>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4620      	mov	r0, r4
 8010508:	4629      	mov	r1, r5
 801050a:	f7ef fec5 	bl	8000298 <__aeabi_dsub>
 801050e:	4642      	mov	r2, r8
 8010510:	4606      	mov	r6, r0
 8010512:	460f      	mov	r7, r1
 8010514:	464b      	mov	r3, r9
 8010516:	4640      	mov	r0, r8
 8010518:	4649      	mov	r1, r9
 801051a:	f7f0 f875 	bl	8000608 <__aeabi_dmul>
 801051e:	a360      	add	r3, pc, #384	@ (adr r3, 80106a0 <__ieee754_pow+0xa40>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	4604      	mov	r4, r0
 8010526:	460d      	mov	r5, r1
 8010528:	f7f0 f86e 	bl	8000608 <__aeabi_dmul>
 801052c:	a35e      	add	r3, pc, #376	@ (adr r3, 80106a8 <__ieee754_pow+0xa48>)
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	f7ef feb1 	bl	8000298 <__aeabi_dsub>
 8010536:	4622      	mov	r2, r4
 8010538:	462b      	mov	r3, r5
 801053a:	f7f0 f865 	bl	8000608 <__aeabi_dmul>
 801053e:	a35c      	add	r3, pc, #368	@ (adr r3, 80106b0 <__ieee754_pow+0xa50>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	f7ef feaa 	bl	800029c <__adddf3>
 8010548:	4622      	mov	r2, r4
 801054a:	462b      	mov	r3, r5
 801054c:	f7f0 f85c 	bl	8000608 <__aeabi_dmul>
 8010550:	a359      	add	r3, pc, #356	@ (adr r3, 80106b8 <__ieee754_pow+0xa58>)
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f7ef fe9f 	bl	8000298 <__aeabi_dsub>
 801055a:	4622      	mov	r2, r4
 801055c:	462b      	mov	r3, r5
 801055e:	f7f0 f853 	bl	8000608 <__aeabi_dmul>
 8010562:	a357      	add	r3, pc, #348	@ (adr r3, 80106c0 <__ieee754_pow+0xa60>)
 8010564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010568:	f7ef fe98 	bl	800029c <__adddf3>
 801056c:	4622      	mov	r2, r4
 801056e:	462b      	mov	r3, r5
 8010570:	f7f0 f84a 	bl	8000608 <__aeabi_dmul>
 8010574:	4602      	mov	r2, r0
 8010576:	460b      	mov	r3, r1
 8010578:	4640      	mov	r0, r8
 801057a:	4649      	mov	r1, r9
 801057c:	f7ef fe8c 	bl	8000298 <__aeabi_dsub>
 8010580:	4604      	mov	r4, r0
 8010582:	460d      	mov	r5, r1
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4640      	mov	r0, r8
 801058a:	4649      	mov	r1, r9
 801058c:	f7f0 f83c 	bl	8000608 <__aeabi_dmul>
 8010590:	2200      	movs	r2, #0
 8010592:	e9cd 0100 	strd	r0, r1, [sp]
 8010596:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801059a:	4620      	mov	r0, r4
 801059c:	4629      	mov	r1, r5
 801059e:	f7ef fe7b 	bl	8000298 <__aeabi_dsub>
 80105a2:	4602      	mov	r2, r0
 80105a4:	460b      	mov	r3, r1
 80105a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105aa:	f7f0 f957 	bl	800085c <__aeabi_ddiv>
 80105ae:	4632      	mov	r2, r6
 80105b0:	4604      	mov	r4, r0
 80105b2:	460d      	mov	r5, r1
 80105b4:	463b      	mov	r3, r7
 80105b6:	4640      	mov	r0, r8
 80105b8:	4649      	mov	r1, r9
 80105ba:	f7f0 f825 	bl	8000608 <__aeabi_dmul>
 80105be:	4632      	mov	r2, r6
 80105c0:	463b      	mov	r3, r7
 80105c2:	f7ef fe6b 	bl	800029c <__adddf3>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4620      	mov	r0, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	f7ef fe63 	bl	8000298 <__aeabi_dsub>
 80105d2:	4642      	mov	r2, r8
 80105d4:	464b      	mov	r3, r9
 80105d6:	f7ef fe5f 	bl	8000298 <__aeabi_dsub>
 80105da:	460b      	mov	r3, r1
 80105dc:	4602      	mov	r2, r0
 80105de:	493b      	ldr	r1, [pc, #236]	@ (80106cc <__ieee754_pow+0xa6c>)
 80105e0:	2000      	movs	r0, #0
 80105e2:	f7ef fe59 	bl	8000298 <__aeabi_dsub>
 80105e6:	ec41 0b10 	vmov	d0, r0, r1
 80105ea:	ee10 3a90 	vmov	r3, s1
 80105ee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80105f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105f6:	da30      	bge.n	801065a <__ieee754_pow+0x9fa>
 80105f8:	4650      	mov	r0, sl
 80105fa:	f000 f87d 	bl	80106f8 <scalbn>
 80105fe:	ec51 0b10 	vmov	r0, r1, d0
 8010602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010606:	f7ff bbd2 	b.w	800fdae <__ieee754_pow+0x14e>
 801060a:	4c31      	ldr	r4, [pc, #196]	@ (80106d0 <__ieee754_pow+0xa70>)
 801060c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010610:	42a3      	cmp	r3, r4
 8010612:	d91a      	bls.n	801064a <__ieee754_pow+0x9ea>
 8010614:	4b2f      	ldr	r3, [pc, #188]	@ (80106d4 <__ieee754_pow+0xa74>)
 8010616:	440b      	add	r3, r1
 8010618:	4303      	orrs	r3, r0
 801061a:	d009      	beq.n	8010630 <__ieee754_pow+0x9d0>
 801061c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010620:	2200      	movs	r2, #0
 8010622:	2300      	movs	r3, #0
 8010624:	f7f0 fa62 	bl	8000aec <__aeabi_dcmplt>
 8010628:	3800      	subs	r0, #0
 801062a:	bf18      	it	ne
 801062c:	2001      	movne	r0, #1
 801062e:	e42b      	b.n	800fe88 <__ieee754_pow+0x228>
 8010630:	4642      	mov	r2, r8
 8010632:	464b      	mov	r3, r9
 8010634:	f7ef fe30 	bl	8000298 <__aeabi_dsub>
 8010638:	4632      	mov	r2, r6
 801063a:	463b      	mov	r3, r7
 801063c:	f7f0 fa6a 	bl	8000b14 <__aeabi_dcmpge>
 8010640:	2800      	cmp	r0, #0
 8010642:	d1eb      	bne.n	801061c <__ieee754_pow+0x9bc>
 8010644:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80106e4 <__ieee754_pow+0xa84>
 8010648:	e6f7      	b.n	801043a <__ieee754_pow+0x7da>
 801064a:	469a      	mov	sl, r3
 801064c:	4b22      	ldr	r3, [pc, #136]	@ (80106d8 <__ieee754_pow+0xa78>)
 801064e:	459a      	cmp	sl, r3
 8010650:	f63f aef3 	bhi.w	801043a <__ieee754_pow+0x7da>
 8010654:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010658:	e715      	b.n	8010486 <__ieee754_pow+0x826>
 801065a:	ec51 0b10 	vmov	r0, r1, d0
 801065e:	4619      	mov	r1, r3
 8010660:	e7cf      	b.n	8010602 <__ieee754_pow+0x9a2>
 8010662:	491a      	ldr	r1, [pc, #104]	@ (80106cc <__ieee754_pow+0xa6c>)
 8010664:	2000      	movs	r0, #0
 8010666:	f7ff bb18 	b.w	800fc9a <__ieee754_pow+0x3a>
 801066a:	2000      	movs	r0, #0
 801066c:	2100      	movs	r1, #0
 801066e:	f7ff bb14 	b.w	800fc9a <__ieee754_pow+0x3a>
 8010672:	4630      	mov	r0, r6
 8010674:	4639      	mov	r1, r7
 8010676:	f7ff bb10 	b.w	800fc9a <__ieee754_pow+0x3a>
 801067a:	460c      	mov	r4, r1
 801067c:	f7ff bb5e 	b.w	800fd3c <__ieee754_pow+0xdc>
 8010680:	2400      	movs	r4, #0
 8010682:	f7ff bb49 	b.w	800fd18 <__ieee754_pow+0xb8>
 8010686:	bf00      	nop
 8010688:	00000000 	.word	0x00000000
 801068c:	3fe62e43 	.word	0x3fe62e43
 8010690:	fefa39ef 	.word	0xfefa39ef
 8010694:	3fe62e42 	.word	0x3fe62e42
 8010698:	0ca86c39 	.word	0x0ca86c39
 801069c:	be205c61 	.word	0xbe205c61
 80106a0:	72bea4d0 	.word	0x72bea4d0
 80106a4:	3e663769 	.word	0x3e663769
 80106a8:	c5d26bf1 	.word	0xc5d26bf1
 80106ac:	3ebbbd41 	.word	0x3ebbbd41
 80106b0:	af25de2c 	.word	0xaf25de2c
 80106b4:	3f11566a 	.word	0x3f11566a
 80106b8:	16bebd93 	.word	0x16bebd93
 80106bc:	3f66c16c 	.word	0x3f66c16c
 80106c0:	5555553e 	.word	0x5555553e
 80106c4:	3fc55555 	.word	0x3fc55555
 80106c8:	fff00000 	.word	0xfff00000
 80106cc:	3ff00000 	.word	0x3ff00000
 80106d0:	4090cbff 	.word	0x4090cbff
 80106d4:	3f6f3400 	.word	0x3f6f3400
 80106d8:	3fe00000 	.word	0x3fe00000
 80106dc:	652b82fe 	.word	0x652b82fe
 80106e0:	3c971547 	.word	0x3c971547
 80106e4:	4090cc00 	.word	0x4090cc00

080106e8 <fabs>:
 80106e8:	ec51 0b10 	vmov	r0, r1, d0
 80106ec:	4602      	mov	r2, r0
 80106ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80106f2:	ec43 2b10 	vmov	d0, r2, r3
 80106f6:	4770      	bx	lr

080106f8 <scalbn>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	ec55 4b10 	vmov	r4, r5, d0
 80106fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010702:	4606      	mov	r6, r0
 8010704:	462b      	mov	r3, r5
 8010706:	b991      	cbnz	r1, 801072e <scalbn+0x36>
 8010708:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801070c:	4323      	orrs	r3, r4
 801070e:	d03d      	beq.n	801078c <scalbn+0x94>
 8010710:	4b35      	ldr	r3, [pc, #212]	@ (80107e8 <scalbn+0xf0>)
 8010712:	4620      	mov	r0, r4
 8010714:	4629      	mov	r1, r5
 8010716:	2200      	movs	r2, #0
 8010718:	f7ef ff76 	bl	8000608 <__aeabi_dmul>
 801071c:	4b33      	ldr	r3, [pc, #204]	@ (80107ec <scalbn+0xf4>)
 801071e:	429e      	cmp	r6, r3
 8010720:	4604      	mov	r4, r0
 8010722:	460d      	mov	r5, r1
 8010724:	da0f      	bge.n	8010746 <scalbn+0x4e>
 8010726:	a328      	add	r3, pc, #160	@ (adr r3, 80107c8 <scalbn+0xd0>)
 8010728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072c:	e01e      	b.n	801076c <scalbn+0x74>
 801072e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010732:	4291      	cmp	r1, r2
 8010734:	d10b      	bne.n	801074e <scalbn+0x56>
 8010736:	4622      	mov	r2, r4
 8010738:	4620      	mov	r0, r4
 801073a:	4629      	mov	r1, r5
 801073c:	f7ef fdae 	bl	800029c <__adddf3>
 8010740:	4604      	mov	r4, r0
 8010742:	460d      	mov	r5, r1
 8010744:	e022      	b.n	801078c <scalbn+0x94>
 8010746:	460b      	mov	r3, r1
 8010748:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801074c:	3936      	subs	r1, #54	@ 0x36
 801074e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010752:	4296      	cmp	r6, r2
 8010754:	dd0d      	ble.n	8010772 <scalbn+0x7a>
 8010756:	2d00      	cmp	r5, #0
 8010758:	a11d      	add	r1, pc, #116	@ (adr r1, 80107d0 <scalbn+0xd8>)
 801075a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801075e:	da02      	bge.n	8010766 <scalbn+0x6e>
 8010760:	a11d      	add	r1, pc, #116	@ (adr r1, 80107d8 <scalbn+0xe0>)
 8010762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010766:	a31a      	add	r3, pc, #104	@ (adr r3, 80107d0 <scalbn+0xd8>)
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	f7ef ff4c 	bl	8000608 <__aeabi_dmul>
 8010770:	e7e6      	b.n	8010740 <scalbn+0x48>
 8010772:	1872      	adds	r2, r6, r1
 8010774:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010778:	428a      	cmp	r2, r1
 801077a:	dcec      	bgt.n	8010756 <scalbn+0x5e>
 801077c:	2a00      	cmp	r2, #0
 801077e:	dd08      	ble.n	8010792 <scalbn+0x9a>
 8010780:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010784:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010788:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801078c:	ec45 4b10 	vmov	d0, r4, r5
 8010790:	bd70      	pop	{r4, r5, r6, pc}
 8010792:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010796:	da08      	bge.n	80107aa <scalbn+0xb2>
 8010798:	2d00      	cmp	r5, #0
 801079a:	a10b      	add	r1, pc, #44	@ (adr r1, 80107c8 <scalbn+0xd0>)
 801079c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a0:	dac1      	bge.n	8010726 <scalbn+0x2e>
 80107a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80107e0 <scalbn+0xe8>)
 80107a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a8:	e7bd      	b.n	8010726 <scalbn+0x2e>
 80107aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107ae:	3236      	adds	r2, #54	@ 0x36
 80107b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80107b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80107b8:	4620      	mov	r0, r4
 80107ba:	4b0d      	ldr	r3, [pc, #52]	@ (80107f0 <scalbn+0xf8>)
 80107bc:	4629      	mov	r1, r5
 80107be:	2200      	movs	r2, #0
 80107c0:	e7d4      	b.n	801076c <scalbn+0x74>
 80107c2:	bf00      	nop
 80107c4:	f3af 8000 	nop.w
 80107c8:	c2f8f359 	.word	0xc2f8f359
 80107cc:	01a56e1f 	.word	0x01a56e1f
 80107d0:	8800759c 	.word	0x8800759c
 80107d4:	7e37e43c 	.word	0x7e37e43c
 80107d8:	8800759c 	.word	0x8800759c
 80107dc:	fe37e43c 	.word	0xfe37e43c
 80107e0:	c2f8f359 	.word	0xc2f8f359
 80107e4:	81a56e1f 	.word	0x81a56e1f
 80107e8:	43500000 	.word	0x43500000
 80107ec:	ffff3cb0 	.word	0xffff3cb0
 80107f0:	3c900000 	.word	0x3c900000

080107f4 <with_errno>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	ed2d 8b02 	vpush	{d8}
 80107fa:	eeb0 8a40 	vmov.f32	s16, s0
 80107fe:	eef0 8a60 	vmov.f32	s17, s1
 8010802:	4604      	mov	r4, r0
 8010804:	f7fd fa92 	bl	800dd2c <__errno>
 8010808:	eeb0 0a48 	vmov.f32	s0, s16
 801080c:	eef0 0a68 	vmov.f32	s1, s17
 8010810:	ecbd 8b02 	vpop	{d8}
 8010814:	6004      	str	r4, [r0, #0]
 8010816:	bd10      	pop	{r4, pc}

08010818 <xflow>:
 8010818:	4603      	mov	r3, r0
 801081a:	b507      	push	{r0, r1, r2, lr}
 801081c:	ec51 0b10 	vmov	r0, r1, d0
 8010820:	b183      	cbz	r3, 8010844 <xflow+0x2c>
 8010822:	4602      	mov	r2, r0
 8010824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010828:	e9cd 2300 	strd	r2, r3, [sp]
 801082c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010830:	f7ef feea 	bl	8000608 <__aeabi_dmul>
 8010834:	ec41 0b10 	vmov	d0, r0, r1
 8010838:	2022      	movs	r0, #34	@ 0x22
 801083a:	b003      	add	sp, #12
 801083c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010840:	f7ff bfd8 	b.w	80107f4 <with_errno>
 8010844:	4602      	mov	r2, r0
 8010846:	460b      	mov	r3, r1
 8010848:	e7ee      	b.n	8010828 <xflow+0x10>
 801084a:	0000      	movs	r0, r0
 801084c:	0000      	movs	r0, r0
	...

08010850 <__math_uflow>:
 8010850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010858 <__math_uflow+0x8>
 8010854:	f7ff bfe0 	b.w	8010818 <xflow>
 8010858:	00000000 	.word	0x00000000
 801085c:	10000000 	.word	0x10000000

08010860 <__math_oflow>:
 8010860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010868 <__math_oflow+0x8>
 8010864:	f7ff bfd8 	b.w	8010818 <xflow>
 8010868:	00000000 	.word	0x00000000
 801086c:	70000000 	.word	0x70000000

08010870 <__ieee754_sqrt>:
 8010870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	4a68      	ldr	r2, [pc, #416]	@ (8010a18 <__ieee754_sqrt+0x1a8>)
 8010876:	ec55 4b10 	vmov	r4, r5, d0
 801087a:	43aa      	bics	r2, r5
 801087c:	462b      	mov	r3, r5
 801087e:	4621      	mov	r1, r4
 8010880:	d110      	bne.n	80108a4 <__ieee754_sqrt+0x34>
 8010882:	4622      	mov	r2, r4
 8010884:	4620      	mov	r0, r4
 8010886:	4629      	mov	r1, r5
 8010888:	f7ef febe 	bl	8000608 <__aeabi_dmul>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4620      	mov	r0, r4
 8010892:	4629      	mov	r1, r5
 8010894:	f7ef fd02 	bl	800029c <__adddf3>
 8010898:	4604      	mov	r4, r0
 801089a:	460d      	mov	r5, r1
 801089c:	ec45 4b10 	vmov	d0, r4, r5
 80108a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	2d00      	cmp	r5, #0
 80108a6:	dc0e      	bgt.n	80108c6 <__ieee754_sqrt+0x56>
 80108a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80108ac:	4322      	orrs	r2, r4
 80108ae:	d0f5      	beq.n	801089c <__ieee754_sqrt+0x2c>
 80108b0:	b19d      	cbz	r5, 80108da <__ieee754_sqrt+0x6a>
 80108b2:	4622      	mov	r2, r4
 80108b4:	4620      	mov	r0, r4
 80108b6:	4629      	mov	r1, r5
 80108b8:	f7ef fcee 	bl	8000298 <__aeabi_dsub>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	f7ef ffcc 	bl	800085c <__aeabi_ddiv>
 80108c4:	e7e8      	b.n	8010898 <__ieee754_sqrt+0x28>
 80108c6:	152a      	asrs	r2, r5, #20
 80108c8:	d115      	bne.n	80108f6 <__ieee754_sqrt+0x86>
 80108ca:	2000      	movs	r0, #0
 80108cc:	e009      	b.n	80108e2 <__ieee754_sqrt+0x72>
 80108ce:	0acb      	lsrs	r3, r1, #11
 80108d0:	3a15      	subs	r2, #21
 80108d2:	0549      	lsls	r1, r1, #21
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d0fa      	beq.n	80108ce <__ieee754_sqrt+0x5e>
 80108d8:	e7f7      	b.n	80108ca <__ieee754_sqrt+0x5a>
 80108da:	462a      	mov	r2, r5
 80108dc:	e7fa      	b.n	80108d4 <__ieee754_sqrt+0x64>
 80108de:	005b      	lsls	r3, r3, #1
 80108e0:	3001      	adds	r0, #1
 80108e2:	02dc      	lsls	r4, r3, #11
 80108e4:	d5fb      	bpl.n	80108de <__ieee754_sqrt+0x6e>
 80108e6:	1e44      	subs	r4, r0, #1
 80108e8:	1b12      	subs	r2, r2, r4
 80108ea:	f1c0 0420 	rsb	r4, r0, #32
 80108ee:	fa21 f404 	lsr.w	r4, r1, r4
 80108f2:	4323      	orrs	r3, r4
 80108f4:	4081      	lsls	r1, r0
 80108f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80108fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010902:	07d2      	lsls	r2, r2, #31
 8010904:	bf5c      	itt	pl
 8010906:	005b      	lslpl	r3, r3, #1
 8010908:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801090c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010910:	bf58      	it	pl
 8010912:	0049      	lslpl	r1, r1, #1
 8010914:	2600      	movs	r6, #0
 8010916:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801091a:	106d      	asrs	r5, r5, #1
 801091c:	0049      	lsls	r1, r1, #1
 801091e:	2016      	movs	r0, #22
 8010920:	4632      	mov	r2, r6
 8010922:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010926:	1917      	adds	r7, r2, r4
 8010928:	429f      	cmp	r7, r3
 801092a:	bfde      	ittt	le
 801092c:	193a      	addle	r2, r7, r4
 801092e:	1bdb      	suble	r3, r3, r7
 8010930:	1936      	addle	r6, r6, r4
 8010932:	0fcf      	lsrs	r7, r1, #31
 8010934:	3801      	subs	r0, #1
 8010936:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801093a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801093e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010942:	d1f0      	bne.n	8010926 <__ieee754_sqrt+0xb6>
 8010944:	4604      	mov	r4, r0
 8010946:	2720      	movs	r7, #32
 8010948:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801094c:	429a      	cmp	r2, r3
 801094e:	eb00 0e0c 	add.w	lr, r0, ip
 8010952:	db02      	blt.n	801095a <__ieee754_sqrt+0xea>
 8010954:	d113      	bne.n	801097e <__ieee754_sqrt+0x10e>
 8010956:	458e      	cmp	lr, r1
 8010958:	d811      	bhi.n	801097e <__ieee754_sqrt+0x10e>
 801095a:	f1be 0f00 	cmp.w	lr, #0
 801095e:	eb0e 000c 	add.w	r0, lr, ip
 8010962:	da42      	bge.n	80109ea <__ieee754_sqrt+0x17a>
 8010964:	2800      	cmp	r0, #0
 8010966:	db40      	blt.n	80109ea <__ieee754_sqrt+0x17a>
 8010968:	f102 0801 	add.w	r8, r2, #1
 801096c:	1a9b      	subs	r3, r3, r2
 801096e:	458e      	cmp	lr, r1
 8010970:	bf88      	it	hi
 8010972:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010976:	eba1 010e 	sub.w	r1, r1, lr
 801097a:	4464      	add	r4, ip
 801097c:	4642      	mov	r2, r8
 801097e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010982:	3f01      	subs	r7, #1
 8010984:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010988:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801098c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010990:	d1dc      	bne.n	801094c <__ieee754_sqrt+0xdc>
 8010992:	4319      	orrs	r1, r3
 8010994:	d01b      	beq.n	80109ce <__ieee754_sqrt+0x15e>
 8010996:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010a1c <__ieee754_sqrt+0x1ac>
 801099a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010a20 <__ieee754_sqrt+0x1b0>
 801099e:	e9da 0100 	ldrd	r0, r1, [sl]
 80109a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80109a6:	f7ef fc77 	bl	8000298 <__aeabi_dsub>
 80109aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	4640      	mov	r0, r8
 80109b4:	4649      	mov	r1, r9
 80109b6:	f7f0 f8a3 	bl	8000b00 <__aeabi_dcmple>
 80109ba:	b140      	cbz	r0, 80109ce <__ieee754_sqrt+0x15e>
 80109bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80109c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80109c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80109c8:	d111      	bne.n	80109ee <__ieee754_sqrt+0x17e>
 80109ca:	3601      	adds	r6, #1
 80109cc:	463c      	mov	r4, r7
 80109ce:	1072      	asrs	r2, r6, #1
 80109d0:	0863      	lsrs	r3, r4, #1
 80109d2:	07f1      	lsls	r1, r6, #31
 80109d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80109d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80109dc:	bf48      	it	mi
 80109de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80109e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80109e6:	4618      	mov	r0, r3
 80109e8:	e756      	b.n	8010898 <__ieee754_sqrt+0x28>
 80109ea:	4690      	mov	r8, r2
 80109ec:	e7be      	b.n	801096c <__ieee754_sqrt+0xfc>
 80109ee:	f7ef fc55 	bl	800029c <__adddf3>
 80109f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80109f6:	4602      	mov	r2, r0
 80109f8:	460b      	mov	r3, r1
 80109fa:	4640      	mov	r0, r8
 80109fc:	4649      	mov	r1, r9
 80109fe:	f7f0 f875 	bl	8000aec <__aeabi_dcmplt>
 8010a02:	b120      	cbz	r0, 8010a0e <__ieee754_sqrt+0x19e>
 8010a04:	1ca0      	adds	r0, r4, #2
 8010a06:	bf08      	it	eq
 8010a08:	3601      	addeq	r6, #1
 8010a0a:	3402      	adds	r4, #2
 8010a0c:	e7df      	b.n	80109ce <__ieee754_sqrt+0x15e>
 8010a0e:	1c63      	adds	r3, r4, #1
 8010a10:	f023 0401 	bic.w	r4, r3, #1
 8010a14:	e7db      	b.n	80109ce <__ieee754_sqrt+0x15e>
 8010a16:	bf00      	nop
 8010a18:	7ff00000 	.word	0x7ff00000
 8010a1c:	20000378 	.word	0x20000378
 8010a20:	20000370 	.word	0x20000370

08010a24 <_init>:
 8010a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a26:	bf00      	nop
 8010a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a2a:	bc08      	pop	{r3}
 8010a2c:	469e      	mov	lr, r3
 8010a2e:	4770      	bx	lr

08010a30 <_fini>:
 8010a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a32:	bf00      	nop
 8010a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a36:	bc08      	pop	{r3}
 8010a38:	469e      	mov	lr, r3
 8010a3a:	4770      	bx	lr
